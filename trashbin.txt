
          background: "red",
 

        // background: "red",
 

import handHolding from "../../../../../assets/images/hand-holding-seeding.svg";
 

import handHolding from "../../../../../assets/images/hand-holding-seeding.svg";
 

import handHolding from "../../../../../assets/images/hand-holding-seeding.svg";
 

import handHolding from "../../../../../assets/images/hand-holding-seeding.svg";
 
import handHolding from "../../../../../assets/images/hand-holding-seeding.svg";
 

import handHolding from "../../../../../assets/images/hand-holding-seeding.svg";
 

import handHolding from "../../../../../assets/images/hand-holding-seeding.svg";
 

import handHolding from "../../../../../assets/images/hand-holding-seeding.svg";
 

import TablesData from "../../../../ReportsComponent/Pages/TablesData";
 

import handHolding from "../../../../../assets/images/hand-holding-seeding.svg";
 
../../../../../assets/images/hand-holding-seeding.svg
 

import handHolding from "../../../../../assets/images/hand-holding-seeding.svg";
 

import handHolding from "../../../../../assets/images/hand-holding-seeding.svg";
 
../../../../../assets/images/snowblowing.svg
 
../../../../../assets/images/hand-holding-seeding.svg
 
handHolding
 

import boiler from "../../../../assets/images/boiler.svg";
 

import meter_bolt from "../../../../assets/images/meter-bolt 1.svg";
import calculator_bill from "../../../../assets/images/calculator-bill 1.svg";
import hand_holding from "../../../../assets/images/hand-holding-water 1.svg";
import smoke from "../../../../assets/images/smoke.svg";
import lightbulb from "../../../../assets/images/lightbulb.svg";
import insight from "../../../../assets/images/insight.svg";
import ideaChange from "../../../../assets/images/idea-exchange.svg";
import lightBulbSetting from "../../../../assets/images/lightbulb-setting.svg";
import solar_panel from "../../../../assets/images/solar-panel.svg";
import solarpanel_1 from "../../../../assets/images/solar-panel 1.svg";
import lightSelling from "../../../../assets/images/light-ceiling 1.svg";
 
../../../../assets/images/
 
../../../../assets/images/
 
../../../../assets/images/
 
../../../../assets/images/
 
../../../../assets/images/
 
../../../../assets/images/
 
../../../../assets/images/
 
../../../../assets/images/
 
../../../../assets/images/
 
../../../../assets/images/
 
../../../../assets/images/
 
../../../../assets/images/
 
../../../../assets/images/
 
../../../../assets/images/
 
from "../../../../assets/images/
 
../../../../assets/images/
 

import IndustryTable from "../TablesDataDecarbonation4";
 

    width: "950px",
 

        maxWidth: "100%",
 

    width: "950px",
 
 <Grid2
    sx={{
      flexDirection: "column",
      display: "flex",
      border: "1px solid #E4E4E4",
      borderRadius: "5px",
      borderTop: "3px solid #369D9C",
      gap: "20px",
    }}
  >
    <Paper
      sx={{
        display: "flex",
        flexDirection: "column",
        gap: "15px",
      }}
    >
 
<Grid2
    sx={{
      flexDirection: "column",
      display: "flex",
      border: "1px solid #E4E4E4",
      borderRadius: "5px",
      borderTop: "3px solid #369D9C",
      gap: "20px",
    }}
  >
 
  <Grid2
    sx={{
      flexDirection: "column",
      display: "flex",
      border: "1px solid #E4E4E4",
      borderRadius: "5px",
      borderTop: "3px solid #369D9C",
      gap: "20px",
    }}
  >
    <Paper
      sx={{
        display: "flex",
        flexDirection: "column",
        gap: "15px",
      }}
    >
 
 <Grid2
      sx={{
        flexDirection: "column",
        display: "flex",
        border: "1px solid #E4E4E4",
        borderRadius: "5px",
        borderTop: "3px solid #369D9C",
        gap: "20px",
      }}
    >
      <Paper
        sx={{
          display: "flex",
          flexDirection: "column",
          gap: "15px",
        }}
      >
 
 <Grid2
      sx={{
        flexDirection: "column",
        display: "flex",
        border: "1px solid #E4E4E4",
        borderRadius: "5px",
        borderTop: "3px solid #369D9C",
        gap: "20px",
      }}
    >
      <Paper
        sx={{
          display: "flex",
          flexDirection: "column",
          gap: "15px",
        }}
      >
 
TTubular daylighting devices
 
Skylights (Passive or Active)
 
imer control for operation at pre-set times
 
Control motion control devices, occupancy sensors (if relevant
                  to the project).
 
Daylight sensors (for precise switching and control of lights
                  based on daylight availability).
 
Switching external lighting (or specific circuits of the
                lighting system as per the project needs) by any of the
                following ways:
 

              Have you confirmed that the external lighting systems incorporate
              strategies to switch on/off based on specific needs or timings?
 

              Control of External lights
 
./DecarbonizationDiffUi/DecarbonizationQsnAnsDiffUi10
 

                Renewable energy system shall be utilized to generate power and cater to select loads of the development such as ventilation load, external security lighting loads, security lamps and any other lighting requirements specific to the project.
 

              Has the feasibility of a solar thermal hot water system been
              assessed, and has the potential reduction in CO2 emissions been
              estimated?
 

              Renewable Power Source - Industrial hot water
 
Has the feasibility of a solar thermal hot water system been
              assessed, and has the potential reduction in CO2 emissions been
              estimated?
 
Solar water heating (solar thermal) or solar photovoltaic
                  system with point of demand heaters shall be employed for
                  industrial hot water requirements. The solar hot water heating
                  system must incorporate measures for the efficient
                  distribution system, pipe insulation, and use of
                  energy-efficient electric hot water system (which is normally
                  used as backup).
 
style={{ }}
 
 marginRight: "10px"
 
   <Grid2
              sx={{
                border: "1px solid var(--Grey-3, #D9D9D9)",
                background: "#F7FFFC",
                borderRadius: "5px",
                padding: "10px 12px",
              }}
            >
              <Typography
                fontSize="14px" // Unified font size
                fontWeight="600" // Unified font weight
                sx={{
                  padding: "4px 0", // Reduced padding for closer alignment
                  marginBottom: "4px", // Reduced margin for closer alignment with list
                }}
              >
                1. Solar water heating (solar thermal) or solar photovoltaic system with point of demand heaters shall be employed for industrial hot water requirements.The solar hot water heating system must incorporate measures for the efficient distribution system, pipe insulation and use of energy-efficient electric hot         water system (which is normally used as backup).
              </Typography>
            </Grid2>
 
&nsp;
 
Switching external lighting (or specific circuits of the
                lighting system as per the project needs) by any of the
                following ways:
 

              <ul
                style={{
                  marginTop: "0px",
                  marginBottom: "0px",
                  paddingLeft: "18px",
                  fontSize: "14px",
                  fontWeight: "600",
                }}
              >
                <li>
                  Daylight sensors (for precise switching and control of lights
                  based on daylight availability).
                </li>
                <li>
                  Control motion control devices, occupancy sensors (if relevant
                  to the project).
                </li>
                <li>Timer control for operation at pre-set times.</li>
              </ul>
 
  Have you confirmed that the external lighting systems incorporate
              strategies to switch on/off based on specific needs or timings?
 
Control of External lights
 
 <Grid2
            sx={{
              borderTop: "1px solid #E4E4E4",
              mt: "8px",
              mb: "8px",
              ml: "0px",
              padding: "10px 19px",
              borderRadius: "5px",
            }}
          >
            <Grid2
              sx={{
                border: "1px solid var(--Grey-3, #D9D9D9)",
                background: "#F7FFFC",
                borderRadius: "5px",
                padding: "10px 12px",
              }}
            >
              <Typography
                fontSize="13px"
                fontWeight="600"
                sx={{ padding: "6px 0" }}
              >
                1. Switching external lighting (or specific circuits of the lighting system as per the project needs) by any of the following ways:
                <ul>
                  <li>Daylight sensors (for precise switching and control of lights based on daylight availability).</li>
                  <li>Control motion control devices, occupancy sensors (if relevant to the project).</li>
                  <li>Timer control for operation at pre-set times.</li>
                </ul>
              </Typography>
            </Grid2>
          </Grid2>
 

                // padding: "10px 12px",
 
Pedestrian pathway
 
Workshop area
 
Areas within the industry if relevant and appropriate
 

                  <li>Pantry</li>
 

                  <li>Prayer room.</li>
                  <li>Corridor / passage.</li>
                  <li>Ablution</li>
                  <li>Other areas if found suitable</li>
 

              <Typography
                fontSize="13px"
                fontWeight="600"
                sx={{ padding: "6px 0" }}
              >
                Exceptions: Process area / Machine area
              </Typography>
 
 <br />
                <br />
                The Occupancy sensors after due consideration shall be provided
                for the following areas within the facility
 
Installation of occupancy sensors/motion sensors for
                automated control of internal lighting.
 
Have you considered selecting internal lighting systems that offer
              flexible control options
 
Automated lighting control / motion sensor for internal lighting
 
./DecarbonizationDiffUi/DecarbonizationQsnAnsDiffUi10
 
import React from "react";
import {
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
  Paper,
} from "@mui/material";
import { styled } from "@mui/system";
import TableContainer from "@mui/material/TableContainer";

const StyledTable = styled(Table)({
  minWidth: 650,
  borderCollapse: "collapse",
});

const StyledTableCell = styled(TableCell)({
  border: "1px solid #ddd", // Border around the cell
  padding: "8px",
  textAlign: "center",
  fontSize: "14px",
  height: "20px",
  lineHeight: "2",
});
const StyledTableHeadCell = styled(TableCell)({
  background: "#F7FFFF",
  fontWeight: "bold",
  textAlign: "center",
  border: "1px solid var(--Grey-4, #F4F4F4)",
  height: "40px", // Set the height of the header cells
  lineHeight: "1px", // Align text vertically within the header cells
});

// Define styled components with specific widths
const StyledTableCellNarrow = styled(TableCell)(({ theme }) => ({
  width: "10%", // Adjusted width to 10% for the "S.No" and "Chiller Type"
  border: "1px solid #E4E4E4",
  textAlign: "center",
}));

const StyledTableCellWide = styled(TableCell)(({ theme }) => ({
  width: "20%", // Adjusted width to 20% for other columns
  border: "1px solid #E4E4E4",
  textAlign: "center",
}));

const StyledTableCellMedium = styled(TableCell)(({ theme }) => ({
  width: "30%", // Adjusted width to 30% for the "Chiller Type" description
  border: "1px solid #E4E4E4",
  textAlign: "left",
}));

const MyTable7 = () => {
  return (
    <TableContainer component={Paper}>
        <StyledTable aria-label="efficiency table">
          <TableHead>
            <TableRow>
              <StyledTableHeadCell rowSpan={2}>S.No</StyledTableHeadCell>
              <StyledTableHeadCell rowSpan={2}>Area / Zone</StyledTableHeadCell>
              <StyledTableHeadCell colSpan={3}>
              Light Power Density (LPD)
              </StyledTableHeadCell>
            </TableRow>
            <TableRow>
              <StyledTableHeadCell>w/ m2</StyledTableHeadCell>
            </TableRow>
          </TableHead>
          <TableBody>
            <TableRow>
              <StyledTableCell>1</StyledTableCell>
              <StyledTableCell sx={{textAlign:"left"}}>Canopies and overhangs</StyledTableCell>
              <StyledTableCell>5.0</StyledTableCell>
            </TableRow>
          </TableBody>
        </StyledTable>
      </TableContainer>

  );
};

export default MyTable7;

 
import React from "react";
import {
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
  Paper,
} from "@mui/material";
import { styled } from "@mui/system";
import TableContainer from "@mui/material/TableContainer";

const StyledTable = styled(Table)({
  minWidth: 650,
  borderCollapse: "collapse",
});

const StyledTableCell = styled(TableCell)({
  border: "1px solid #ddd", // Border around the cell
  padding: "8px",
  textAlign: "center",
  fontSize: "14px",
  height: "20px",
  lineHeight: "2",
});
const StyledTableHeadCell = styled(TableCell)({
  background: "#F7FFFF",
  fontWeight: "bold",
  textAlign: "center",
  border: "1px solid var(--Grey-4, #F4F4F4)",
  height: "40px", // Set the height of the header cells
  lineHeight: "1px", // Align text vertically within the header cells
});

// Define styled components with specific widths
const StyledTableCellNarrow = styled(TableCell)(({ theme }) => ({
  width: "10%", // Adjusted width to 10% for the "S.No" and "Chiller Type"
  border: "1px solid #E4E4E4",
  textAlign: "center",
}));

const StyledTableCellWide = styled(TableCell)(({ theme }) => ({
  width: "20%", // Adjusted width to 20% for other columns
  border: "1px solid #E4E4E4",
  textAlign: "center",
}));

const StyledTableCellMedium = styled(TableCell)(({ theme }) => ({
  width: "30%", // Adjusted width to 30% for the "Chiller Type" description
  border: "1px solid #E4E4E4",
  textAlign: "left",
}));

const MyTable7 = () => {
  return (
    <TableContainer component={Paper}>
        <StyledTable aria-label="efficiency table">
          <TableHead>
            <TableRow>
              <StyledTableHeadCell rowSpan={2}>S.No</StyledTableHeadCell>
              <StyledTableHeadCell rowSpan={2}>Area / Zone</StyledTableHeadCell>
              <StyledTableHeadCell colSpan={3}>
              Light Power Density (LPD)
              </StyledTableHeadCell>
            </TableRow>
            <TableRow>
              <StyledTableHeadCell>w/ m2</StyledTableHeadCell>
            </TableRow>
          </TableHead>
          <TableBody>
            <TableRow>
              <StyledTableCell>1</StyledTableCell>
              <StyledTableCell sx={{textAlign:"left"}}>Canopies and overhangs</StyledTableCell>
              <StyledTableCell>5.0</StyledTableCell>
            </TableRow>
          </TableBody>
        </StyledTable>
      </TableContainer>

  );
};

export default MyTable7;

 
&lt;150 TR
 
IPLV
 
 Minimum Efficiency
 
Capacities
 

              <StyledTableCell>&gt;2.803</StyledTableCell>
              <StyledTableCell>&gt;12.5</StyledTableCell>
 

              <StyledTableHeadCell>Full Load, EER</StyledTableHeadCell>
              <StyledTableHeadCell>Full Load, CoP</StyledTableHeadCell>
 

            <TableRow>
              <StyledTableCell>2</StyledTableCell>
              <StyledTableCell>&gt;150 TR</StyledTableCell>
              <StyledTableCell>&gt;9.562</StyledTableCell>
              <StyledTableCell>&gt;2.803</StyledTableCell>
              <StyledTableCell>&gt;12.5</StyledTableCell>
            </TableRow>
 

import Page
 

import { Pages } from "@mui/icons-material/Page";
 
../TablesDataDecarbonation7
 

impo styled fr
 
../TablesDataDecarbonation7
 
TablesDataDecarbonation7
 
<TableContainer>
            <Table>
                <TableHead>
                    <TableRow>
                    <TableCell>
                        1
                    </TableCell>
                    </TableRow>
                </TableHead>
            </Table>
            </TableContainer>
 
<Table
      sx={{
        borderCollapse: "collapse",
        border: "1px solid #F4F4F4",
        width: "100%",
      }}
    >
      <TableHead>
        <TableRow>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "left",
              fontWeight: 600,
              background: "#F7FFFC",
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            LPD (W/m2)
          </TableCell>
          <TableCell
            sx={{
              width: "30vh",
              background: "#F7FFFC",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Common Space Types
          </TableCell>
          <TableCell
            sx={{
              textAlign: "center",
              width: "30vh",
              fontWeight: 600,
              background: "#F7FFFC",
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Building Specific Space Types
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              background: "#F7FFFC",
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            LPD (W/m2)
          </TableCell>
        </TableRow>
      </TableHead>
      <TableBody>
        <TableRow>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            For Motion Picture Theater
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            13
          </TableCell>
          <TableCell
            // colSpan={2}
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Emergency
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            29
          </TableCell>
        </TableRow>
        <TableRow>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            For Transportation
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            5
          </TableCell>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Recovery
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            9
          </TableCell>
        </TableRow>
        <TableRow>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Atrium-First Three Floors
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            6
          </TableCell>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Nurse station
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            11
          </TableCell>
        </TableRow>
      </TableBody>
    </Table>
 
<Table
      sx={{
        borderCollapse: "collapse",
        border: "1px solid #F4F4F4",
        width: "100%",
      }}
    >
      <TableHead>
        <TableRow>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "left",
              fontWeight: 600,
              background: "#F7FFFC",
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            LPD (W/m2)
          </TableCell>
          <TableCell
            sx={{
              width: "30vh",
              background: "#F7FFFC",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Common Space Types
          </TableCell>
          <TableCell
            sx={{
              textAlign: "center",
              width: "30vh",
              fontWeight: 600,
              background: "#F7FFFC",
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Building Specific Space Types
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              background: "#F7FFFC",
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            LPD (W/m2)
          </TableCell>
        </TableRow>
      </TableHead>
      <TableBody>
        <TableRow>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            For Motion Picture Theater
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            13
          </TableCell>
          <TableCell
            // colSpan={2}
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Emergency
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            29
          </TableCell>
        </TableRow>
        <TableRow>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            For Transportation
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            5
          </TableCell>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Recovery
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            9
          </TableCell>
        </TableRow>
        <TableRow>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Atrium-First Three Floors
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            6
          </TableCell>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Nurse station
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            11
          </TableCell>
        </TableRow>
      </TableBody>
    </Table>
 
TableHead>
        <TableRow>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "left",
              fontWeight: 600,
              background: "#F7FFFC",
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            LPD (W/m2)
          </TableCell>
          <TableCell
            sx={{
              width: "30vh",
              background: "#F7FFFC",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Common Space Types
          </TableCell>
          <TableCell
            sx={{
              textAlign: "center",
              width: "30vh",
              fontWeight: 600,
              background: "#F7FFFC",
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Building Specific Space Types
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              background: "#F7FFFC",
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            LPD (W/m2)
          </TableCell>
        </TableRow>
      </TableHead>
      <TableBody>
        <TableRow>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            For Motion Picture Theater
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            13
          </TableCell>
          <TableCell
            // colSpan={2}
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Emergency
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            29
          </TableCell>
        </TableRow>
        <TableRow>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            For Transportation
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            5
          </TableCell>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Recovery
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            9
          </TableCell>
        </TableRow>
        <TableRow>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Atrium-First Three Floors
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            6
          </TableCell>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Nurse station
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            11
          </TableCell>
        </TableRow>
      </TableBody>
 
 <TableHead>
        <TableRow>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "left",
              fontWeight: 600,
              background: "#F7FFFC",
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            LPD (W/m2)
          </TableCell>
          <TableCell
            sx={{
              width: "30vh",
              background: "#F7FFFC",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Common Space Types
          </TableCell>
          <TableCell
            sx={{
              textAlign: "center",
              width: "30vh",
              fontWeight: 600,
              background: "#F7FFFC",
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Building Specific Space Types
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              background: "#F7FFFC",
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            LPD (W/m2)
          </TableCell>
        </TableRow>
      </TableHead>
      <TableBody>
        <TableRow>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            For Motion Picture Theater
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            13
          </TableCell>
          <TableCell
            // colSpan={2}
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Emergency
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            29
          </TableCell>
        </TableRow>
        <TableRow>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            For Transportation
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            5
          </TableCell>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Recovery
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            9
          </TableCell>
        </TableRow>
        <TableRow>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Atrium-First Three Floors
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            6
          </TableCell>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Nurse station
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            11
          </TableCell>
        </TableRow>
 

                        <TableCell sx={{borderBottom: "1px solid #E4E4E4"}}
                        </TableC>
 

            {/* <TablesDataDecarbonation7></TablesDataDecarbonation7> */}
 

import TablesData from "../../../../ReportsComponent/Pages/TablesData";
import TablesDataDecarbonation7 from '../TablesDataDecarbonation7'
 

            <TablesDataDecarbonation7></TablesDataDecarbonation7>
 
6
 
hello
 

              {/* <TablesDataDecarbonation3></TablesDataDecarbonation3> */}
              {/* <TablesDataDecarbonation5></TablesDataDecarbonation5> */}
 

              <TablesDataDecarbonation6></TablesDataDecarbonation6>
 

        <TableRow>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Atrium-Each Additional Floor
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            2
          </TableCell>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Exam/Treatment
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            16
          </TableCell>
        </TableRow>
        <TableRow>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Lounge / Recreation
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            19
          </TableCell>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Pharmacy
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            13
          </TableCell>
        </TableRow>
        <TableRow>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            For Hospital
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            9
          </TableCell>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Patient Room
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            8
          </TableCell>
        </TableRow>
        <TableRow>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Dining Area
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            10
          </TableCell>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Operating Room
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            24
          </TableCell>
        </TableRow>
        <TableRow>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            For Peniteniary
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            14
          </TableCell>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Nursery
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            6
          </TableCell>
        </TableRow>
        <TableRow>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            For Hotel
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            5
          </TableCell>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Medical Supply
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            15
          </TableCell>
        </TableRow>
        <TableRow>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            For Motel
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            13
          </TableCell>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Physical Therapy
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            10
          </TableCell>
        </TableRow>
        <TableRow>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            For Bar Lounge/Leisure Dining
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            15
          </TableCell>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Radiology
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            4
          </TableCell>
        </TableRow>

        <TableRow>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            For Family Dining
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            23
          </TableCell>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Laundry.Washing
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            6
          </TableCell>
        </TableRow>
        <TableRow>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Food Preperation
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            13
          </TableCell>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Laundry.Washing
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            8
          </TableCell>
        </TableRow>
        <TableRow>
          <TableCell
            sx={{
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Laboratory
          </TableCell>
          <TableCell
            sx={{
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            15
          </TableCell>
          <TableCell
            colSpan={2} // This makes the cell span across two columns
            sx={{
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Manufacturing
          </TableCell>
        </TableRow>
        <TableRow>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Restrooms
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            10
          </TableCell>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Low Bay(25 ft Floor to Ceiling Height)
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            13
          </TableCell>
        </TableRow>
        <TableRow>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Dressing /Locker/ Fitting Room
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            6
          </TableCell>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            High Bay(.25 ft floor to Ceiling Height)
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            18
          </TableCell>
        </TableRow>
        <TableRow>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Corridor/ Transition
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            5
          </TableCell>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Detailed Manufacturing
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            23
          </TableCell>
        </TableRow>
        <TableRow>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            For Hospital
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            11
          </TableCell>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Equipment Room
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            11
          </TableCell>
        </TableRow>
        <TableRow>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            For Manufacturing Facility
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            5
          </TableCell>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Control Room
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            5
          </TableCell>
        </TableRow>
        <TableRow>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Stairs - Active
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            6
          </TableCell>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Hotel / Motel Guest Rooms
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            12
          </TableCell>
        </TableRow>
        <TableRow>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Active Storage
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            9
          </TableCell>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Museum
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            12
          </TableCell>
        </TableRow>
        <TableRow>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            Inactive storage
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            3
          </TableCell>
          <TableCell
            sx={{
              width: "30vh",
              textAlign: "left",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            General Exhibition
          </TableCell>
          <TableCell
            sx={{
              width: "20vh",
              textAlign: "center",
              fontWeight: 600,
              fontSize: "12px",
              border: "1px solid #F4F4F4",
            }}
          >
            11
          </TableCell>
        </TableRow>
 
Installation of occupancy sensors/motion sensors for
                automated control of internal lighting.
 
 Have you considered selecting internal lighting systems that offer
              flexible control options
 
Automated lighting control / motion sensor for internal lighting
 
Have you considered selecting internal lighting systems that offer
              flexible control options
 
  <Typography
                fontSize="13px"
                fontWeight="600"
                sx={{ padding: "6px 0" }}
              >
                Exceptions: Process area / Machine area
              </Typography>
 
 <br />
                <br />
                The Occupancy sensors after due consideration shall be provided
                for the following areas within the facility
                <ul>
                  <li>Areas within the industry if relevant and appropriate</li>
                  <li>Workshop area</li>
                  <li>Pedestrian pathway</li>
                  <li>Pantry</li>
                  <li>Prayer room.</li>
                  <li>Corridor / passage.</li>
                  <li>Ablution</li>
                  <li>Other areas if found suitable</li>
                </ul>
 
  <br />
                <br />
                The Occupancy sensors after due consideration shall be provided
                for the following areas within the facility
                <ul>
                  <li>Areas within the industry if relevant and appropriate</li>
                  <li>Workshop area</li>
                  <li>Pedestrian pathway</li>
                  <li>Pantry</li>
                  <li>Prayer room.</li>
                  <li>Corridor / passage.</li>
                  <li>Ablution</li>
                  <li>Other areas if found suitable</li>
                </ul>
              </Typography>
              <Typography
                fontSize="13px"
                fontWeight="600"
                sx={{ padding: "6px 0" }}
              >
                Exceptions: Process area / Machine area
              </Typography>
 
./DecarbonizationDiffUi/DecarbonizationQsnAnsDiffUi7
 
These tests need to be conducted with the use of a blower door
                to measure the amount of leakage of an object. If required these
                tests can be extended to use the techniques such as thermography
                and smoke simulations to locate any excessive leakages. The air
                leakage is contained within a maximum of 10 m3/hr/m2 @ 50
                Pascal.
                <br />
                Estidama guideline prescribed in PBRS Version 1 or updated
                guideline.
 

                  Corridor / passage.
 

                  Corridor / passage.
 

                  Pantry
 

                  Pantry
 
Report the results and fill the leaks to ensure that the air
                    leakage does not exceed the prescribed limit.
 
Record the results on performance testing form
 
Perform the blower door test.
 
Make ready the building for the Pre blower door test.
 

                <br />
 
 Set up the blower door.
 
Implementation team / contractor is accountable for the
                following tasks:
 
Has the industrial facility/warehouse been assessed for envelope
              airtightness, and have <br /> measures been taken to identify and
              address any defects or leakages?
 
Envelope Tightness (Performance-based) Blower Door Test Technique
 
import React from "react";
import IndustryTable from "../TablesDataDecarbonation4";
import { Grid2, Paper, Typography, Box } from "@mui/material";
import handHolding from "../../../../../assets/images/hand-holding-seeding.svg";

function DecarbonizationQsnAnsDiffUi9() {
  return (
    <div>
      <Grid2
        sx={{
          flexDirection: "column",
          display: "flex",
          border: "1px solid #E4E4E4",
          borderRadius: "5px",
          borderTop: "3px solid #369D9C",
          gap: "20px",
        }}
      >
        <Paper
          sx={{
            display: "flex",
            flexDirection: "column",
            gap: "15px",
          }}
        >
          <Grid2
            sx={{
              display: "flex",
              flexDirection: "row",
              gap: "12px",
              mt: "16px",
              ml: "16px",
              alignItems: "center",
            }}
          >
            <img src={handHolding} alt="lg" />
            <Typography
              fontSize="16px"
              fontWeight="600"
              color="#000"
              width="600px"
            >
             Automated lighting control / motion sensor for internal lighting
            </Typography>
          </Grid2>
          <Grid2
            sx={{
              display: "flex",
              flexDirection: "row",
              alignItems: "center",
              gap: "12px",
              ml: "15px",
            }}
          >
            <Box
              sx={{
                width: "37px",
                height: "34px",
                backgroundColor: "#F7F7F7",
                padding: "7px",
                borderRadius: "6px",
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
              }}
            >
              <Typography color="#5B5B5B" fontSize="14px" fontWeight="400">
                Q.1
              </Typography>
            </Box>
            <Typography fontSize="14px" fontWeight="500" color="#000">
            Have you considered selecting internal lighting systems that offer flexible control options
            </Typography>
          </Grid2>

          <Grid2
            sx={{
              borderTop: "1px solid #E4E4E4",
              mt: "8px",
              ml: "0px",
              padding: "10px 19px",
              borderRadius: "5px",
              borderBottom: "1px solid #E4E4E4",
            }}
          >
            <Grid2
              sx={{
                border: "1px solid var(--Grey-3, #D9D9D9)",
                background: "#F7FFFC",
                borderRadius: "5px",
                padding: "1px 12px",
              }}
            >
              <Typography
                fontSize="13px"
                fontWeight="600"
                sx={{ padding: "6px 0" }}
              >
               1. Installation of occupancy sensors/motion sensors for automated control of internal lighting.
              </Typography>
              <Typography
                fontSize="13px"
                fontWeight="600"
                sx={{ padding: "6px 0" }}
              >
                
                <br />
              </Typography>
              <Typography
                fontSize="13px"
                fontWeight="600"
                sx={{ padding: "6px 0" }}
              >
                2. Availability of ERV systems for that capacity.
                <br />
              </Typography>
              <Typography
                fontSize="13px"
                fontWeight="600"
                sx={{ padding: "6px 0" }}
              >
                3. Assessment of the benefits.
                <br />
              </Typography>
            </Grid2>
          </Grid2>
        </Paper>
      </Grid2>
    </div>
  );
}

export default DecarbonizationQsnAnsDiffUi9;

 
1. Quantity of air extracted.
 
 Energy Recovery Systems (ERV) should be used in all combined
                supply & extract air handling units where applicable and found
                practical in terms of
                <br />
 
Have you considered incorporating design strategies to utilize
              Energy Recovery Units <br />
              (ERUs) in the plant?
 
 Installation of Energy Recovery Units and regulated air intake
              system
 
Decarboni
 
DecarbonizationQsnAnsWithUi5
 
useum
 
Active Storage
 
Hotel / Motel Guest Rooms
 
Stairs - Active
 
Control Room
 
For Manufacturing Facility
 
Equipment Room
 
For Hospital
 
Detailed Manufacturing 
 

          Corridor/ Transition
 
High Bay(.25 ft floor to Ceiling Height)
 

          Dressing /Locker/ Fitting Room
 
Low Bay(25 ft Floor to Ceiling Height)
 

          Restrooms
 
Laundry.Washing
 

          Food Preperation
 

              Gymnasium/Exercise Center
 

              Office - Enclosed
 

          Automative-Service Repair
 

          Food Preperation
 

          For Family Dining
 
Radiology
 

          For Bar Lounge/Leisure Dining
 
Physical Therapy
 

          For Motel
 
Medical Supply
 

          For Hotel
 
Recovery
 

          For Transportation
 

          Operating Room
 

          Dining Area
 

            Courthouse
 

            For Hotel
 

            Fire Stations
 

            For Performing Arts Theater
 

            Judges Chambers
 

            For Hotel
 

            Confinement Cells
 

            Lobby
 

            Courtroom
 

            For Penitentiary
 

          Atrium-First Three Floors
 

          For Transportation
 

            colSpan={2}
 

            Courthouse/Police Station/Penitentiary
 

            Classroom/Lecture/Training
 

            Gymnasium/Exercise Center
 

            Office - Enclosed
 

            Office - Enclosed
 

              backgroundColor: "#F7F7F7",
 

              textAlign: "left",
 

              textAlign: "center",
 

              textAlign: "center",
 

            Header 4
 

            Header 3
 

            Header 2
 

            Header 1
 
import React from "react";
import {
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
  Typography,
} from "@mui/material";

const MyTable6 = () => {
  return (
    <>
      <Table
        sx={{
          borderCollapse: "collapse",
          border: "1px solid #F4F4F4",
          width: "100%",
        }}
      >
      <TableHead>
  <TableRow>
    <TableCell
      sx={{
        width: "20vh",
        textAlign: "left",
        fontWeight: 600,
        fontSize: "12px",
        border: "1px solid #F4F4F4",
      }}
    >
      Header 1
    </TableCell>
    <TableCell
      sx={{
        width: "30vh",
        textAlign: "center",
        fontWeight: 600,
        fontSize: "12px",
        border: "1px solid #F4F4F4",
      }}
    >
      Header 2
    </TableCell>
    <TableCell
      sx={{
        width: "30vh",
        textAlign: "left",
        fontWeight: 600,
        fontSize: "12px",
        border: "1px solid #F4F4F4",
      }}
    >
      Header 3
    </TableCell>
    <TableCell
      sx={{
        width: "20vh",
        textAlign: "center",
        fontWeight: 600,
        fontSize: "12px",
        border: "1px solid #F4F4F4",
      }}
    >
      Header 4
    </TableCell>
  </TableRow>
</TableHead>

        <TableBody><TableRow>
    <TableCell
      sx={{
        width: "30vh",
        textAlign: "left",
        fontWeight: 600,
        fontSize: "12px",
        border: "1px solid #F4F4F4",
      }}
    >
      Office - Enclosed
    </TableCell>
    <TableCell
      sx={{
        width: "30vh",
        textAlign: "center",
        fontWeight: 600,
        fontSize: "12px",
        border: "1px solid #F4F4F4",
      }}
    >
      12
    </TableCell>
    <TableCell
      colSpan={2}
      sx={{
        width: "30vh",
        textAlign: "left",
        fontWeight: 600,
        fontSize: "12px",
        border: "1px solid #F4F4F4",
      }}
    >
      Gymnasium/Exercise Center
    </TableCell>
  </TableRow>
          <TableRow>
            <TableCell
              sx={{
                textAlign: "left",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              Classroom/Lecture/Training
            </TableCell>
            <TableCell
              sx={{
                textAlign: "center",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              15
            </TableCell>
            <TableCell
              sx={{
                textAlign: "left",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              Courthouse/Police Station/Penitentiary
            </TableCell>
            <TableCell
              sx={{
                textAlign: "center",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            ></TableCell>
          </TableRow>
          <TableRow>
            <TableCell
              sx={{
                textAlign: "left",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              For Penitentiary
            </TableCell>
            <TableCell
              sx={{
                textAlign: "center",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              14
            </TableCell>
            <TableCell
              sx={{
                textAlign: "left",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              Courtroom
            </TableCell>
            <TableCell
              sx={{
                textAlign: "center",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              20
            </TableCell>
          </TableRow>
          <TableRow>
            <TableCell
              sx={{
                textAlign: "left",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              Lobby
            </TableCell>
            <TableCell
              sx={{
                textAlign: "center",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              14
            </TableCell>
            <TableCell
              sx={{
                textAlign: "left",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              Confinement Cells
            </TableCell>
            <TableCell
              sx={{
                textAlign: "center",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              10
            </TableCell>
          </TableRow>
          <TableRow>
            <TableCell
              sx={{
                textAlign: "left",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              For Hotel
            </TableCell>
            <TableCell
              sx={{
                textAlign: "center",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              12
            </TableCell>
            <TableCell
              sx={{
                textAlign: "left",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              Judges Chambers
            </TableCell>
            <TableCell
              sx={{
                textAlign: "center",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              14
            </TableCell>
          </TableRow>
          <TableRow>
            <TableCell
              sx={{
                textAlign: "left",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              For Performing Arts Theater
            </TableCell>
            <TableCell
              sx={{
                textAlign: "center",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              36
            </TableCell>
            <TableCell
              sx={{
                textAlign: "left",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              Fire Stations
            </TableCell>
            <TableCell
              sx={{
                textAlign: "center",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            ></TableCell>
          </TableRow>
          <TableRow>
            <TableCell
              sx={{
                textAlign: "left",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              For Motion Picture Theater
            </TableCell>
            <TableCell
              sx={{
                textAlign: "center",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              12
            </TableCell>
            <TableCell
              sx={{
                textAlign: "left",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              Fire Station Engine room
            </TableCell>
            <TableCell
              sx={{
                textAlign: "center",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              9
            </TableCell>
          </TableRow>
          <TableRow>
            <TableCell
              sx={{
                textAlign: "left",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              Audience/Scaling Area
            </TableCell>
            <TableCell
              sx={{
                textAlign: "center",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              12
            </TableCell>
            <TableCell
              sx={{
                textAlign: "left",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              Sleeping Quarters
            </TableCell>
            <TableCell
              sx={{
                textAlign: "center",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              3
            </TableCell>
          </TableRow>
          <TableRow>
            <TableCell
              sx={{
                textAlign: "left",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              For Gymnasium
            </TableCell>
            <TableCell
              sx={{
                textAlign: "center",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              4
            </TableCell>
            <TableCell
              sx={{
                textAlign: "left",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              Post Office - Sorting Area
            </TableCell>
            <TableCell
              sx={{
                textAlign: "center",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              13
            </TableCell>
          </TableRow>
          <TableRow>
            <TableCell
              sx={{
                textAlign: "left",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              For Exercise Center
            </TableCell>
            <TableCell
              sx={{
                textAlign: "center",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              3
            </TableCell>
            <TableCell
              sx={{
                textAlign: "left",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              Convention Center-Exhibit Space
            </TableCell>
            <TableCell
              sx={{
                textAlign: "center",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              14
            </TableCell>
          </TableRow>
          <TableRow>
            <TableCell
              sx={{
                textAlign: "left",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              For Convention Center
            </TableCell>
            <TableCell
              sx={{
                textAlign: "center",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              6
            </TableCell>
            <TableCell
              sx={{
                textAlign: "left",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              Library
            </TableCell>
            <TableCell
              sx={{
                textAlign: "center",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            ></TableCell>
          </TableRow>
          <TableRow>
            <TableCell
              sx={{
                textAlign: "left",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              For Penitentiary
            </TableCell>
            <TableCell
              sx={{
                textAlign: "center",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              8
            </TableCell>
            <TableCell
              sx={{
                textAlign: "left",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              Card File Cataloguing
            </TableCell>
            <TableCell
              sx={{
                textAlign: "center",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              12
            </TableCell>
          </TableRow>
          <TableRow>
            <TableCell
              sx={{
                textAlign: "left",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              For Religious Buildings
            </TableCell>
            <TableCell
              sx={{
                textAlign: "center",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              18
            </TableCell>
            <TableCell
              sx={{
                textAlign: "left",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              Stacks
            </TableCell>
            <TableCell
              sx={{
                textAlign: "center",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              4
            </TableCell>
          </TableRow>
          <TableRow>
            <TableCell
              sx={{
                textAlign: "left",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              For Sports Arena
            </TableCell>
            <TableCell
              sx={{
                textAlign: "center",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              4
            </TableCell>
            <TableCell
              sx={{
                textAlign: "left",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              Reading Area
            </TableCell>
            <TableCell
              sx={{
                textAlign: "center",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              13
            </TableCell>
          </TableRow>
          <TableRow>
            <TableCell
              sx={{
                textAlign: "left",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              For Performing Arts Theater
            </TableCell>
            <TableCell
              sx={{
                textAlign: "center",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              28
            </TableCell>
            <TableCell
              sx={{
                textAlign: "left",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              Hospital
            </TableCell>
            <TableCell
              sx={{
                textAlign: "center",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              13
            </TableCell>
          </TableRow>
        </TableBody>
      </Table>
    </>
  );
};

export default MyTable6;

 

          <TableRow>
            <TableCell
              sx={{
                textAlign: "left",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              Office - Enclosed
            </TableCell>
            <TableCell
              sx={{
                textAlign: "center",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              12
            </TableCell>
            <TableCell
              colSpan={2} // This makes the cell span across two columns
              sx={{
                textAlign: "left",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              Gymnasium/Exercise Center
            </TableCell>
          </TableRow>

          <TableRow>
            <TableCell
              sx={{
                textAlign: "left",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              Office -Open Plan
            </TableCell>
            <TableCell
              sx={{
                textAlign: "center",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              12
            </TableCell>
            <TableCell
              sx={{
                textAlign: "left",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              Exercise Area
            </TableCell>
            <TableCell
              sx={{
                textAlign: "center",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              10
            </TableCell>
          </TableRow>
          <TableRow>
            <TableCell
              sx={{
                textAlign: "left",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              Conference/Meeting/Multipurpose
            </TableCell>
            <TableCell
              sx={{
                textAlign: "center",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              14
            </TableCell>
            <TableCell
              sx={{
                textAlign: "left",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              Exercise Area
            </TableCell>
            <TableCell
              sx={{
                textAlign: "center",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            ></TableCell>
          </TableRow>
 

        <TableHead>
          <TableRow sx={{ background: "#F7FFFC" }}>
            <TableCell
              sx={{
                // textAlign: "left",
                fontSize: "14px",
                fontWeight: "600",
                border: "1px solid #F4F4F4",
                width:"20vw"
              }}
            >
              LPD (W/m2)
            </TableCell>
            <TableCell
              sx={{
                // textAlign: "center",
                fontSize: "14px",
                fontWeight: "600",
                border: "1px solid #F4F4F4",
              }}
            >
             Common Space Types
            </TableCell>
            <TableCell
              sx={{
                // textAlign: "center",
                fontSize: "14px",
                fontWeight: "600",
                border: "1px solid #F4F4F4",
              }}
            >
            Building Specific Space Types
            </TableCell>
            <TableCell
              sx={{
                // textAlign: "center",
                fontSize: "14px",
                fontWeight: "600",
                border: "1px solid #F4F4F4",
              }}
            >
            LPD (W/m2)
            </TableCell>
          </TableRow>
        </TableHead>
 

              LPD (W/m²)
 

              Building Specific Space Types
 
 LPD (W/m²)
 
Common Space Types
 

                m:"10px",
 

                textAlign: "left",
 

                ml:"20px",
 

      <Typography fontSize="12px" fontWeight="600" mb="15px">
        Internal Lighting - Space by Space Method
      </Typography>
 
./DecarbonizationQsnAnsDiffUi6
 
 
 
MyTable
 

              borderBottom: "1px solid #E4E4E4",
 
 <TableRow>
            <TableCell
              sx={{
                textAlign: "left",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              Office -Enclosed
            </TableCell>
            <TableCell
              sx={{
                textAlign: "center",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            >
              12
            </TableCell>
            <TableCell
              sx={{
                textAlign: "left",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
              
            >
              Gymnasium/Exercise Center
            </TableCell>
            <TableCell
              sx={{
                textAlign: "center",
                fontWeight: 600,
                fontSize: "12px",
                border: "1px solid #F4F4F4",
              }}
            ></TableCell>
          </TableRow>
 

                borderRight:"-0px solid black"
 

                border: "1px solid #F4F4F4",
 
import React from "react";
import {
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
  Typography,
} from "@mui/material";

const MyTable = () => {
  return (
    <>
      <Typography fontSize="12px" fontWeight="600" mb="15px">
        Internal Lightning - Space by Space Method
      </Typography>
      <Table>
        <TableHead>
          <TableRow sx={{ background: "#F7FFFC" }}>
            <TableCell
              sx={{ textAlign: "center", fontSize: "14px", fontWeight: "600" }}
            >
              Common Space Types
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontSize: "14px", fontWeight: "600" }}
            >
              LPD (W/m²)
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontSize: "14px", fontWeight: "600" }}
            >
              Building Specific Space Types
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontSize: "14px", fontWeight: "600" }}
            >
              LPD (W/m²)
            </TableCell>
          </TableRow>
        </TableHead>
        <TableBody>
          <TableRow>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              Office -Enclosed
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              12
            </TableCell>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              Gymnassium/Exercise Center
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            ></TableCell>
          </TableRow>
          <TableRow>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              Office -Open Plan
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              12
            </TableCell>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              Exercise Area
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              10
            </TableCell>
          </TableRow>
          <TableRow>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              Conference/Meeting/Multipurpose
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              14
            </TableCell>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              Exercise Area
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            ></TableCell>
          </TableRow>
          <TableRow>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              Classroom/Lecture/Training
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              15
            </TableCell>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              Courthouse/Police Station/Penitentiary
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            ></TableCell>
          </TableRow>
          <TableRow>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              For Penitentiary
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              14
            </TableCell>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              Courtroom
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              20
            </TableCell>
          </TableRow>
          <TableRow>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              Lobby
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              14
            </TableCell>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              Confinement Cells
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              10
            </TableCell>
          </TableRow>
          <TableRow>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              For Hotel
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              12
            </TableCell>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              Judges Chambers
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              14
            </TableCell>
          </TableRow>
          <TableRow>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              For Performing Arts Theater
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              36
            </TableCell>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              Fire Stations
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            ></TableCell>
          </TableRow>
          <TableRow>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              For Motion Picture Theater
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              12
            </TableCell>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              Fire Station Engine room
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              9
            </TableCell>
          </TableRow>
          <TableRow>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              Audience/Scaling Area
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              12
            </TableCell>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              Sleeping Quarters
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              3
            </TableCell>
          </TableRow>
          <TableRow>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              For Gymnasium
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              4
            </TableCell>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              Post Office - Sorting Area
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              13
            </TableCell>
          </TableRow>
          <TableRow>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              For Exercise Center
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              3
            </TableCell>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              Convention Center-Exhibit Space
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              14
            </TableCell>
          </TableRow>
          <TableRow>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              For Convention Center
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              6
            </TableCell>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              Library
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            ></TableCell>
          </TableRow>
          <TableRow>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              For Penitentiary
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              8
            </TableCell>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              Card File Cataloguing
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              12
            </TableCell>
          </TableRow>
          <TableRow>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              For Religious Buildings
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              18
            </TableCell>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              Stacks
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              4
            </TableCell>
          </TableRow>
          <TableRow>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              For Sports Arena
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              4
            </TableCell>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              Reading Area
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              13
            </TableCell>
          </TableRow>
          <TableRow>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              For Performing Arts Theater
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              28
            </TableCell>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              Hospital
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              13
            </TableCell>
          </TableRow>
        </TableBody>
      </Table>
    </>
  );
};

export default MyTable;

 
import React from "react";
import {
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
  Typography,
} from "@mui/material";

const MyTable = () => {
  return (
    <>
      <Typography fontSize="12px" fontWeight="600" mb="15px">
        Internal Lightning - Space by Space Method
      </Typography>
      <Table>
        <TableHead>
          <TableRow sx={{ background: "#F7FFFC" }}>
            <TableCell
              sx={{ textAlign: "center", fontSize: "14px", fontWeight: "600" }}
            >
              Common Space Types
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontSize: "14px", fontWeight: "600" }}
            >
              LPD (W/m²)
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontSize: "14px", fontWeight: "600" }}
            >
              Building Specific Space Types
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontSize: "14px", fontWeight: "600" }}
            >
              LPD (W/m²)
            </TableCell>
          </TableRow>
        </TableHead>
        <TableBody>
          <TableRow>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              Office -Enclosed
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              12
            </TableCell>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              Gymnassium/Exercise Center
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            ></TableCell>
          </TableRow>
          <TableRow>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              Office -Open Plan
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              12
            </TableCell>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              Exercise Area
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              10
            </TableCell>
          </TableRow>
          <TableRow>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              Conference/Meeting/Multipurpose
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              14
            </TableCell>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              Exercise Area
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            ></TableCell>
          </TableRow>
          <TableRow>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              Classroom/Lecture/Training
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              15
            </TableCell>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              Courthouse/Police Station/Penitentiary
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            ></TableCell>
          </TableRow>
          <TableRow>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              For Penitentiary
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              14
            </TableCell>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              Courtroom
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              20
            </TableCell>
          </TableRow>
          <TableRow>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              Lobby
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              14
            </TableCell>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              Confinement Cells
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              10
            </TableCell>
          </TableRow>
          <TableRow>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              For Hotel
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              12
            </TableCell>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              Judges Chambers
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              14
            </TableCell>
          </TableRow>
          <TableRow>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              For Performing Arts Theater
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              36
            </TableCell>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              Fire Stations
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            ></TableCell>
          </TableRow>
          <TableRow>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              For Motion Picture Theater
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              12
            </TableCell>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              Fire Station Engine room
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              9
            </TableCell>
          </TableRow>
          <TableRow>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              Audience/Scaling Area
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              12
            </TableCell>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              Sleeping Quarters
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              3
            </TableCell>
          </TableRow>
          <TableRow>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              For Gymnasium
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              4
            </TableCell>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              Post Office - Sorting Area
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              13
            </TableCell>
          </TableRow>
          <TableRow>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              For Exercise Center
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              3
            </TableCell>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              Convention Center-Exhibit Space
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              14
            </TableCell>
          </TableRow>
          <TableRow>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              For Convention Center
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              6
            </TableCell>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              Library
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            ></TableCell>
          </TableRow>
          <TableRow>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              For Penitentiary
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              8
            </TableCell>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              Card File Cataloguing
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              12
            </TableCell>
          </TableRow>
          <TableRow>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              For Religious Buildings
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              18
            </TableCell>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              Stacks
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              4
            </TableCell>
          </TableRow>
          <TableRow>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              For Sports Arena
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              4
            </TableCell>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              Reading Area
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              13
            </TableCell>
          </TableRow>
          <TableRow>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              For Performing Arts Theater
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              28
            </TableCell>
            <TableCell
              sx={{ textAlign: "left", fontWeight: 600, fontSize: "12px" }}
            >
              Hospital
            </TableCell>
            <TableCell
              sx={{ textAlign: "center", fontWeight: 600, fontSize: "12px" }}
            >
              13
            </TableCell>
          </TableRow>
        </TableBody>
      </Table>
    </>
  );
};

export default MyTable;

 
  <TableBody>
        <TableRow>
          <TableCell sx={{ textAlign: "left" }}>Office -Enclosed</TableCell>
          <TableCell sx={{ textAlign: "center" }}>12</TableCell>
          <TableCell sx={{ textAlign: "left" }}>Gymnassium/Excercise Center</TableCell>
          <TableCell sx={{ textAlign: "center" }}></TableCell>
        </TableRow>
        <TableRow>
          <TableCell sx={{ textAlign: "left" }}>Office -Open Plan</TableCell>
          <TableCell sx={{ textAlign: "center" }}>12</TableCell>
          <TableCell sx={{ textAlign: "left" }}>Excercise Area</TableCell>
          <TableCell sx={{ textAlign: "center" }}>10</TableCell>
        </TableRow>
        <TableRow>
          <TableCell sx={{ textAlign: "left" }}>Conferance/Meeting/Multipurpose</TableCell>
          <TableCell sx={{ textAlign: "center" }}>14</TableCell>
          <TableCell sx={{ textAlign: "left" }}>Excercise Area</TableCell>
          <TableCell sx={{ textAlign: "center" }}></TableCell>
        </TableRow>
        <TableRow>
          <TableCell sx={{ textAlign: "left" }}>Classroom/Lecture/Training</TableCell>
          <TableCell sx={{ textAlign: "center" }}>15</TableCell>
          <TableCell sx={{ textAlign: "left" }}>Courthhouse/Police Station/Penitentiary</TableCell>
          <TableCell sx={{ textAlign: "center" }}></TableCell>
        </TableRow>
        <TableRow>
          <TableCell sx={{ textAlign: "left" }}>For Penitentiary</TableCell>
          <TableCell sx={{ textAlign: "center" }}>14</TableCell>
          <TableCell sx={{ textAlign: "left" }}>Courtroom</TableCell>
          <TableCell sx={{ textAlign: "center" }}>20</TableCell>
        </TableRow>
        <TableRow>
          <TableCell sx={{ textAlign: "left" }}>Lobby</TableCell>
          <TableCell sx={{ textAlign: "center" }}>14</TableCell>
          <TableCell sx={{ textAlign: "left" }}>Confinement Cells</TableCell>
          <TableCell sx={{ textAlign: "center" }}>10</TableCell>
        </TableRow>
        <TableRow>
          <TableCell sx={{ textAlign: "left" }}>For Hotel</TableCell>
          <TableCell sx={{ textAlign: "center" }}>12</TableCell>
          <TableCell sx={{ textAlign: "left" }}>Judges Chambers</TableCell>
          <TableCell sx={{ textAlign: "center" }}>14</TableCell>
        </TableRow>
        <TableRow>
          <TableCell sx={{ textAlign: "left" }}>For Performing Arts Theater</TableCell>
          <TableCell sx={{ textAlign: "center" }}>36</TableCell>
          <TableCell sx={{ textAlign: "left" }}>Fire Stations</TableCell>
          <TableCell sx={{ textAlign: "center" }}></TableCell>
        </TableRow>
        <TableRow>
          <TableCell sx={{ textAlign: "left" }}>For Motion Picture Theater</TableCell>
          <TableCell sx={{ textAlign: "center" }}>12</TableCell>
          <TableCell sx={{ textAlign: "left" }}>Fire Station Engine room</TableCell>
          <TableCell sx={{ textAlign: "center" }}>9</TableCell>
        </TableRow>
        <TableRow>
          <TableCell sx={{ textAlign: "left" }}>Audience/Scaling Area</TableCell>
          <TableCell sx={{ textAlign: "center" }}>12</TableCell>
          <TableCell sx={{ textAlign: "left" }}>Sleeping Quarters</TableCell>
          <TableCell sx={{ textAlign: "center" }}>3</TableCell>
        </TableRow>
        <TableRow>
          <TableCell sx={{ textAlign: "left" }}>For Gymnasium</TableCell>
          <TableCell sx={{ textAlign: "center" }}>4</TableCell>
          <TableCell sx={{ textAlign: "left" }}>Post Office - Sorting Area</TableCell>
          <TableCell sx={{ textAlign: "center" }}>13</TableCell>
        </TableRow>
        <TableRow>
          <TableCell sx={{ textAlign: "left" }}>For Exercise Center</TableCell>
          <TableCell sx={{ textAlign: "center" }}>3</TableCell>
          <TableCell sx={{ textAlign: "left" }}>Convention Center-Exhibit Space</TableCell>
          <TableCell sx={{ textAlign: "center" }}>14</TableCell>
        </TableRow>
        <TableRow>
          <TableCell sx={{ textAlign: "left" }}>For Convention Center</TableCell>
          <TableCell sx={{ textAlign: "center" }}>6</TableCell>
          <TableCell sx={{ textAlign: "left" }}>Library</TableCell>
          <TableCell sx={{ textAlign: "center" }}></TableCell>
        </TableRow>
        <TableRow>
          <TableCell sx={{ textAlign: "left" }}>For Penitentiary</TableCell>
          <TableCell sx={{ textAlign: "center" }}>8</TableCell>
          <TableCell sx={{ textAlign: "left" }}>Card File Cataloguing</TableCell>
          <TableCell sx={{ textAlign: "center" }}>12</TableCell>
        </TableRow>
        <TableRow>
          <TableCell sx={{ textAlign: "left" }}>For Religious Buildings</TableCell>
          <TableCell sx={{ textAlign: "center" }}>18</TableCell>
          <TableCell sx={{ textAlign: "left" }}>Stacks</TableCell>
          <TableCell sx={{ textAlign: "center" }}>4</TableCell>
        </TableRow>
        <TableRow>
          <TableCell sx={{ textAlign: "left" }}>For Sports Arena</TableCell>
          <TableCell sx={{ textAlign: "center" }}>4</TableCell>
          <TableCell sx={{ textAlign: "left" }}>Reading Area</TableCell>
          <TableCell sx={{ textAlign: "center" }}>13</TableCell>
        </TableRow>
        <TableRow>
          <TableCell sx={{ textAlign: "left" }}>For Performing Arts Theater</TableCell>
          <TableCell sx={{ textAlign: "center" }}>28</TableCell>
          <TableCell sx={{ textAlign: "left" }}>Hospital</TableCell>
          <TableCell sx={{ textAlign: "center" }}>13</TableCell>
        </TableRow>
      </TableBody>
 
sx={{mt:}}
 
mt="10px"
 
var(--grad-3, linear-gradient(102deg, #369D9C 0%, #28814D 100%));
 
For Religious Buildings
 
<
 

          <TableCell sx={{ textAlign: "center" }}>4</TableCell>
 

  height: "40px", // Set the height of the header cells
  lineHeight: "1px", // Align text vertically within the header cells
 
StyledTableHeadCell
 
TableCell
 
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
} from "@mui/material";
import React from "react";

const StyledTable = styled(Table)({
  minWidth: 650,
  borderCollapse: "collapse",
});

const StyledTableCell = styled(TableCell)({
  border: "1px solid #ddd", // Border around the cell
  padding: "8px",
  textAlign: "center",
  fontSize: "14px",
  height: "20px",
  lineHeight: "2",
});
const StyledTableHeadCell = styled(TableCell)({
  background: "#F7FFFF",
  fontWeight: "bold",
  textAlign: "center",
  border: "1px solid var(--Grey-4, #F4F4F4)",
  height: "40px", // Set the height of the header cells
  lineHeight: "1px", // Align text vertically within the header cells
});

// Define styled components with specific widths
const StyledTableCellNarrow = styled(TableCell)(({ theme }) => ({
  width: "10%", // Adjusted width to 10% for the "S.No" and "Chiller Type"
  border: "1px solid #E4E4E4",
  textAlign: "center",
}));

const StyledTableCellWide = styled(TableCell)(({ theme }) => ({
  width: "20%", // Adjusted width to 20% for other columns
  border: "1px solid #E4E4E4",
  textAlign: "center",
}));

const StyledTableCellMedium = styled(TableCell)(({ theme }) => ({
  width: "30%", // Adjusted width to 30% for the "Chiller Type" description
  border: "1px solid #E4E4E4",
  textAlign: "left",
}));

function TablesDataDecarbonation5() {
  return (
    <div>
      <TableContainer>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell sx={{ textAlign: "center" }}>
                Common Space Types
              </TableCell>
              <TableCell sx={{ textAlign: "center" }}>LPD (W/m2)</TableCell>
              <TableCell sx={{ textAlign: "center" }}>
                Building Specific Space Types
              </TableCell>
              <TableCell sx={{ textAlign: "center" }}>LPD (W/m2)</TableCell>
            </TableRow>
            <TableBody>
             <TableRow>
              <StyledTableCellNarrow>hello</StyledTableCellNarrow>
             </TableRow>
            </TableBody>
          </TableHead>
        </Table>
      </TableContainer>
    </div>
  );
}

export default TablesDataDecarbonation5;

 
 <TableRow>
                <StyledTableCell>1</StyledTableCell>
                <StyledTableCell>&lt;150 TR</StyledTableCell>
                <StyledTableCell>&gt;9.562</StyledTableCell>
                <StyledTableCell>&gt;2.803</StyledTableCell>
                <StyledTableCell>&gt;12.5</StyledTableCell>
              </TableRow>
              <TableRow>
                <StyledTableCell>2</StyledTableCell>
                <StyledTableCell>&gt;150 TR</StyledTableCell>
                <StyledTableCell>&gt;9.562</StyledTableCell>
                <StyledTableCell>&gt;2.803</StyledTableCell>
                <StyledTableCell>&gt;12.5</StyledTableCell>
              </TableRow>
 
sx={{textAlign:"center"}}
 

                    Common Space Types
 

                    Common Space Types
 

                    Common Space Types
 

                    Common Space Types
 

import TablesDataDecarbonation3 from "../TablesDataDecarbonation3";
 

        width:"1000px"
 

        <DecarbonizationQsnAnsWithUi8></DecarbonizationQsnAnsWithUi8>
 

        <DecarbonizationQsnAnsWithUi8></DecarbonizationQsnAnsWithUi8>
 
DecarbonizationQsnAnsDiffWIthUi6
 
Energy Recovery Systems (ERV) should be used in all combined
                supply & extract air handling units where applicable and found
                practical in terms of
 

              <Typography
                fontSize="13px"
                fontWeight="600"
                sx={{ padding: "6px 0" }}
              >
                1. Quantity of air extracted.
                <br />
              </Typography>
              <Typography
                fontSize="13px"
                fontWeight="600"
                sx={{ padding: "6px 0" }}
              >
                2. Availability of ERV systems for that capacity.
                <br />
              </Typography>
              <Typography
                fontSize="13px"
                fontWeight="600"
                sx={{ padding: "6px 0" }}
              >
                3. Assessment of the benefits.
                <br />
              </Typography>
 
DecarbonizationQsnAnsWithUi5
 
../TablesDataDecarbonation
 

      <h2 style={{ fontSize: "16px", fontWeight: "400", color: "#000000" }}>
        Air Cooled Chillers
      </h2>
 

      <h2
        style={{
          fontSize: "16px",
          fontWeight: "400",
          color: "#000000",
          marginTop: "30px",
        }}
      >
        Water Cooled Chillers
      </h2>
 
./../../../ReportsComponent/Pages/TablesData
 
./DecarbonizationDiffUi/DecarbonizationQsnAnsWithUi3
 

      hello
 
import React from "react";
import { Box, Grid2, Paper, Typography, Button } from "@mui/material";
import magelightBuld from "../../../../assets/images/mage_light-bulb.svg";
import BasicTable from "./TablesDataDecarbonation";
import BasicTable2 from "./TablesDataDecarbonation2";
import DecarbonizationQsnAnsWithUl from "./DecarbonizationDiffUi/DecarbonizationQsnAnsWithUl";
import DecarbonizationQsnAnsWithUl2 from "./DecarbonizationDiffUi/DecarbonizationQsnAnsWithUi2";
import DecarbonizationQsnAnsWithUi3 from "./DecarbonizationDiffUi/";
import DecarbonizationQsnAnsWithUi4 from "./DecarbonizationDiffUi/DecarbonizationQsnAnsDiffUi4";
import DecarbonizationQsnAnsWithUi5 from "./DecarbonizationDiffUi/DecarbonizationQsnAnsDiffUi5";
import DecarbonizationQsnAnsWithUi6 from "./DecarbonizationDiffUi/DecarbonizationQsnAnsDiffUi6";


const TableComponents = {
  "Industrial Chiller System": BasicTable,
  "Refrigerated Storage Area": BasicTable2,
};

const Question = ({
  questionText,
  logo,
  heading,
  answers,
  showTable,
  boldAnswerIndex,
}) => {
  const TableComponent = TableComponents[heading];

  return (
    <Grid2
      sx={{
        flexDirection: "column",
        display: "flex",
        border: "1px solid #E4E4E4",
        borderRadius: "5px",
        borderTop: "3px solid #369D9C",
        gap: "20px",
      }}
    >
      <Paper
        sx={{
          display: "flex",
          flexDirection: "column",
          gap: "15px",
        }}
      >
        {/* Heading Section */}
        <Grid2
          sx={{
            display: "flex",
            flexDirection: "row",
            gap: "12px",
            mt: "16px",
            ml: "16px",
            alignItems: "center",
          }}
        >
          {logo && <img src={logo} alt="logo" width="18px" />}
          <Typography fontSize="16px" fontWeight="600" color="#000">
            {heading}
          </Typography>
        </Grid2>

        {questionText.map((q, questionIndex) => (
          <React.Fragment key={questionIndex}>
            {/* Question Text */}
            <Grid2
              sx={{
                display: "flex",
                flexDirection: "row",
                alignItems: "center",
                gap: "12px",
                ml: "15px",
              }}
            >
              <Box
                sx={{
                  width: "37px",
                  height: "34px",
                  backgroundColor: "#F7F7F7",
                  padding: "7px",
                  borderRadius: "6px",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                }}
              >
                <Typography color="#5B5B5B" fontSize="14px" fontWeight="400">
                  Q.{questionIndex + 1}
                </Typography>
              </Box>
              <Typography fontSize="14px" fontWeight="500" color="#000">
                {q}
              </Typography>
            </Grid2>

            {/* Answers or Implementation Required */}
            <Grid2
              sx={{
                borderTop: "1px solid #E4E4E4",
                mt: "8px",
                mb: "8px",
                ml: "0px",
                padding: "10px 19px",
                borderRadius: "5px",
              }}
            >
              {answers[questionIndex]?.length > 0 ? (
                // Display Answers
                <Grid2
                  sx={{
                    border: "1px solid var(--Grey-3, #D9D9D9)",
                    background: "#F7FFFC",
                    borderRadius: "5px",
                    padding: "1px 12px",
                  }}
                >
                  {answers[questionIndex].map((answer, answerIndex) => (
                    <Typography
                      key={answerIndex}
                      fontSize="12px"
                      fontWeight={
                        boldAnswerIndex === questionIndex ||
                        boldAnswerIndex >= answers[questionIndex].length
                          ? "700" // Apply bold if boldAnswerIndex matches or exceeds total answers
                          : "500"
                      }
                      color="#000"
                      sx={{ padding: "6px 0" }}
                    >
                      {answerIndex + 1}. {answer}
                    </Typography>
                  ))}
                </Grid2>
              ) : (
                // Display Implementation Required with Logo
                <Grid2
                  sx={{
                    display: "flex",
                    alignItems: "center",
                    gap: "12px",
                    borderRadius: "5px",
                    padding: "10px",
                  }}
                >
                  <img
                    src={magelightBuld}
                    alt="Implementation Required"
                    width="18px"
                  />
                  <Typography fontSize="12px" fontWeight="500" color="#000">
                    Implementation Required
                  </Typography>
                </Grid2>
              )}
            </Grid2>

            {/* Conditional Rendering of Table */}
            {showTable && questionIndex === 0 && TableComponent && (
              <Grid2
                sx={{
                  mt: "-30px",
                  mb: "8px",
                  ml: "0px",
                  padding: "10px 19px",
                  borderRadius: "5px",
                }}
              >
                <TableComponent /> {/* Render the selected table component */}
              </Grid2>
            )}
          </React.Fragment>
        ))}
      </Paper>
    </Grid2>
  );
};

function SurveyQuestionSection() {
  const questions = [
    {
      text: [
        "Do you have all motors with efficiency classification IE3 & IE4?",
      ],
      answers: [
        [
          "Upgrade to IE3 and IE4 motors for increased energy efficiency and optimal performance.",
        ],
      ],
      logo: "",
      heading: "Industrial AC Motors",
      showTable: false,
    },
    {
      text: [
        "Have you involved a specialist in the selection of the pump sizing?",
        "Are bypass valves and valve throttling being eliminated in all retrofitting projects?",
      ],
      answers: [
        [
          "Pump sizing and selection must consider all possible scenarios of the operation.",
          "Right pump technology must be selected based on process requirement.",
        ],
        [
          "Pump with right VFD must be selected for the process with variable flow requirement.",
        ],
      ],
      logo: "",
      heading: "Industrial Process Pumps",
      showTable: false,
    },
    {
      text: [
        "Have you involved a specialist in the selection of the pump sizing?",
        "Does the fan comply with a Fan Efficiency Grade (FEG) of 85% or higher?",
      ],
      answers: [
        [
          "Fan sizing and selection must consider all possible scenarios of the operation.",
          "Right fan technology must be selected based on process requirement.",
          "Fan with right VFD must be selected for the process with variable flow requirement.",
        ],
        [],
      ],
      logo: "",
      heading: "Industrial Process Fans",
      showTable: false,
    },
    {
      text: [
        "Has a specialist been appointed to select the most suitable compressor technology (e.g., variable speed drive or variable displacement compressor)?",
        "Are measures in place to minimize leakage in the compressed air system of the existing plant?",
      ],
      answers: [
        [],
        [
          "Leakage in the compressed air system must be minimized in the existing plant.",
        ],
      ],
      logo: "",
      heading: "Compressed Air System",
      showTable: false,
    },
    {
      text: [
        "Has a high-efficiency boiler been selected for the plant process?",
        "Are all the boilers equipped with a smart control system to optimize operational efficiency?",
      ],
      answers: [
        [
          "Boiler sizing and design operating parameters must consider all possible scenarios of the operation.",
        ],
        [
          "The selected boiler must have smart controls to regulate the fuel and excess air supply to the boiler based on process load variation, thereby achieving higher combustion efficiency.",
        ],
      ],
      logo: "",
      heading: "Industrial Process Boilers",
      showTable: false,
    },
    {
      text: [
        "Have you assessed the insulation level of the steam distribution system to ensure it is sufficient to minimize heat loss to the environment?",
      ],
      answers: [
        [
          "Steam distribution system economic insulation requirement must be carried out by a specialist.",
          "Effectiveness of the insulation must be tested on an annual basis.",
        ],
      ],
      logo: "",
      heading: "Steam Distribution System",
      showTable: false,
    },
    {
      text: [
        "Have you considered selecting an energy-efficient chiller for all the plant?",
      ],
      answers: [
        [
          "All chiller units should meet the Minimum Energy Efficiency Ratio (EER) mentioned in the table.",
          "Ratio (EER) mentioned in the table",
        ],
      ],
      logo: "",
      heading: "Industrial Chiller System",
      showTable: true,
    },
    {
      text: [
        "Has the insulation level of the chilled water distribution system been assessed to ensure it is sufficient to minimize energy loss?",
        "Has the system been designed to minimize pumping losses by reducing or eliminating bypass/re-circulation?",
      ],
      answers: [[], []],
      logo: "",
      heading: "Chilled Water Distribution System",
      showTable: false,
    },
    {
      text: [
        "Have you considered selecting an energy-efficient chiller for all the plant?",
      ],
      answers: [
        [
          "All condenser units should meet the Minimum Energy Efficiency Ratio (EER)",
        ],
      ],
      logo: "",
      heading: "Refrigerated Storage Area",
      showTable: true,
    },
    {
      text: [
        "Has the electrical system been designed to incorporate control measures?",
      ],
      answers: [
        [
          "The electrical system must incorporate control measures like",
          "Distributed Power Flow Controller (DPFC)",
          "Voltage Optimizer",
          "Harmonic Filters",
          "Capacitor Banks",
          "To maintain high power factor and low hormonic levels, hence power quality",
        ],
      ],
      logo: "",
      heading: "Power Quality",
      showTable: false,
      boldAnswerIndex: 0,
    },
    {
      text: [
        "Has the design process considered identifying and evaluating potential waste heat recovery systems based on the waste heat generated during the process?",
      ],
      answers: [["Develop Waste heat recovery and utilization strategy"]],
      logo: "",
      heading: "Process Waste Heat Recovery",
      showTable: false,
    },
    {
      text: [
        "Has the design process considered identifying and evaluating potential waste heat recovery systems based on the waste heat generated during the process?",
        "Are all the sub-meters labeled for easy identification and tracking of energy consumption?",
      ],
      answers: [
        [
          "Develop a sub-metering, monitoring and automatic data recording strategy to account for a minimum of the following",
          "Heating and cooling system",
          "Internal & External Lighting",
          "Compressed air system",
          "Loads above 50KW",
          "Production line-wise sub-metering",
        ],
        [
          "In case the facility is contemplating a SCADA/ Automatic controls, these meters should be capable of providing the required outputs and integration.",
        ],
      ],
      logo: "",
      heading: "Process Energy Sub-Metering",
      showTable: false,
      boldAnswerIndex: 0,
    },
  ];

  return (
    <>
      <Grid2 sx={{ display: "flex", flexDirection: "column", gap: "20px" }}>
        {questions.map((q, index) => (
          <Question
            key={index}
            questionText={q.text}
            logo={q.logo}
            heading={q.heading}
            answers={q.answers}
            showTable={q.showTable}
            boldAnswerIndex={q.boldAnswerIndex}
          />
        ))}
      </Grid2>
     <Grid2 sx={{display:"flex", flexDirection:"column", gap:"20px", mt:"20px"}}>
     <DecarbonizationQsnAnsWithUl></DecarbonizationQsnAnsWithUl>
     <DecarbonizationQsnAnsWithUl2></DecarbonizationQsnAnsWithUl2>
     <DecarbonizationQsnAnsWithUi3></DecarbonizationQsnAnsWithUi3>
     <DecarbonizationQsnAnsWithUi4></DecarbonizationQsnAnsWithUi4>
     <DecarbonizationQsnAnsWithUi5></DecarbonizationQsnAnsWithUi5>
     <DecarbonizationQsnAnsWithUi6></DecarbonizationQsnAnsWithUi6>
     </Grid2>
      <Grid2
        sx={{
          display: "flex",
          flexDirection: "row",
          justifyContent: "flex-end",
          mt: "45px",
        }}
      >
        <Button
          sx={{
            borderRadius: "32px",
            textTransform: "capitalize",
            justifyContent: "center",
            alignItems: "center",
            background:
              "var(--grad-3, linear-gradient(102deg, #369D9C 0%, #28814D 100%))",
            padding: "11px 40px",
          }}
        >
          <Typography color="#fff" fontSize="14px" fontWeight="600">
            Submit Survey
          </Typography>
        </Button>
      </Grid2>
    </>
  );
}

export default SurveyQuestionSection;

// -------------------------------------

 

import React from "react";
import { Box, Grid2, Paper, Typography, Button } from "@mui/material";
import magelightBuld from "../../../../assets/images/mage_light-bulb.svg";
import BasicTable from "./TablesDataDecarbonation";
import BasicTable2 from "./TablesDataDecarbonation2";
import DecarbonizationQsnAnsWithUl from "./DecarbonizationDiffUi/DecarbonizationQsnAnsWithUl";
import DecarbonizationQsnAnsWithUl2 from "./DecarbonizationDiffUi/DecarbonizationQsnAnsWithUi2";
import DecarbonizationQsnAnsWithUi3 from "./DecarbonizationDiffUi/DecarbonizationQsnAnsWithUi3";
import DecarbonizationQsnAnsWithUi4 from "./DecarbonizationDiffUi/DecarbonizationQsnAnsDiffUi4";
import DecarbonizationQsnAnsWithUi5 from "./DecarbonizationDiffUi/DecarbonizationQsnAnsDiffUi5";
import DecarbonizationQsnAnsWithUi6 from "./DecarbonizationDiffUi/DecarbonizationQsnAnsDiffUi6";


const TableComponents = {
  "Industrial Chiller System": BasicTable,
  "Refrigerated Storage Area": BasicTable2,
};

const Question = ({
  questionText,
  logo,
  heading,
  answers,
  showTable,
  boldAnswerIndex,
}) => {
  const TableComponent = TableComponents[heading];

  return (
    <Grid2
      sx={{
        flexDirection: "column",
        display: "flex",
        border: "1px solid #E4E4E4",
        borderRadius: "5px",
        borderTop: "3px solid #369D9C",
        gap: "20px",
      }}
    >
      <Paper
        sx={{
          display: "flex",
          flexDirection: "column",
          gap: "15px",
        }}
      >
        {/* Heading Section */}
        <Grid2
          sx={{
            display: "flex",
            flexDirection: "row",
            gap: "12px",
            mt: "16px",
            ml: "16px",
            alignItems: "center",
          }}
        >
          {logo && <img src={logo} alt="logo" width="18px" />}
          <Typography fontSize="16px" fontWeight="600" color="#000">
            {heading}
          </Typography>
        </Grid2>

        {questionText.map((q, questionIndex) => (
          <React.Fragment key={questionIndex}>
            {/* Question Text */}
            <Grid2
              sx={{
                display: "flex",
                flexDirection: "row",
                alignItems: "center",
                gap: "12px",
                ml: "15px",
              }}
            >
              <Box
                sx={{
                  width: "37px",
                  height: "34px",
                  backgroundColor: "#F7F7F7",
                  padding: "7px",
                  borderRadius: "6px",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                }}
              >
                <Typography color="#5B5B5B" fontSize="14px" fontWeight="400">
                  Q.{questionIndex + 1}
                </Typography>
              </Box>
              <Typography fontSize="14px" fontWeight="500" color="#000">
                {q}
              </Typography>
            </Grid2>

            {/* Answers or Implementation Required */}
            <Grid2
              sx={{
                borderTop: "1px solid #E4E4E4",
                mt: "8px",
                mb: "8px",
                ml: "0px",
                padding: "10px 19px",
                borderRadius: "5px",
              }}
            >
              {answers[questionIndex]?.length > 0 ? (
                // Display Answers
                <Grid2
                  sx={{
                    border: "1px solid var(--Grey-3, #D9D9D9)",
                    background: "#F7FFFC",
                    borderRadius: "5px",
                    padding: "1px 12px",
                  }}
                >
                  {answers[questionIndex].map((answer, answerIndex) => (
                    <Typography
                      key={answerIndex}
                      fontSize="12px"
                      fontWeight={
                        boldAnswerIndex === questionIndex ||
                        boldAnswerIndex >= answers[questionIndex].length
                          ? "700" // Apply bold if boldAnswerIndex matches or exceeds total answers
                          : "500"
                      }
                      color="#000"
                      sx={{ padding: "6px 0" }}
                    >
                      {answerIndex + 1}. {answer}
                    </Typography>
                  ))}
                </Grid2>
              ) : (
                // Display Implementation Required with Logo
                <Grid2
                  sx={{
                    display: "flex",
                    alignItems: "center",
                    gap: "12px",
                    borderRadius: "5px",
                    padding: "10px",
                  }}
                >
                  <img
                    src={magelightBuld}
                    alt="Implementation Required"
                    width="18px"
                  />
                  <Typography fontSize="12px" fontWeight="500" color="#000">
                    Implementation Required
                  </Typography>
                </Grid2>
              )}
            </Grid2>

            {/* Conditional Rendering of Table */}
            {showTable && questionIndex === 0 && TableComponent && (
              <Grid2
                sx={{
                  mt: "-30px",
                  mb: "8px",
                  ml: "0px",
                  padding: "10px 19px",
                  borderRadius: "5px",
                }}
              >
                <TableComponent /> {/* Render the selected table component */}
              </Grid2>
            )}
          </React.Fragment>
        ))}
      </Paper>
    </Grid2>
  );
};

function SurveyQuestionSection() {
  const questions = [
    {
      text: [
        "Do you have all motors with efficiency classification IE3 & IE4?",
      ],
      answers: [
        [
          "Upgrade to IE3 and IE4 motors for increased energy efficiency and optimal performance.",
        ],
      ],
      logo: "",
      heading: "Industrial AC Motors",
      showTable: false,
    },
    {
      text: [
        "Have you involved a specialist in the selection of the pump sizing?",
        "Are bypass valves and valve throttling being eliminated in all retrofitting projects?",
      ],
      answers: [
        [
          "Pump sizing and selection must consider all possible scenarios of the operation.",
          "Right pump technology must be selected based on process requirement.",
        ],
        [
          "Pump with right VFD must be selected for the process with variable flow requirement.",
        ],
      ],
      logo: "",
      heading: "Industrial Process Pumps",
      showTable: false,
    },
    {
      text: [
        "Have you involved a specialist in the selection of the pump sizing?",
        "Does the fan comply with a Fan Efficiency Grade (FEG) of 85% or higher?",
      ],
      answers: [
        [
          "Fan sizing and selection must consider all possible scenarios of the operation.",
          "Right fan technology must be selected based on process requirement.",
          "Fan with right VFD must be selected for the process with variable flow requirement.",
        ],
        [],
      ],
      logo: "",
      heading: "Industrial Process Fans",
      showTable: false,
    },
    {
      text: [
        "Has a specialist been appointed to select the most suitable compressor technology (e.g., variable speed drive or variable displacement compressor)?",
        "Are measures in place to minimize leakage in the compressed air system of the existing plant?",
      ],
      answers: [
        [],
        [
          "Leakage in the compressed air system must be minimized in the existing plant.",
        ],
      ],
      logo: "",
      heading: "Compressed Air System",
      showTable: false,
    },
    {
      text: [
        "Has a high-efficiency boiler been selected for the plant process?",
        "Are all the boilers equipped with a smart control system to optimize operational efficiency?",
      ],
      answers: [
        [
          "Boiler sizing and design operating parameters must consider all possible scenarios of the operation.",
        ],
        [
          "The selected boiler must have smart controls to regulate the fuel and excess air supply to the boiler based on process load variation, thereby achieving higher combustion efficiency.",
        ],
      ],
      logo: "",
      heading: "Industrial Process Boilers",
      showTable: false,
    },
    {
      text: [
        "Have you assessed the insulation level of the steam distribution system to ensure it is sufficient to minimize heat loss to the environment?",
      ],
      answers: [
        [
          "Steam distribution system economic insulation requirement must be carried out by a specialist.",
          "Effectiveness of the insulation must be tested on an annual basis.",
        ],
      ],
      logo: "",
      heading: "Steam Distribution System",
      showTable: false,
    },
    {
      text: [
        "Have you considered selecting an energy-efficient chiller for all the plant?",
      ],
      answers: [
        [
          "All chiller units should meet the Minimum Energy Efficiency Ratio (EER) mentioned in the table.",
          "Ratio (EER) mentioned in the table",
        ],
      ],
      logo: "",
      heading: "Industrial Chiller System",
      showTable: true,
    },
    {
      text: [
        "Has the insulation level of the chilled water distribution system been assessed to ensure it is sufficient to minimize energy loss?",
        "Has the system been designed to minimize pumping losses by reducing or eliminating bypass/re-circulation?",
      ],
      answers: [[], []],
      logo: "",
      heading: "Chilled Water Distribution System",
      showTable: false,
    },
    {
      text: [
        "Have you considered selecting an energy-efficient chiller for all the plant?",
      ],
      answers: [
        [
          "All condenser units should meet the Minimum Energy Efficiency Ratio (EER)",
        ],
      ],
      logo: "",
      heading: "Refrigerated Storage Area",
      showTable: true,
    },
    {
      text: [
        "Has the electrical system been designed to incorporate control measures?",
      ],
      answers: [
        [
          "The electrical system must incorporate control measures like",
          "Distributed Power Flow Controller (DPFC)",
          "Voltage Optimizer",
          "Harmonic Filters",
          "Capacitor Banks",
          "To maintain high power factor and low hormonic levels, hence power quality",
        ],
      ],
      logo: "",
      heading: "Power Quality",
      showTable: false,
      boldAnswerIndex: 0,
    },
    {
      text: [
        "Has the design process considered identifying and evaluating potential waste heat recovery systems based on the waste heat generated during the process?",
      ],
      answers: [["Develop Waste heat recovery and utilization strategy"]],
      logo: "",
      heading: "Process Waste Heat Recovery",
      showTable: false,
    },
    {
      text: [
        "Has the design process considered identifying and evaluating potential waste heat recovery systems based on the waste heat generated during the process?",
        "Are all the sub-meters labeled for easy identification and tracking of energy consumption?",
      ],
      answers: [
        [
          "Develop a sub-metering, monitoring and automatic data recording strategy to account for a minimum of the following",
          "Heating and cooling system",
          "Internal & External Lighting",
          "Compressed air system",
          "Loads above 50KW",
          "Production line-wise sub-metering",
        ],
        [
          "In case the facility is contemplating a SCADA/ Automatic controls, these meters should be capable of providing the required outputs and integration.",
        ],
      ],
      logo: "",
      heading: "Process Energy Sub-Metering",
      showTable: false,
      boldAnswerIndex: 0,
    },
  ];

  return (
    <>
      <Grid2 sx={{ display: "flex", flexDirection: "column", gap: "20px" }}>
        {questions.map((q, index) => (
          <Question
            key={index}
            questionText={q.text}
            logo={q.logo}
            heading={q.heading}
            answers={q.answers}
            showTable={q.showTable}
            boldAnswerIndex={q.boldAnswerIndex}
          />
        ))}
      </Grid2>
     <Grid2 sx={{display:"flex", flexDirection:"column", gap:"20px", mt:"20px"}}>
     <DecarbonizationQsnAnsWithUl></DecarbonizationQsnAnsWithUl>
     <DecarbonizationQsnAnsWithUl2></DecarbonizationQsnAnsWithUl2>
     <DecarbonizationQsnAnsWithUi3></DecarbonizationQsnAnsWithUi3>
     <DecarbonizationQsnAnsWithUi4></DecarbonizationQsnAnsWithUi4>
     <DecarbonizationQsnAnsWithUi5></DecarbonizationQsnAnsWithUi5>
     <DecarbonizationQsnAnsWithUi6></DecarbonizationQsnAnsWithUi6>
     </Grid2>
      <Grid2
        sx={{
          display: "flex",
          flexDirection: "row",
          justifyContent: "flex-end",
          mt: "45px",
        }}
      >
        <Button
          sx={{
            borderRadius: "32px",
            textTransform: "capitalize",
            justifyContent: "center",
            alignItems: "center",
            background:
              "var(--grad-3, linear-gradient(102deg, #369D9C 0%, #28814D 100%))",
            padding: "11px 40px",
          }}
        >
          <Typography color="#fff" fontSize="14px" fontWeight="600">
            Submit Survey
          </Typography>
        </Button>
      </Grid2>
    </>
  );
}

export default SurveyQuestionSection;

// -------------------------------------

 

import React from "react";
import { Box, Grid2, Paper, Typography, Button } from "@mui/material";
import magelightBuld from "../../../../assets/images/mage_light-bulb.svg";
import BasicTable from "./TablesDataDecarbonation";
import BasicTable2 from "./TablesDataDecarbonation2";
import DecarbonizationQsnAnsWithUl from "./DecarbonizationDiffUi/DecarbonizationQsnAnsWithUl";
import DecarbonizationQsnAnsWithUl2 from "./DecarbonizationDiffUi/DecarbonizationQsnAnsWithUi2";
import DecarbonizationQsnAnsWithUi3 from "./DecarbonizationDiffUi/DecarbonizationQsnAnsWithUi3";
import DecarbonizationQsnAnsWithUi4 from "./DecarbonizationDiffUi/DecarbonizationQsnAnsDiffUi4";
import DecarbonizationQsnAnsWithUi5 from "./DecarbonizationDiffUi/DecarbonizationQsnAnsDiffUi5";
import DecarbonizationQsnAnsWithUi6 from "./DecarbonizationDiffUi/DecarbonizationQsnAnsDiffUi6";


const TableComponents = {
  "Industrial Chiller System": BasicTable,
  "Refrigerated Storage Area": BasicTable2,
};

const Question = ({
  questionText,
  logo,
  heading,
  answers,
  showTable,
  boldAnswerIndex,
}) => {
  const TableComponent = TableComponents[heading];

  return (
    <Grid2
      sx={{
        flexDirection: "column",
        display: "flex",
        border: "1px solid #E4E4E4",
        borderRadius: "5px",
        borderTop: "3px solid #369D9C",
        gap: "20px",
      }}
    >
      <Paper
        sx={{
          display: "flex",
          flexDirection: "column",
          gap: "15px",
        }}
      >
        {/* Heading Section */}
        <Grid2
          sx={{
            display: "flex",
            flexDirection: "row",
            gap: "12px",
            mt: "16px",
            ml: "16px",
            alignItems: "center",
          }}
        >
          {logo && <img src={logo} alt="logo" width="18px" />}
          <Typography fontSize="16px" fontWeight="600" color="#000">
            {heading}
          </Typography>
        </Grid2>

        {questionText.map((q, questionIndex) => (
          <React.Fragment key={questionIndex}>
            {/* Question Text */}
            <Grid2
              sx={{
                display: "flex",
                flexDirection: "row",
                alignItems: "center",
                gap: "12px",
                ml: "15px",
              }}
            >
              <Box
                sx={{
                  width: "37px",
                  height: "34px",
                  backgroundColor: "#F7F7F7",
                  padding: "7px",
                  borderRadius: "6px",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                }}
              >
                <Typography color="#5B5B5B" fontSize="14px" fontWeight="400">
                  Q.{questionIndex + 1}
                </Typography>
              </Box>
              <Typography fontSize="14px" fontWeight="500" color="#000">
                {q}
              </Typography>
            </Grid2>

            {/* Answers or Implementation Required */}
            <Grid2
              sx={{
                borderTop: "1px solid #E4E4E4",
                mt: "8px",
                mb: "8px",
                ml: "0px",
                padding: "10px 19px",
                borderRadius: "5px",
              }}
            >
              {answers[questionIndex]?.length > 0 ? (
                // Display Answers
                <Grid2
                  sx={{
                    border: "1px solid var(--Grey-3, #D9D9D9)",
                    background: "#F7FFFC",
                    borderRadius: "5px",
                    padding: "1px 12px",
                  }}
                >
                  {answers[questionIndex].map((answer, answerIndex) => (
                    <Typography
                      key={answerIndex}
                      fontSize="12px"
                      fontWeight={
                        boldAnswerIndex === questionIndex ||
                        boldAnswerIndex >= answers[questionIndex].length
                          ? "700" // Apply bold if boldAnswerIndex matches or exceeds total answers
                          : "500"
                      }
                      color="#000"
                      sx={{ padding: "6px 0" }}
                    >
                      {answerIndex + 1}. {answer}
                    </Typography>
                  ))}
                </Grid2>
              ) : (
                // Display Implementation Required with Logo
                <Grid2
                  sx={{
                    display: "flex",
                    alignItems: "center",
                    gap: "12px",
                    borderRadius: "5px",
                    padding: "10px",
                  }}
                >
                  <img
                    src={magelightBuld}
                    alt="Implementation Required"
                    width="18px"
                  />
                  <Typography fontSize="12px" fontWeight="500" color="#000">
                    Implementation Required
                  </Typography>
                </Grid2>
              )}
            </Grid2>

            {/* Conditional Rendering of Table */}
            {showTable && questionIndex === 0 && TableComponent && (
              <Grid2
                sx={{
                  mt: "-30px",
                  mb: "8px",
                  ml: "0px",
                  padding: "10px 19px",
                  borderRadius: "5px",
                }}
              >
                <TableComponent /> {/* Render the selected table component */}
              </Grid2>
            )}
          </React.Fragment>
        ))}
      </Paper>
    </Grid2>
  );
};

function SurveyQuestionSection() {
  const questions = [
    {
      text: [
        "Do you have all motors with efficiency classification IE3 & IE4?",
      ],
      answers: [
        [
          "Upgrade to IE3 and IE4 motors for increased energy efficiency and optimal performance.",
        ],
      ],
      logo: "",
      heading: "Industrial AC Motors",
      showTable: false,
    },
    {
      text: [
        "Have you involved a specialist in the selection of the pump sizing?",
        "Are bypass valves and valve throttling being eliminated in all retrofitting projects?",
      ],
      answers: [
        [
          "Pump sizing and selection must consider all possible scenarios of the operation.",
          "Right pump technology must be selected based on process requirement.",
        ],
        [
          "Pump with right VFD must be selected for the process with variable flow requirement.",
        ],
      ],
      logo: "",
      heading: "Industrial Process Pumps",
      showTable: false,
    },
    {
      text: [
        "Have you involved a specialist in the selection of the pump sizing?",
        "Does the fan comply with a Fan Efficiency Grade (FEG) of 85% or higher?",
      ],
      answers: [
        [
          "Fan sizing and selection must consider all possible scenarios of the operation.",
          "Right fan technology must be selected based on process requirement.",
          "Fan with right VFD must be selected for the process with variable flow requirement.",
        ],
        [],
      ],
      logo: "",
      heading: "Industrial Process Fans",
      showTable: false,
    },
    {
      text: [
        "Has a specialist been appointed to select the most suitable compressor technology (e.g., variable speed drive or variable displacement compressor)?",
        "Are measures in place to minimize leakage in the compressed air system of the existing plant?",
      ],
      answers: [
        [],
        [
          "Leakage in the compressed air system must be minimized in the existing plant.",
        ],
      ],
      logo: "",
      heading: "Compressed Air System",
      showTable: false,
    },
    {
      text: [
        "Has a high-efficiency boiler been selected for the plant process?",
        "Are all the boilers equipped with a smart control system to optimize operational efficiency?",
      ],
      answers: [
        [
          "Boiler sizing and design operating parameters must consider all possible scenarios of the operation.",
        ],
        [
          "The selected boiler must have smart controls to regulate the fuel and excess air supply to the boiler based on process load variation, thereby achieving higher combustion efficiency.",
        ],
      ],
      logo: "",
      heading: "Industrial Process Boilers",
      showTable: false,
    },
    {
      text: [
        "Have you assessed the insulation level of the steam distribution system to ensure it is sufficient to minimize heat loss to the environment?",
      ],
      answers: [
        [
          "Steam distribution system economic insulation requirement must be carried out by a specialist.",
          "Effectiveness of the insulation must be tested on an annual basis.",
        ],
      ],
      logo: "",
      heading: "Steam Distribution System",
      showTable: false,
    },
    {
      text: [
        "Have you considered selecting an energy-efficient chiller for all the plant?",
      ],
      answers: [
        [
          "All chiller units should meet the Minimum Energy Efficiency Ratio (EER) mentioned in the table.",
          "Ratio (EER) mentioned in the table",
        ],
      ],
      logo: "",
      heading: "Industrial Chiller System",
      showTable: true,
    },
    {
      text: [
        "Has the insulation level of the chilled water distribution system been assessed to ensure it is sufficient to minimize energy loss?",
        "Has the system been designed to minimize pumping losses by reducing or eliminating bypass/re-circulation?",
      ],
      answers: [[], []],
      logo: "",
      heading: "Chilled Water Distribution System",
      showTable: false,
    },
    {
      text: [
        "Have you considered selecting an energy-efficient chiller for all the plant?",
      ],
      answers: [
        [
          "All condenser units should meet the Minimum Energy Efficiency Ratio (EER)",
        ],
      ],
      logo: "",
      heading: "Refrigerated Storage Area",
      showTable: true,
    },
    {
      text: [
        "Has the electrical system been designed to incorporate control measures?",
      ],
      answers: [
        [
          "The electrical system must incorporate control measures like",
          "Distributed Power Flow Controller (DPFC)",
          "Voltage Optimizer",
          "Harmonic Filters",
          "Capacitor Banks",
          "To maintain high power factor and low hormonic levels, hence power quality",
        ],
      ],
      logo: "",
      heading: "Power Quality",
      showTable: false,
      boldAnswerIndex: 0,
    },
    {
      text: [
        "Has the design process considered identifying and evaluating potential waste heat recovery systems based on the waste heat generated during the process?",
      ],
      answers: [["Develop Waste heat recovery and utilization strategy"]],
      logo: "",
      heading: "Process Waste Heat Recovery",
      showTable: false,
    },
    {
      text: [
        "Has the design process considered identifying and evaluating potential waste heat recovery systems based on the waste heat generated during the process?",
        "Are all the sub-meters labeled for easy identification and tracking of energy consumption?",
      ],
      answers: [
        [
          "Develop a sub-metering, monitoring and automatic data recording strategy to account for a minimum of the following",
          "Heating and cooling system",
          "Internal & External Lighting",
          "Compressed air system",
          "Loads above 50KW",
          "Production line-wise sub-metering",
        ],
        [
          "In case the facility is contemplating a SCADA/ Automatic controls, these meters should be capable of providing the required outputs and integration.",
        ],
      ],
      logo: "",
      heading: "Process Energy Sub-Metering",
      showTable: false,
      boldAnswerIndex: 0,
    },
  ];

  return (
    <>
      <Grid2 sx={{ display: "flex", flexDirection: "column", gap: "20px" }}>
        {questions.map((q, index) => (
          <Question
            key={index}
            questionText={q.text}
            logo={q.logo}
            heading={q.heading}
            answers={q.answers}
            showTable={q.showTable}
            boldAnswerIndex={q.boldAnswerIndex}
          />
        ))}
      </Grid2>
     <Grid2 sx={{display:"flex", flexDirection:"column", gap:"20px", mt:"20px"}}>
     <DecarbonizationQsnAnsWithUl></DecarbonizationQsnAnsWithUl>
     <DecarbonizationQsnAnsWithUl2></DecarbonizationQsnAnsWithUl2>
     <DecarbonizationQsnAnsWithUi3></DecarbonizationQsnAnsWithUi3>
     <DecarbonizationQsnAnsWithUi4></DecarbonizationQsnAnsWithUi4>
     <DecarbonizationQsnAnsWithUi5></DecarbonizationQsnAnsWithUi5>
     <DecarbonizationQsnAnsWithUi6></DecarbonizationQsnAnsWithUi6>
     </Grid2>
      <Grid2
        sx={{
          display: "flex",
          flexDirection: "row",
          justifyContent: "flex-end",
          mt: "45px",
        }}
      >
        <Button
          sx={{
            borderRadius: "32px",
            textTransform: "capitalize",
            justifyContent: "center",
            alignItems: "center",
            background:
              "var(--grad-3, linear-gradient(102deg, #369D9C 0%, #28814D 100%))",
            padding: "11px 40px",
          }}
        >
          <Typography color="#fff" fontSize="14px" fontWeight="600">
            Submit Survey
          </Typography>
        </Button>
      </Grid2>
    </>
  );
}

export default SurveyQuestionSection;

// -------------------------------------

 
./DecarbonizationSurveyQsn
 
./components/Dashboard/Survey
 
./surveypages/DecarbonizationSurveyQsn
 
./surveypages/DecarbonizationSurveyQsn
 
../../../assets/images/
 
change
 
"Have the tests and reports been conducted in compliance with the specified conditions?",
 
"Has the design process considered identifying and evaluating potential waste heat recovery systems based
 
"Has the electrical system been designed to incorporate control measures?",
 
// Example heading
 
// Replace with your logo path
 
((preve) => [...preve, { answer, qsnId }])
 
// Replace with your actual logo path
 

  // Example questions array with logos and headings
 
// State for this question
 
// Update state for this question only
 
 const handleAnswerSelect = (questionNumber, answer) => {
    setSelectedAnswers((prevAnswers) => ({
      ...prevAnswers,
      [questionNumber]: answer,
    }));
    console.log(`Question ${questionNumber} selected answer: ${answer}`);
  };
 
 questionNumber,
  questionText,
  logo,
  heading,
  selectedAnswer,
  onAnswerSelect,
 
<Grid2 sx={{ display: "flex", flexDirection: "column", gap: "20px" }}>
            {questions.map((q) => (
              <Question
                key={q.number}
                questionNumber={q.number}
                questionText={q.text}
                logo={q.logo}
                heading={q.heading}
                selectedAnswer={selectedAnswers[q.id]}
                onAnswerSelect={handleAnswerSelect}
              />
            ))}
          </Grid2>
 
 {["Yes", "No", "N/A"].map((answer, i) => (
                  <Button
                    key={i}
                    onClick={() => handleButtonClick(answer)}
                    sx={{
                      background:
                        selectedAnswer === answer
                          ? `var(--grad-3, linear-gradient(102deg, #369D9C 0%, #28814D 100%))`
                          : "#FFF",
                      color: selectedAnswer === answer ? "#FFF" : "#474747",
                      border:
                        selectedAnswer === answer
                          ? "none"
                          : "1px solid #369D9C",
                      padding: "6px 22px",
                      borderRadius: "32px",
                      textTransform: "capitalize",
                      transition: "background 0.3s ease",
                    }}
                  >
                    <Typography fontSize="14px" fontWeight="500">
                      {answer}
                    </Typography>
                  </Button>
                ))}
 

  const handleButtonClick = (answer) => {
    onAnswerSelect(questionNumber, answer);
    console.log(`Question ${questionNumber} selected answer: ${answer}`);
  };
 
const [selectedAnswers, setSelectedAnswers] = useState({});
  const handleAnswerSelect = (questionNumber, answer) => {
    setSelectedAnswers((prevAnswers) => ({
      ...prevAnswers,
      [questionNumber]: answer,
    }));
    console.log(`Question ${questionNumber} selected answer: ${answer}`);
  };
 
import React from "react";
import { Box, Grid2, Paper, Typography, Button } from "@mui/material";
import ac_motors_logo from "../../../../assets/images/ac-motors_logo.svg";
import pump2 from "../../../../assets/images/pump2.svg";
import wind from "../../../../assets/images/wind.svg";
import boiler from "../../../../assets/images/boiler.svg";
import tempreture from "../../../../assets/images/temperature.svg";
import snowflakes from "../../../../assets/images/snowflakes.svg";
import warehouse from "../../../../assets/images/warehouse.svg";
import bolt from "../../../../assets/images/bolt.svg";
import r_bin from "../../../../assets/images/recycle-bin.svg";
import snow_blowing from "../../../../assets/images/snow-blowing.svg";
import meter_bolt from "../../../../assets/images/meter-bolt 1.svg";
import calculator_bill from "../../../../assets/images/calculator-bill 1.svg";
import hand_holding from "../../../../assets/images/hand-holding-water 1.svg";
import smoke from "../../../../assets/images/smoke.svg";
import lightbulb from "../../../../assets/images/lightbulb.svg";
import insight from "../../../../assets/images/insight.svg";
import ideaChange from "../../../../assets/images/idea-exchange.svg";
import lightBulbSetting from "../../../../assets/images/lightbulb-setting.svg";
import solar_panel from "../../../../assets/images/solar-panel.svg";
import solarpanel_1 from "../../../../assets/images/solar-panel 1.svg";
import lightSelling from "../../../../assets/images/light-ceiling 1.svg";
import { useState } from "react";
import DecarbonizationSurveyQsnAns from "./DecarbonizationSurveyQsnAns";

const Question = ({
  questionNumber,
  questionText,
  logo,
  heading,
  selectedAnswer,
  onAnswerSelect,
}) => {
  const handleButtonClick = (answer) => {
    onAnswerSelect(questionNumber, answer);
    console.log(`Question ${questionNumber} selected answer: ${answer}`);
  };

  return (
    <Grid2
      sx={{
        flexDirection: "column",
        display: "flex",
        border: "1px solid #E4E4E4",
        borderRadius: "5px",
        borderTop: "3px solid #369D9C",
        gap: "20px",
      }}
    >
      <Paper
        sx={{
          display: "flex",
          flexDirection: "column",
          gap: "15px",
        }}
      >
        {/* Heading Section */}
        <Grid2
          sx={{
            display: "flex",
            flexDirection: "row",
            gap: "12px",
            mt: "16px",
            ml: "16px",
            alignItems: "center",
          }}
        >
          {logo && <img src={logo} alt="logo" width="18px" />}
          <Typography fontSize="16px" fontWeight="600" color="#000">
            {heading}
          </Typography>
        </Grid2>

        {/* Questions and Buttons */}
        {questionText.map((q, index) => (
          <React.Fragment key={index}>
            {/* Question Text */}
            <Grid2
              sx={{
                display: "flex",
                flexDirection: "row",
                alignItems: "center",
                gap: "12px",
                ml: "15px",
              }}
            >
              <Box
                sx={{
                  width: "37px",
                  height: "34px",
                  backgroundColor: "#F7F7F7",
                  padding: "7px",
                  borderRadius: "6px",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                }}
              >
                <Typography color="#5B5B5B" fontSize="14px" fontWeight="400">
                  Q.{index + 1}
                </Typography>
              </Box>
              <Typography fontSize="14px" fontWeight="500" color="#000">
                {q}
              </Typography>
            </Grid2>

            {/* Buttons */}
            <Grid2
              sx={{
                borderTop: "1px solid #E4E4E4",
                borderBottom: "1px solid #E4E4E4",
              }}
            >
              <Grid2
                sx={{
                  display: "flex",
                  flexDirection: "row",
                  gap: "8px",
                  mt: "10px",
                  ml: "16px",
                  mb: "12px",
                }}
              >
                {["Yes", "No", "N/A"].map((answer, i) => (
                  <Button
                    key={i}
                    onClick={() => handleButtonClick(answer)}
                    sx={{
                      background:
                        selectedAnswer === answer
                          ? `var(--grad-3, linear-gradient(102deg, #369D9C 0%, #28814D 100%))`
                          : "#FFF",
                      color: selectedAnswer === answer ? "#FFF" : "#474747",
                      border:
                        selectedAnswer === answer
                          ? "none"
                          : "1px solid #369D9C",
                      padding: "6px 22px",
                      borderRadius: "32px",
                      textTransform: "capitalize",
                      transition: "background 0.3s ease",
                    }}
                  >
                    <Typography fontSize="14px" fontWeight="500">
                      {answer}
                    </Typography>
                  </Button>
                ))}
              </Grid2>
            </Grid2>
          </React.Fragment>
        ))}
      </Paper>
    </Grid2>
  );
};

// Main Component
function SurveyQuestionSection() {
  const [surveyStarted, setSurveyStarted] = useState(false);
  const [selectedAnswers, setSelectedAnswers] = useState({});
  const handleAnswerSelect = (questionNumber, answer) => {
    setSelectedAnswers((prevAnswers) => ({
      ...prevAnswers,
      [questionNumber]: answer,
    }));
    console.log(`Question ${questionNumber} selected answer: ${answer}`);
  };

  const handleStartSurvey = () => {
    setSurveyStarted(true);
  };

  // Example questions array with logos and headings
  const questions = [
    {
      id: 1,
      text: [
        "Do you have all motors with efficiency classification IE3 & IE4?",
      ],
      logo: ac_motors_logo, // Replace with your actual logo path
      heading: "Industrial AC Motors", // Pass the heading here
    },
    {
      id: 2,
      text: [
        "Have you involved a specialist in the selection of the pump sizing?",
        "Are bypass valves and valve throttling being eliminated in all retrofitting projects?",
      ],
      logo: pump2, // Replace with your logo path
      heading: "Energy Compliance", // Example heading
    },
    {
      id: 3,
      text: [
        "Have you involved a specialist in the selection of the fan sizing?",
        "Does the fan comply with a Fan Efficiency Grade (FEG) of 85% or higher?",
      ],
      logo: wind, // Replace with your logo path
      heading: "Compressed Air System", // Example heading
    },
    {
      id: 4,
      text: [
        "Has a high-efficiency boiler been selected for all the plant process?",
        "Is are all the boiler equipped with a smart control system to optimize operational efficiency?",
      ],
      logo: boiler, // Replace with your logo path
      heading: "Industrial Boilers", // Example heading
    },
    {
      id: 5,
      text: [
        "Have you assessed the insulation level of the steam distribution system to ensure it is sufficient to minimize heat loss to the environment?",
      ],
      logo: boiler, // Replace with your logo path
      heading: "Steam Distribution System", // Example heading
    },
    {
      id: 6,
      text: [
        "Have you considered selecting an energy-efficient chiller for all the plant?",
      ],
      logo: tempreture, // Replace with your logo path
      heading: "Industrial Chiller System", // Example heading
    },
    {
      id: 7,
      text: [
        "Has the insulation level of the chilled water distribution system been assessed to ensure it is sufficient to minimize energy loss?",
      ],
      logo: snowflakes, // Replace with your logo path
      heading: "Chilled Water Distribution System", // Example heading
    },
    {
      id: 8,
      text: [
        "Has the insulation level of the chilled water distribution system been assessed to ensure it is sufficient to minimize energy loss?",
        "Has the system been designed to minimize pumping losses by reducing or eliminating bypass/re-circulation?",
      ],
      logo: snowflakes,
      heading: "Chilled Water Distribution System",
    },
    {
      id: 9,
      text: [
        "Has a high-efficiency condenser suitable for the plant been selected?",
      ],
      logo: warehouse,
      heading: "Refrigerated Storage Area",
    },
    {
      id: 10,
      text: [
        "Has the electrical system been designed to incorporate control measures?",
      ],
      logo: bolt,
      heading: "Power Quality",
    },
    {
      id: 11,
      text: [
        "Has the design process considered identifying and evaluating potential waste heat recovery systems based on the waste heat generated during the process?",
      ],
      logo: tempreture,
      heading: "Power Quality",
    },
    {
      id: 12,
      text: [
        "Has the design process considered identifying and evaluating potential waste heat recovery systems based on the waste heat generated during the process?",
        "Are all the sub-meters labeled for easy identification and tracking of energy consumption?",
      ],
      logo: r_bin,
      heading: "Process Energy Sub-Metering",
    },
    {
      id: 13,
      text: [
        "Has the development team considered improving the energy efficiency of the buildings envelope?",
      ],
      logo: r_bin,
      heading:
        "Energy Conservation Techniques and Thermal Insulation (Applicable for both Air-conditioned and Non-Air-Conditioned buildings)",
    },
    {
      id: 14,
      text: [
        "Has interior thermal imaging been conducted for air-conditioned/climate-controlled spaces to identify potential building defects?",
        "If leaks or gaps were identified, have appropriate corrective actions been taken to address them?",
        "Have the tests and reports been conducted in compliance with the specified conditions?",
      ],
      logo: snow_blowing,
      heading:
        "Envelope Tightness for Air-Conditioned Spaces - Thermal Imaging Technique",
    },
    {
      id: 15,
      text: [
        "Has the industrial facility/warehouse been assessed for envelope airtightness, and have measures been taken to identify and address any defects or leakages?",
      ],
      logo: meter_bolt,
      heading:
        "Envelope Tightness for Air-Conditioned Spaces - Thermal Imaging Technique",
    },
    {
      id: 16,
      text: [
        "Have you evaluated the potential impact of different HVAC systems on energy efficiency and operating costs to inform your selection?",
      ],
      logo: calculator_bill,
      heading: "Optimal System Sizing - HVAC",
    },
    {
      id: 17,
      text: [
        "Have you considered incorporating design strategies to utilize Energy Recovery Units (ERUs) in the plant?",
      ],
      logo: hand_holding,
      heading:
        "Installation of Energy Recovery Units and regulated air intake system",
    },
    {
      id: 18,
      text: [
        "Have you confirmed that the energy-efficient cooling equipment to be procured and installed is consistent with the capacities specified in the 'Optimal System Sizing - HVAC' section?",
      ],
      logo: hand_holding,
      heading:
        "Selection of Cooling Equipment with High Energy Efficiency Ratio (EER)",
    },
    {
      id: 19,
      text: [
        "Have you considered incorporating the necessary strategies into the HVAC system design to ensure efficient control and operation of the units?",
      ],
      logo: snowflakes,
      heading: "Programmable thermostats and CO2 Sensors for HVAC system",
    },
    {
      id: 20,
      text: [
        "Have you considered conducting a feasibility study to explore the potential of generating renewable power on-site?",
      ],
      logo: solarpanel_1,
      heading: "Onsite Renewable Energy Generation",
    },
    {
      id: 21,
      text: [
        "Have you explored the possibility of incorporating daylighting technologies into the industrial design?",
      ],
      logo: lightSelling,
      heading: "General Plant Lighting - Use of Solar Daylighting Technologies",
    },
  ];

  return (
    <>
      {!surveyStarted ? (
        <>
          <Grid2 sx={{ display: "flex", flexDirection: "column", gap: "20px" }}>
            {questions.map((q) => (
              <Question
                key={q.number}
                questionNumber={q.number}
                questionText={q.text}
                logo={q.logo}
                heading={q.heading}
                selectedAnswer={selectedAnswers[q.id]}
                onAnswerSelect={handleAnswerSelect}
              />
            ))}
          </Grid2>

          <Grid2
            sx={{
              display: "flex",
              flexDirection: "row",
              justifyContent: "flex-end", // This aligns the button to the right
              mt: "45px",
            }}
          >
            <Button
              onClick={handleStartSurvey}
              sx={{
                borderRadius: "32px",
                textTransform: "capitalize",
                justifyContent: "center",
                alignItems: "center",
                background:
                  "var(--grad-3, linear-gradient(102deg, #369D9C 0%, #28814D 100%))",
                padding: "11px 40px",
              }}
            >
              <Typography color="#fff" fontSize="14px" fontWeight="600">
                Submit Survey
              </Typography>
            </Button>
          </Grid2>
        </>
      ) : (
        <DecarbonizationSurveyQsnAns></DecarbonizationSurveyQsnAns>
      )}
    </>
  );
}

export default SurveyQuestionSection;

 

import { useState } from "react";
 
import React from "react";
import { Box, Grid2, Paper, Typography, Button } from "@mui/material";
import ac_motors_logo from "../../../../assets/images/ac-motors_logo.svg";
import pump2 from "../../../../assets/images/pump2.svg";
import wind from "../../../../assets/images/wind.svg";
import boiler from "../../../../assets/images/boiler.svg";
import tempreture from "../../../../assets/images/temperature.svg";
import snowflakes from "../../../../assets/images/snowflakes.svg";
import warehouse from "../../../../assets/images/warehouse.svg";
import bolt from "../../../../assets/images/bolt.svg";
import r_bin from "../../../../assets/images/recycle-bin.svg";
import snow_blowing from "../../../../assets/images/snow-blowing.svg";
import meter_bolt from "../../../../assets/images/meter-bolt 1.svg";
import calculator_bill from "../../../../assets/images/calculator-bill 1.svg";
import hand_holding from "../../../../assets/images/hand-holding-water 1.svg";
import smoke from "../../../../assets/images/smoke.svg";
import lightbulb from "../../../../assets/images/lightbulb.svg";
import insight from "../../../../assets/images/insight.svg";
import ideaChange from "../../../../assets/images/idea-exchange.svg";
import lightBulbSetting from "../../../../assets/images/lightbulb-setting.svg";
import solar_panel from "../../../../assets/images/solar-panel.svg";
import solarpanel_1 from "../../../../assets/images/solar-panel 1.svg";
import lightSelling from "../../../../assets/images/light-ceiling 1.svg";
import { useState } from "react";
import DecarbonizationSurveyQsnAns from "./DecarbonizationSurveyQsnAns";

const Question = ({
  questionNumber,
  questionText,
  logo,
  heading,
  selectedAnswer,
  onAnswerSelect,
}) => {
  const handleButtonClick = (answer) => {
    onAnswerSelect(questionNumber, answer);
    console.log(`Question ${questionNumber} selected answer: ${answer}`);
  };

  return (
    <Grid2
      sx={{
        flexDirection: "column",
        display: "flex",
        border: "1px solid #E4E4E4",
        borderRadius: "5px",
        borderTop: "3px solid #369D9C",
        gap: "20px",
      }}
    >
      <Paper
        sx={{
          display: "flex",
          flexDirection: "column",
          gap: "15px",
        }}
      >
        {/* Heading Section */}
        <Grid2
          sx={{
            display: "flex",
            flexDirection: "row",
            gap: "12px",
            mt: "16px",
            ml: "16px",
            alignItems: "center",
          }}
        >
          {logo && <img src={logo} alt="logo" width="18px" />}
          <Typography fontSize="16px" fontWeight="600" color="#000">
            {heading}
          </Typography>
        </Grid2>

        {/* Questions and Buttons */}
        {questionText.map((q, index) => (
          <React.Fragment key={index}>
            {/* Question Text */}
            <Grid2
              sx={{
                display: "flex",
                flexDirection: "row",
                alignItems: "center",
                gap: "12px",
                ml: "15px",
              }}
            >
              <Box
                sx={{
                  width: "37px",
                  height: "34px",
                  backgroundColor: "#F7F7F7",
                  padding: "7px",
                  borderRadius: "6px",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                }}
              >
                <Typography color="#5B5B5B" fontSize="14px" fontWeight="400">
                  Q.{index + 1}
                </Typography>
              </Box>
              <Typography fontSize="14px" fontWeight="500" color="#000">
                {q}
              </Typography>
            </Grid2>

            {/* Buttons */}
            <Grid2
              sx={{
                borderTop: "1px solid #E4E4E4",
                borderBottom: "1px solid #E4E4E4",
              }}
            >
              <Grid2
                sx={{
                  display: "flex",
                  flexDirection: "row",
                  gap: "8px",
                  mt: "10px",
                  ml: "16px",
                  mb: "12px",
                }}
              >
                {["Yes", "No", "N/A"].map((answer, i) => (
                  <Button
                    key={i}
                    onClick={() => handleButtonClick(answer)}
                    sx={{
                      background:
                        selectedAnswer === answer
                          ? `var(--grad-3, linear-gradient(102deg, #369D9C 0%, #28814D 100%))`
                          : "#FFF",
                      color: selectedAnswer === answer ? "#FFF" : "#474747",
                      border:
                        selectedAnswer === answer
                          ? "none"
                          : "1px solid #369D9C",
                      padding: "6px 22px",
                      borderRadius: "32px",
                      textTransform: "capitalize",
                      transition: "background 0.3s ease",
                    }}
                  >
                    <Typography fontSize="14px" fontWeight="500">
                      {answer}
                    </Typography>
                  </Button>
                ))}
              </Grid2>
            </Grid2>
          </React.Fragment>
        ))}
      </Paper>
    </Grid2>
  );
};

// Main Component
function SurveyQuestionSection() {
  const [surveyStarted, setSurveyStarted] = useState(false);
  const [selectedAnswers, setSelectedAnswers] = useState({});
  const handleAnswerSelect = (questionNumber, answer) => {
    setSelectedAnswers((prevAnswers) => ({
      ...prevAnswers,
      [questionNumber]: answer,
    }));
    console.log(`Question ${questionNumber} selected answer: ${answer}`);
  };

  const handleStartSurvey = () => {
    setSurveyStarted(true);
  };

  // Example questions array with logos and headings
  const questions = [
    {
      id: 1,
      text: [
        "Do you have all motors with efficiency classification IE3 & IE4?",
      ],
      logo: ac_motors_logo, // Replace with your actual logo path
      heading: "Industrial AC Motors", // Pass the heading here
    },
    {
      id: 2,
      text: [
        "Have you involved a specialist in the selection of the pump sizing?",
        "Are bypass valves and valve throttling being eliminated in all retrofitting projects?",
      ],
      logo: pump2, // Replace with your logo path
      heading: "Energy Compliance", // Example heading
    },
    {
      id: 3,
      text: [
        "Have you involved a specialist in the selection of the fan sizing?",
        "Does the fan comply with a Fan Efficiency Grade (FEG) of 85% or higher?",
      ],
      logo: wind, // Replace with your logo path
      heading: "Compressed Air System", // Example heading
    },
    {
      id: 4,
      text: [
        "Has a high-efficiency boiler been selected for all the plant process?",
        "Is are all the boiler equipped with a smart control system to optimize operational efficiency?",
      ],
      logo: boiler, // Replace with your logo path
      heading: "Industrial Boilers", // Example heading
    },
    {
      id: 5,
      text: [
        "Have you assessed the insulation level of the steam distribution system to ensure it is sufficient to minimize heat loss to the environment?",
      ],
      logo: boiler, // Replace with your logo path
      heading: "Steam Distribution System", // Example heading
    },
    {
      id: 6,
      text: [
        "Have you considered selecting an energy-efficient chiller for all the plant?",
      ],
      logo: tempreture, // Replace with your logo path
      heading: "Industrial Chiller System", // Example heading
    },
    {
      id: 7,
      text: [
        "Has the insulation level of the chilled water distribution system been assessed to ensure it is sufficient to minimize energy loss?",
      ],
      logo: snowflakes, // Replace with your logo path
      heading: "Chilled Water Distribution System", // Example heading
    },
    {
      id: 8,
      text: [
        "Has the insulation level of the chilled water distribution system been assessed to ensure it is sufficient to minimize energy loss?",
        "Has the system been designed to minimize pumping losses by reducing or eliminating bypass/re-circulation?",
      ],
      logo: snowflakes,
      heading: "Chilled Water Distribution System",
    },
    {
      id: 9,
      text: [
        "Has a high-efficiency condenser suitable for the plant been selected?",
      ],
      logo: warehouse,
      heading: "Refrigerated Storage Area",
    },
    {
      id: 10,
      text: [
        "Has the electrical system been designed to incorporate control measures?",
      ],
      logo: bolt,
      heading: "Power Quality",
    },
    {
      id: 11,
      text: [
        "Has the design process considered identifying and evaluating potential waste heat recovery systems based on the waste heat generated during the process?",
      ],
      logo: tempreture,
      heading: "Power Quality",
    },
    {
      id: 12,
      text: [
        "Has the design process considered identifying and evaluating potential waste heat recovery systems based on the waste heat generated during the process?",
        "Are all the sub-meters labeled for easy identification and tracking of energy consumption?",
      ],
      logo: r_bin,
      heading: "Process Energy Sub-Metering",
    },
    {
      id: 13,
      text: [
        "Has the development team considered improving the energy efficiency of the buildings envelope?",
      ],
      logo: r_bin,
      heading:
        "Energy Conservation Techniques and Thermal Insulation (Applicable for both Air-conditioned and Non-Air-Conditioned buildings)",
    },
    {
      id: 14,
      text: [
        "Has interior thermal imaging been conducted for air-conditioned/climate-controlled spaces to identify potential building defects?",
        "If leaks or gaps were identified, have appropriate corrective actions been taken to address them?",
        "Have the tests and reports been conducted in compliance with the specified conditions?",
      ],
      logo: snow_blowing,
      heading:
        "Envelope Tightness for Air-Conditioned Spaces - Thermal Imaging Technique",
    },
    {
      id: 15,
      text: [
        "Has the industrial facility/warehouse been assessed for envelope airtightness, and have measures been taken to identify and address any defects or leakages?",
      ],
      logo: meter_bolt,
      heading:
        "Envelope Tightness for Air-Conditioned Spaces - Thermal Imaging Technique",
    },
    {
      id: 16,
      text: [
        "Have you evaluated the potential impact of different HVAC systems on energy efficiency and operating costs to inform your selection?",
      ],
      logo: calculator_bill,
      heading: "Optimal System Sizing - HVAC",
    },
    {
      id: 17,
      text: [
        "Have you considered incorporating design strategies to utilize Energy Recovery Units (ERUs) in the plant?",
      ],
      logo: hand_holding,
      heading:
        "Installation of Energy Recovery Units and regulated air intake system",
    },
    {
      id: 18,
      text: [
        "Have you confirmed that the energy-efficient cooling equipment to be procured and installed is consistent with the capacities specified in the 'Optimal System Sizing - HVAC' section?",
      ],
      logo: hand_holding,
      heading:
        "Selection of Cooling Equipment with High Energy Efficiency Ratio (EER)",
    },
    {
      id: 19,
      text: [
        "Have you considered incorporating the necessary strategies into the HVAC system design to ensure efficient control and operation of the units?",
      ],
      logo: snowflakes,
      heading: "Programmable thermostats and CO2 Sensors for HVAC system",
    },
    {
      id: 20,
      text: [
        "Have you considered conducting a feasibility study to explore the potential of generating renewable power on-site?",
      ],
      logo: solarpanel_1,
      heading: "Onsite Renewable Energy Generation",
    },
    {
      id: 21,
      text: [
        "Have you explored the possibility of incorporating daylighting technologies into the industrial design?",
      ],
      logo: lightSelling,
      heading: "General Plant Lighting - Use of Solar Daylighting Technologies",
    },
  ];

  return (
    <>
      {!surveyStarted ? (
        <>
          <Grid2 sx={{ display: "flex", flexDirection: "column", gap: "20px" }}>
            {questions.map((q) => (
              <Question
                key={q.number}
                questionNumber={q.number}
                questionText={q.text}
                logo={q.logo}
                heading={q.heading}
                selectedAnswer={selectedAnswers[q.id]}
                onAnswerSelect={handleAnswerSelect}
              />
            ))}
          </Grid2>

          <Grid2
            sx={{
              display: "flex",
              flexDirection: "row",
              justifyContent: "flex-end", // This aligns the button to the right
              mt: "45px",
            }}
          >
            <Button
              onClick={handleStartSurvey}
              sx={{
                borderRadius: "32px",
                textTransform: "capitalize",
                justifyContent: "center",
                alignItems: "center",
                background:
                  "var(--grad-3, linear-gradient(102deg, #369D9C 0%, #28814D 100%))",
                padding: "11px 40px",
              }}
            >
              <Typography color="#fff" fontSize="14px" fontWeight="600">
                Submit Survey
              </Typography>
            </Button>
          </Grid2>
        </>
      ) : (
        <DecarbonizationSurveyQsnAns></DecarbonizationSurveyQsnAns>
      )}
    </>
  );
}

export default SurveyQuestionSection;

 
 <Button
                    key={i}
                    onClick={() => handleButtonClick(answer)}
                    sx={{
                      background:
                        selectedAnswer === answer
                          ? `var(--grad-3, linear-gradient(102deg, #369D9C 0%, #28814D 100%))`
                          : "#FFF",
                      color: selectedAnswer === answer ? "#FFF" : "#474747",
                      border:
                        selectedAnswer === answer
                          ? "none"
                          : "1px solid #369D9C",
                      padding: "6px 22px",
                      borderRadius: "32px",
                      textTransform: "capitalize",
                      transition: "background 0.3s ease",
                    }}
                  >
                    <Typography fontSize="14px" fontWeight="500">
                      {answer}
                    </Typography>
                  </Button>
 
<Button
                    key={i}
                    onClick={() => handleButtonClick(answer)}
                    sx={{
                      background:
                        selectedAnswer === answer ? `var(--grad-3)` : "#FFF",
                      color: selectedAnswer === answer ? "#FFF" : "#474747",
                      border:
                        selectedAnswer === answer
                          ? "none"
                          : "1px solid #369D9C",
                      padding: "6px 22px",
                      borderRadius: "32px",
                      textTransform: "capitalize",
                      transition: "background 0.3s ease",
                    }}
                  >
 
                  <Button
                    key={i}
                    onClick={() => handleButtonClick(answer)}
                    sx={{
                      background:
                        selectedAnswer === answer ? `var(--grad-3)` : "#FFF",
                      color: selectedAnswer === answer ? "#FFF" : "#474747",
                      border:
                        selectedAnswer === answer
                          ? "none"
                          : "1px solid #369D9C",
                      padding: "6px 22px",
                      borderRadius: "32px",
                      textTransform: "capitalize",
                      transition: "background 0.3s ease",
                    }}
                  >
 
 <Button
                    key={i}
                    onClick={() => handleButtonClick(answer)}
                    sx={{
                      background:
                        selectedAnswer === answer ? `var(--grad-3)` : "#FFF",
                      color: selectedAnswer === answer ? "#FFF" : "#474747",
                      border:
                        selectedAnswer === answer
                          ? "none"
                          : "1px solid #369D9C",
                      padding: "6px 22px",
                      borderRadius: "32px",
                      textTransform: "capitalize",
                      transition: "background 0.3s ease",
                    }}
                  >
 
 <Grid2
                sx={{
                  display: "flex",
                  flexDirection: "row",
                  gap: "8px",
                  mt: "10px",
                  ml: "16px",
                  mb: "12px",
                }}
              >
                {["Yes", "No", "N/A"].map((answer, i) => (
                  <Button
                    key={i}
                    onClick={() => handleButtonClick(answer)}
                    sx={{
                      background:
                        selectedAnswer === answer ? `var(--grad-3)` : "#FFF",
                      color: selectedAnswer === answer ? "#FFF" : "#474747",
                      border:
                        selectedAnswer === answer
                          ? "none"
                          : "1px solid #369D9C",
                      padding: "6px 22px",
                      borderRadius: "32px",
                      textTransform: "capitalize",
                      transition: "background 0.3s ease",
                    }}
                  >
                    <Typography fontSize="14px" fontWeight="500">
                      {answer}
                    </Typography>
                  </Button>
                ))}
              </Grid2>
 

  const [isSelected, setIsSelected] = useState(null);
 

  const handleButtonClick = (answer) => {
    onAnswerSelect(questionNumber, answer);
    setIsSelected(answer);
  };
 
 <Grid2
                sx={{
                  display: "flex",
                  flexDirection: "row",
                  gap: "8px",
                  mt: "10px",
                  ml: "16px",
                  mb: "12px",
                }}
              >
                {["Yes", "No", "N/A"].map((answer, i) => (
                  <Button
                    key={i}
                    onClick={() => handleButtonClick(answer)}
                    sx={{
                      background:
                        selectedAnswer === answer ? `var(--grad-3)` : "#FFF",
                      color: selectedAnswer === answer ? "#FFF" : "#474747",
                      border:
                        selectedAnswer === answer
                          ? "none"
                          : "1px solid #369D9C",
                      padding: "6px 22px",
                      borderRadius: "32px",
                      textTransform: "capitalize",
                      transition: "background 0.3s ease",
                    }}
                  >
                    <Typography fontSize="14px" fontWeight="500">
                      {answer}
                    </Typography>
                  </Button>
                ))}
              </Grid2>
 
<Button
                    key={i}
                    onClick={() => handleButtonClick(answer)}
                    sx={{
                      background:
                        selectedAnswer === answer
                          ? "linear-gradient(102deg, #369D9C 0%, #28814D 100%)"
                          : "#FFF",
                      color: selectedAnswer === answer ? "#FFF" : "#474747",
                      border:
                        selectedAnswer === answer
                          ? "none"
                          : "1px solid #369D9C",
                      padding: "6px 22px",
                      borderRadius: "32px",
                      textTransform: "capitalize",
                      transition: "background 0.3s ease",
                    }}
                  >
                    <Typography fontSize="14px" fontWeight="500">
                      {answer}
                    </Typography>
                  </Button>
 
<Button
                    key={i}
                    onClick={() => handleButtonClick(answer)}
                    sx={{
                      background: selectedAnswer === answer
                        ? "var(--grad-3, linear-gradient(102deg, #369D9C 0%, #28814D 100%))"
                        : "#FFF",
                      color: selectedAnswer === answer ? "#FFF" : "#474747",
                      border: selectedAnswer === answer ? "none" : "1px solid #369D9C",
                      padding: "6px 22px",
                      borderRadius: "32px",
                      textTransform: "capitalize",
                      transition: "background 0.3s ease", // Smooth transition effect
                    }}
                  >
                    <Typography fontSize="14px" fontWeight="500">
                      {answer}
                    </Typography>
                  </Button>
 
<Button
                    key={i}
                    onClick={() => handleButtonClick(answer)}
                    sx={{
                      background:
                        selectedAnswer === answer
                          ? "var(--grad-3, linear-gradient(102deg, #369D9C 0%, #28814D 100%))"
                          : "#FFF",
                      color: selectedAnswer === answer ? "#FFF" : "#474747",
                      border:
                        selectedAnswer === answer
                          ? "none"
                          : "1px solid #369D9C",
                      padding: "6px 22px",
                      borderRadius: "32px",
                      textTransform: "capitalize",
                    }}
                  >
 
 <Button
                    key={i}
                    onClick={() => handleButtonClick(answer)}
                    sx={{
                      background:
                        selectedAnswer === answer
                          ? "linear-gradient(102deg, #369D9C 0%, #28814D 100%)"
                          : "#FFF",
                      color: selectedAnswer === answer ? "#FFF" : "#474747",
                      border: selectedAnswer === answer ? "none" : "1px solid #369D9C",
                      padding: "6px 22px",
                      borderRadius: "32px",
                      textTransform: "capitalize",
                    }}
                  >
 
  selectedAnswer={selectedAnswers[q.id]}
                onAnswerSelect={handleAnswerSelect}
 
 const handleAnswerSelect = (questionNumber, answer) => {
    setSelectedAnswers(prevState => ({
      ...prevState,
      [questionNumber]: answer,
    }));
  };
 
 {questionText.map((q, index) => (
          <React.Fragment key={index}>
            {/* Question Text */}
            <Grid2
              sx={{
                display: "flex",
                flexDirection: "row",
                alignItems: "center",
                gap: "12px",
                ml: "15px",
              }}
            >
              <Box
                sx={{
                  width: "37px",
                  height: "34px",
                  backgroundColor: "#F7F7F7",
                  padding: "7px",
                  borderRadius: "6px",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                }}
              >
                <Typography color="#5B5B5B" fontSize="14px" fontWeight="400">
                  Q.{index + 1}
                </Typography>
              </Box>
              <Typography fontSize="14px" fontWeight="500" color="#000">
                {q}
              </Typography>
            </Grid2>

            {/* Buttons */}
            <Grid2
              sx={{
                borderTop: "1px solid #E4E4E4",
                borderBottom: "1px solid #E4E4E4",
              }}
            >
              <Grid2
                sx={{
                  display: "flex",
                  flexDirection: "row",
                  gap: "8px",
                  mt: "10px",
                  ml: "16px",
                  mb: "12px",
                }}
              >
                {["Yes", "No", "N/A"].map((answer, i) => (
                  <Button
                    key={i}
                    onClick={() => handleButtonClick(answer)}
                    sx={{
                      background:
                        selectedAnswer === answer
                          ? "linear-gradient(102deg, #369D9C 0%, #28814D 100%)"
                          : "#FFF",
                      color: selectedAnswer === answer ? "#FFF" : "#474747",
                      border: selectedAnswer === answer ? "none" : "1px solid #369D9C",
                      padding: "6px 22px",
                      borderRadius: "32px",
                      textTransform: "capitalize",
                    }}
                  >
                    <Typography fontSize="14px" fontWeight="500">
                      {answer}
                    </Typography>
                  </Button>
                ))}
              </Grid2>
            </Grid2>
          </React.Fragment>
        ))}
 

    console.log(handleButtonClick)
 
const handleButtonClick = (answer) => {
    
  };
 
  {questionText.map((q, index) => (
          <React.Fragment key={index}>
            {/* Question Text */}
            <Grid2
              sx={{
                display: "flex",
                flexDirection: "row",
                alignItems: "center",
                gap: "12px",
                ml: "15px",
              }}
            >
              <Box
                sx={{
                  width: "37px",
                  height: "34px",
                  backgroundColor: "#F7F7F7",
                  padding: "7px",
                  borderRadius: "6px",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                }}
              >
                <Typography color="#5B5B5B" fontSize="14px" fontWeight="400">
                  Q.{index + 1}
                </Typography>
              </Box>
              <Typography fontSize="14px" fontWeight="500" color="#000">
                {q}
              </Typography>
            </Grid2>

            {/* Buttons */}
            <Grid2
              sx={{
                borderTop: "1px solid #E4E4E4",
                borderBottom: "1px solid #E4E4E4",
              }}
            >
              <Grid2
                sx={{
                  display: "flex",
                  flexDirection: "row",
                  gap: "8px",
                  mt: "10px",
                  ml: "16px",
                  mb: "12px",
                }}
              >
                {["Yes", "No", "N/A"].map((answer, i) => (
                  <Button
                    key={i}
                    sx={{
                      background:
                        answer === "Yes"
                          ? "linear-gradient(102deg, #369D9C 0%, #28814D 100%)"
                          : "#FFF",
                      color: answer === "Yes" ? "#FFF" : "#474747",
                      border: answer === "Yes" ? "none" : "1px solid #369D9C",
                      padding: "6px 22px",
                      borderRadius: "32px",
                      textTransform: "capitalize",
                    }}
                  >
                    <Typography fontSize="14px" fontWeight="500">
                      {answer}
                    </Typography>
                  </Button>
                ))}
              </Grid2>
            </Grid2>
          </React.Fragment>
        ))}
 
 selectedAnswers, onAnswerSelect
 
  const [selectedAnswers, setSelectedAnswers] = useState({});

  const handleButtonClick = (questionId, answer) => {
    setSelectedAnswers(prevState => ({
      ...prevState,
      [questionId]: answer,
    }));
  };
 
  {questionText.map((q, index) => (
          <React.Fragment key={index}>
            {/* Question Text */}
            <Grid2
              sx={{
                display: "flex",
                flexDirection: "row",
                alignItems: "center",
                gap: "12px",
                ml: "15px",
              }}
            >
              <Box
                sx={{
                  width: "37px",
                  height: "34px",
                  backgroundColor: "#F7F7F7",
                  padding: "7px",
                  borderRadius: "6px",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                }}
              >
                <Typography color="#5B5B5B" fontSize="14px" fontWeight="400">
                  Q.{index + 1}
                </Typography>
              </Box>
              <Typography fontSize="14px" fontWeight="500" color="#000">
                {q}
              </Typography>
            </Grid2>

            {/* Buttons */}
            <Grid2
              sx={{
                borderTop: "1px solid #E4E4E4",
                borderBottom: "1px solid #E4E4E4",
              }}
            >
              <Grid2
                sx={{
                  display: "flex",
                  flexDirection: "row",
                  gap: "8px",
                  mt: "10px",
                  ml: "16px",
                  mb: "12px",
                }}
              >
                {["Yes", "No", "N/A"].map((answer, i) => (
                  <Button
                    key={i}
                    sx={{
                      background:
                        answer === "Yes"
                          ? "linear-gradient(102deg, #369D9C 0%, #28814D 100%)"
                          : "#FFF",
                      color: answer === "Yes" ? "#FFF" : "#474747",
                      border: answer === "Yes" ? "none" : "1px solid #369D9C",
                      padding: "6px 22px",
                      borderRadius: "32px",
                      textTransform: "capitalize",
                    }}
                  >
                    <Typography fontSize="14px" fontWeight="500">
                      {answer}
                    </Typography>
                  </Button>
                ))}
              </Grid2>
            </Grid2>
          </React.Fragment>
        ))}
 
selectedAnswers, onAnswerSelect
 
  const [selectedAnswers, setSelectedAnswers] = useState({});

  const handleButtonClick = (questionId, answer) => {
    setSelectedAnswers(prevState => ({
      ...prevState,
      [questionId]: answer,
    }));
  };
 
selectedAnswers, onAnswerSelect,
 
 const [selectedAnswers, setSelectedAnswers] = useState({});

  const handleButtonClick = (questionId, answer) => {
    setSelectedAnswers(prevState => ({
      ...prevState,
      [questionId]: answer,
    }));
  };
 

// Main Component
function SurveyQuestionSection() {
  const [surveyStarted, setSurveyStarted] = useState(false);
  const [selectedAnswers, setSelectedAnswers] = useState({});

  const handleStartSurvey = () => {
    setSurveyStarted(true);
  };
  const handleAnswerSelect = (questionNumber, answer) => {
    setSelectedAnswers(prevState => ({
      ...prevState,
      [questionNumber]: answer,
    }));
  };
  
  // Example questions array with logos and headings
  const questions = [
    {
      id: 1,
      text: [
        "Do you have all motors with efficiency classification IE3 & IE4?",
      ],
      logo: ac_motors_logo, // Replace with your actual logo path
      heading: "Industrial AC Motors", // Pass the heading here
    },
    {
      id: 2,
      text: [
        "Have you involved a specialist in the selection of the pump sizing?",
        "Are bypass valves and valve throttling being eliminated in all retrofitting projects?",
      ],
      logo: pump2, // Replace with your logo path
      heading: "Energy Compliance", // Example heading
    },
    {
      id: 3,
      text: [
        "Have you involved a specialist in the selection of the fan sizing?",
        "Does the fan comply with a Fan Efficiency Grade (FEG) of 85% or higher?",
      ],
      logo: wind, // Replace with your logo path
      heading: "Compressed Air System", // Example heading
    },
    {
      id: 4,
      text: [
        "Has a high-efficiency boiler been selected for all the plant process?",
        "Is are all the boiler equipped with a smart control system to optimize operational efficiency?",
      ],
      logo: boiler, // Replace with your logo path
      heading: "Industrial Boilers", // Example heading
    },
    {
      id: 5,
      text: [
        "Have you assessed the insulation level of the steam distribution system to ensure it is sufficient to minimize heat loss to the environment?",
      ],
      logo: boiler, // Replace with your logo path
      heading: "Steam Distribution System", // Example heading
    },
    {
      id: 6,
      text: [
        "Have you considered selecting an energy-efficient chiller for all the plant?",
      ],
      logo: tempreture, // Replace with your logo path
      heading: "Industrial Chiller System", // Example heading
    },
    {
      id: 7,
      text: [
        "Has the insulation level of the chilled water distribution system been assessed to ensure it is sufficient to minimize energy loss?",
      ],
      logo: snowflakes, // Replace with your logo path
      heading: "Chilled Water Distribution System", // Example heading
    },
    {
      id: 8,
      text: [
        "Has the insulation level of the chilled water distribution system been assessed to ensure it is sufficient to minimize energy loss?",
        "Has the system been designed to minimize pumping losses by reducing or eliminating bypass/re-circulation?",
      ],
      logo: snowflakes,
      heading: "Chilled Water Distribution System",
    },
    {
      id: 9,
      text: [
        "Has a high-efficiency condenser suitable for the plant been selected?",
      ],
      logo: warehouse,
      heading: "Refrigerated Storage Area",
    },
    {
      id: 10,
      text: [
        "Has the electrical system been designed to incorporate control measures?",
      ],
      logo: bolt,
      heading: "Power Quality",
    },
    {
      id: 11,
      text: [
        "Has the design process considered identifying and evaluating potential waste heat recovery systems based on the waste heat generated during the process?",
      ],
      logo: tempreture,
      heading: "Power Quality",
    },
    {
      id: 12,
      text: [
        "Has the design process considered identifying and evaluating potential waste heat recovery systems based on the waste heat generated during the process?",
        "Are all the sub-meters labeled for easy identification and tracking of energy consumption?",
      ],
      logo: r_bin,
      heading: "Process Energy Sub-Metering",
    },
    {
      id: 13,
      text: [
        "Has the development team considered improving the energy efficiency of the buildings envelope?",
      ],
      logo: r_bin,
      heading: "Energy Conservation Techniques and Thermal Insulation (Applicable for both Air-conditioned and Non-Air-Conditioned buildings)",
    },
    {
      id: 14,
      text: [
        "Has interior thermal imaging been conducted for air-conditioned/climate-controlled spaces to identify potential building defects?",
        "If leaks or gaps were identified, have appropriate corrective actions been taken to address them?",
        "Have the tests and reports been conducted in compliance with the specified conditions?",
      ],
      logo: snow_blowing,
      heading: "Envelope Tightness for Air-Conditioned Spaces - Thermal Imaging Technique",
    },
    {
      id: 15,
      text: [
        "Has the industrial facility/warehouse been assessed for envelope airtightness, and have measures been taken to identify and address any defects or leakages?",
      ],
      logo: meter_bolt,
      heading: "Envelope Tightness for Air-Conditioned Spaces - Thermal Imaging Technique",
    },
    {
      id: 16,
      text: [
        "Have you evaluated the potential impact of different HVAC systems on energy efficiency and operating costs to inform your selection?",
      ],
      logo: calculator_bill,
      heading: "Optimal System Sizing - HVAC",
    },
    {
      id: 17,
      text: [
        "Have you considered incorporating design strategies to utilize Energy Recovery Units (ERUs) in the plant?",
      ],
      logo: hand_holding,
      heading: "Installation of Energy Recovery Units and regulated air intake system",
    },
    {
      id: 18,
      text: [
        "Have you confirmed that the energy-efficient cooling equipment to be procured and installed is consistent with the capacities specified in the 'Optimal System Sizing - HVAC' section?",
      ],
      logo: hand_holding,
      heading: "Selection of Cooling Equipment with High Energy Efficiency Ratio (EER)",
    },
    {
      id: 19,
      text: [
        "Have you considered incorporating the necessary strategies into the HVAC system design to ensure efficient control and operation of the units?",
      ],
      logo: snowflakes,
      heading: "Programmable thermostats and CO2 Sensors for HVAC system",
    },
    {
      id: 20,
      text: [
        "Have you considered conducting a feasibility study to explore the potential of generating renewable power on-site?",
      ],
      logo: solarpanel_1,
      heading: "Onsite Renewable Energy Generation",
    },
    {
      id: 21,
      text: [
        "Have you explored the possibility of incorporating daylighting technologies into the industrial design?",
      ],
      logo: lightSelling,
      heading: "General Plant Lighting - Use of Solar Daylighting Technologies",
    },
  ];
  

  return (
    <>
      {!surveyStarted ? (
        <>
          <Grid2 sx={{ display: "flex", flexDirection: "column", gap: "20px" }}>
            {questions.map((q) => (
              <Question
                key={q.number}
                questionNumber={q.number}
                questionText={q.text}
                logo={q.logo}
                heading={q.heading}
                selectedAnswers={selectedAnswers}
                onAnswerSelect={handleAnswerSelect}
              />
            ))}
          </Grid2>

          <Grid2
            sx={{
              display: "flex",
              flexDirection: "row",
              justifyContent: "flex-end", // This aligns the button to the right
              mt: "45px",
            }}
          >
            <Button
              onClick={handleStartSurvey}
              sx={{
                borderRadius: "32px",
                textTransform: "capitalize",
                justifyContent: "center",
                alignItems: "center",
                background:
                  "var(--grad-3, linear-gradient(102deg, #369D9C 0%, #28814D 100%))",
                padding: "11px 40px",
              }}
            >
              <Typography color="#fff" fontSize="14px" fontWeight="600">
                Submit Survey
              </Typography>
            </Button>
          </Grid2>
        </>
      ) : (
        <DecarbonizationSurveyQsnAns></DecarbonizationSurveyQsnAns>
      )}
    </>
  );
}

export default SurveyQuestionSection;
 
const Question = ({ selectedAnswers, onAnswerSelect,questionNumber, questionText, logo, heading }) => {
 
  };
  return (
    <Grid2
      sx={{
        flexDirection: "column",
        display: "flex",
        border: "1px solid #E4E4E4",
        borderRadius: "5px",
        borderTop: "3px solid #369D9C",
        gap: "20px",
      }}
    >
      <Paper
        sx={{
          display: "flex",
          flexDirection: "column",
          gap: "15px",
        }}
      >
        {/* Heading Section */}
        <Grid2
          sx={{
            display: "flex",
            flexDirection: "row",
            gap: "12px",
            mt: "16px",
            ml: "16px",
            alignItems: "center",
          }}
        >
          {logo && <img src={logo} alt="logo" width="18px" />}
          <Typography fontSize="16px" fontWeight="600" color="#000">
            {heading}
          </Typography>
        </Grid2>

        {/* Questions and Buttons */}
        {questionText.map((q, index) => (
          <React.Fragment key={index}>
            {/* Question Text */}
            <Grid2
              sx={{
                display: "flex",
                flexDirection: "row",
                alignItems: "center",
                gap: "12px",
                ml: "15px",
              }}
            >
              <Box
                sx={{
                  width: "37px",
                  height: "34px",
                  backgroundColor: "#F7F7F7",
                  padding: "7px",
                  borderRadius: "6px",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                }}
              >
                <Typography color="#5B5B5B" fontSize="14px" fontWeight="400">
                  Q.{index + 1}
                </Typography>
              </Box>
              <Typography fontSize="14px" fontWeight="500" color="#000">
                {q}
              </Typography>
            </Grid2>

            {/* Buttons */}
            <Grid2
              sx={{
                borderTop: "1px solid #E4E4E4",
                borderBottom: "1px solid #E4E4E4",
              }}
            >
              <Grid2
                sx={{
                  display: "flex",
                  flexDirection: "row",
                  gap: "8px",
                  mt: "10px",
                  ml: "16px",
                  mb: "12px",
                }}
              >
                {["Yes", "No", "N/A"].map((answer, i) => (
                  <Button
                    key={i}
                    onClick={() => onAnswerSelect(questionNumber, answer)}
                    sx={{
                      background:
                        selectedAnswers[questionNumber] === answer
                          ? "linear-gradient(102deg, #369D9C 0%, #28814D 100%)"
                          : "#FFF",
                      color: selectedAnswers[questionNumber] === answer ? "#FFF" : "#474747",
                      border: selectedAnswers[questionNumber] === answer ? "none" : "1px solid #369D9C",
                      padding: "6px 22px",
                      borderRadius: "32px",
                      textTransform: "capitalize",
                    }}
                  >
                    <Typography fontSize="14px" fontWeight="500">
                      {answer}
                    </Typography>
                  </Button>
                ))}
              </Grid2>
            </Grid2>
          </React.Fragment>
        ))}
      </Paper>
    </Grid2>
  );
};
 
 const [selectedAnswers, setSelectedAnswers] = useState({});

  const handleButtonClick = (questionId, answer) => {
    setSelectedAnswers(prevState => ({
      ...prevState,
      [questionId]: answer,
    }));
 

            <Grid2
              sx={{
                borderTop: "1px solid #E4E4E4",
                borderBottom: "1px solid #E4E4E4",
              }}
            >
              <Grid2
                sx={{
                  display: "flex",
                  flexDirection: "row",
                  gap: "8px",
                  mt: "10px",
                  ml: "16px",
                  mb: "12px",
                }}
              >
                {["Yes", "No", "N/A"].map((answer, i) => (
                  <Button
                    key={i}
                    sx={{
                      background:
                        answer === "Yes"
                          ? "linear-gradient(102deg, #369D9C 0%, #28814D 100%)"
                          : "#FFF",
                      color: answer === "Yes" ? "#FFF" : "#474747",
                      border: answer === "Yes" ? "none" : "1px solid #369D9C",
                      padding: "6px 22px",
                      borderRadius: "32px",
                      textTransform: "capitalize",
                    }}
                  >
                    <Typography fontSize="14px" fontWeight="500">
                      {answer}
                    </Typography>
                  </Button>
                ))}
              </Grid2>
            </Grid2>
 
<Grid2
              sx={{
                borderTop: "1px solid #E4E4E4",
                borderBottom: "1px solid #E4E4E4",
              }}
            >
              <Grid2
                sx={{
                  display: "flex",
                  flexDirection: "row",
                  gap: "8px",
                  mt: "10px",
                  ml: "16px",
                  mb: "12px",
                }}
              >
                {["Yes", "No", "N/A"].map((answer, i) => (
                  <Button
                    key={i}
                    sx={{
                      background:
                        answer === "Yes"
                          ? "linear-gradient(102deg, #369D9C 0%, #28814D 100%)"
                          : "#FFF",
                      color: answer === "Yes" ? "#FFF" : "#474747",
                      border: answer === "Yes" ? "none" : "1px solid #369D9C",
                      padding: "6px 22px",
                      borderRadius: "32px",
                      textTransform: "capitalize",
                    }}
                  >
                    <Typography fontSize="14px" fontWeight="500">
                      {answer}
                    </Typography>
                  </Button>
                ))}
              </Grid2>
            </Grid2>
 
const questions = [
    {
      number: 1,
      text: [
        "Do you have all motors with efficiency classification IE3 & IE4?",
      ],
      logo: ac_motors_logo, // Replace with your actual logo path
      heading: "Industrial AC Motors", // Pass the heading here
    },
    {
      number: 2,
      text: [
        "Have you involved a specialist in the selection of the pump sizing?",
        "Are bypass valves and valve throttling being eliminated in all retrofitting projects?",
      ],
      logo: pump2, // Replace with your logo path
      heading: "Energy Compliance", // Example heading
    },
    {
      number: 3,
      text: [
        "Have you involved a specialist in the selection of the fan sizing?",
        "Does the fan comply with a Fan Efficiency Grade (FEG) of 85% or higher?",
      ],
      logo: wind, // Replace with your logo path
      heading: "Compressed Air System", // Example heading
    },
    {
      number: 4,
      text: [
        "Has a high-efficiency boiler been selected for all the plant process?",
        "Is are all the boiler equipped with a smart control system to optimize operational efficiency?",
      ],
      logo: boiler, // Replace with your logo path
      heading: "Industrial Boilers", // Example heading
    },
    {
      number: 5,
      text: [
        "Have you assessed the insulation level of the steam distribution system to ensure it is sufficient to minimize heat loss to the environment?",
      ],
      logo: boiler, // Replace with your logo path
      heading: "Steam Distribution System", // Example heading
    },
    {
      number: 6,
      text: [
        "Have you considered selecting an energy-efficient chiller for all the plant?",
      ],
      logo: tempreture, // Replace with your logo path
      heading: "Industrial Chiller System", // Example heading
    },
    {
      number: 7,
      text: [
        "Has the insulation level of the chilled water distribution system been assessed to ensure it is sufficient to minimize energy loss?",
      ],
      logo: snowflakes, // Replace with your logo path
      heading: "Chilled Water Distribution System", // Example heading
    },
    {
      number: 8,
      text: [
        "Has the insulation level of the chilled water distribution system been assessed to ensure it is sufficient to minimize energy loss?",
        "Has the system been designed to minimize pumping losses by reducing or eliminating bypass/re-circulation?",
      ],
      logo: snowflakes,
      heading: "Chilled Water Distribution System",
    },
    {
      number: 9,
      text: [
        "Has a high-efficiency condenser suitable for the plant been selected?",
      ],
      logo: warehouse,
      heading: "Refrigerated Storage Area",
    },
    {
      number: 10,
      text: [
        "Has the electrical system been designed to incorporate control measures?",
      ],
      logo: bolt,
      heading: "Power Quality",
    },
    {
      number: 11,
      text: [
        "Has the design process considered identifying and evaluating potential waste heat recovery systems based on the waste heat generated during the process?",
      ],
      logo: tempreture,
      heading: "Power Quality",
    },
    {
      number: 11,
      text: [
        "Has the design process considered identifying and evaluating potential waste heat recovery systems based on the waste heat generated during the process?",
        "Are all the sub-meters labeled for easy identification and tracking of energy consumption?",
      ],
      logo: r_bin,
      heading: "Process Energy Sub-Metering",
    },
    {
      number: 12,
      text: [
        "Has the development team considered improving the energy efficiency of the buildings envelope?",
      ],
      logo: r_bin,
      heading:
        "Energy Conservation Techniques and Thermal Insulation (Applicable for both Air-conditioned and Non-Air-Conditioned buildings)",
    },
    {
      number: 13,
      text: [
        "Has interior thermal imaging been conducted for air-conditioned/climate-controlled spaces to identify potential building defects?",
        "If leaks or gaps were identified, have appropriate corrective actions been taken to address them?",
        "Have the tests and reports been conducted in compliance with the specified conditions?",
      ],
      logo: snow_blowing,
      heading:
        "Envelope Tightness for Air-Conditioned Spaces - Thermal Imaging Technique",
    },
    {
      number: 14,
      text: [
        "Has the industrial facility/warehouse been assessed for envelope airtightness, and have measures been taken to identify and address any defects or leakages?",
      ],
      logo: meter_bolt,
      heading:
        "Envelope Tightness for Air-Conditioned Spaces - Thermal Imaging Technique",
    },
    {
      number: 15,
      text: [
        "Have you evaluated the potential impact of different HVAC systems on energy efficiency and operating costs to inform your selection?",
      ],
      logo: calculator_bill,
      heading: "Optimal System Sizing - HVAC",
    },
    {
      number: 17,
      text: [
        "Have you considered incorporating design strategies to utilize Energy Recovery Units (ERUs) in the plant?",
      ],
      logo: hand_holding,
      heading:
        "Installation of Energy Recovery Units and regulated air intake system",
    },
    {
      number: 18,
      text: [
        'Have you confirmed that the energy-efficient cooling equipment to be procured and installed is consistent with the capacities specified in the "Optimal System Sizing - HVAC section?',
      ],
      logo: hand_holding,
      heading:
        "Selection of Cooling Equipment with High Energy Efficiency Ratio (EER)",
    },
    {
      number: 19,
      text: [
        "Have you considered incorporating the necessary strategies into the HVAC system design to ensure efficient control and operation of the units?",
      ],
      logo: snowflakes,
      heading: "Programmable thermostats and CO2 Sensors for HVAC system",
    },
    {
      number: 19,
      text: [
        "Have you considered incorporating the necessary strategies into the HVAC system design to ensure efficient control and operation of the units?",
      ],
      logo: smoke,
      heading: "Programmable thermostats and CO2 Sensors for HVAC system",
    },
    {
      number: 120,
      text: [
        "Have you considered ways to improve interior lighting levels while ensuring they do not exceed the limits",
      ],
      logo: lightbulb,
      heading: "Light Power Density - Interior",
    },
    {
      number: 12,
      text: [
        "Have you considered selecting internal lighting systems that offer flexible control options",
      ],
      logo: insight,
      heading:
        "Automated lighting control / motion sensor for internal lighting",
    },
    {
      number: 15,
      text: [
        "Have you confirmed that the exterior lighting levels have been improved and do not exceed the specified limits?",
      ],
      logo: ideaChange,
      heading: "Exterior Light Power Density",
    },
    {
      number: 16,
      text: [
        "Have you confirmed that the external lighting systems incorporate strategies to switch on/off based on specific needs or timings?",
      ],
      logo: lightBulbSetting,
      heading: "Control of External lights",
    },
    {
      number: 16,
      text: [
        "Has the feasibility of a solar thermal hot water system been assessed, and has the potential reduction in CO2 emissions been estimated?",
      ],
      logo: solar_panel,
      heading: "Renewable Power Source - Industrial hot water",
    },
    {
      number: 18,
      text: [
        "Have you considered conducting a feasibility study to explore the potential of generating renewable power on-site?",
      ],
      logo: solarpanel_1,
      heading: "Onsite Renewable Energy Generation",
    },
    {
      number: 20,
      text: [
        "Have you explored the possibility of incorporating daylighting technologies into the industrial design?",
      ],
      logo: lightSelling,
      heading: "General Plant Lighting - Use of Solar Daylighting Technologies",
    },
  ];
 
   {questionText.map((q, index) => (
          <React.Fragment key={index}>
            {/* Question Text */}
            <Grid2
              sx={{
                display: "flex",
                flexDirection: "row",
                alignItems: "center",
                gap: "12px",
                ml: "15px",
              }}
            >
              <Box
                sx={{
                  width: "37px",
                  height: "34px",
                  backgroundColor: "#F7F7F7",
                  padding: "7px",
                  borderRadius: "6px",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                }}
              >
                <Typography color="#5B5B5B" fontSize="14px" fontWeight="400">
                  Q.{index + 1}
                </Typography>
              </Box>
              <Typography fontSize="14px" fontWeight="500" color="#000">
                {q}
              </Typography>
            </Grid2>

            {/* Buttons */}
            <Grid2
      sx={{
        borderTop: "1px solid #E4E4E4",
        borderBottom: "1px solid #E4E4E4",
      }}
    >
      <Grid2
        sx={{
          display: "flex",
          flexDirection: "row",
          gap: "8px",
          mt: "10px",
          ml: "16px",
          mb: "12px",
        }}
      >
        {["Yes", "No", "N/A"].map((answer, i) => (
          <Button
            key={i}
            onClick={() => handleButtonClick(answer)} // Button pe click karne par state update hogi
            sx={{
              background:
                selectedAnswer === answer
                  ? "linear-gradient(102deg, #369D9C 0%, #28814D 100%)"
                  : "#FFF",
              color: selectedAnswer === answer ? "#FFF" : "#474747",
              border: selectedAnswer === answer ? "none" : "1px solid #369D9C",
              padding: "6px 22px",
              borderRadius: "32px",
              textTransform: "capitalize",
            }}
          >
            <Typography fontSize="14px" fontWeight="500">
              {answer}
            </Typography>
          </Button>
        ))}
      </Grid2>
    </Grid2>
          </React.Fragment>
        ))}
 
{questionText.map((q, index) => (
          <React.Fragment key={index}>
            {/* Question Text */}
            <Grid2
              sx={{
                display: "flex",
                flexDirection: "row",
                alignItems: "center",
                gap: "12px",
                ml: "15px",
              }}
            >
              <Box
                sx={{
                  width: "37px",
                  height: "34px",
                  backgroundColor: "#F7F7F7",
                  padding: "7px",
                  borderRadius: "6px",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                }}
              >
                <Typography color="#5B5B5B" fontSize="14px" fontWeight="400">
                  Q.{index + 1}
                </Typography>
              </Box>
              <Typography fontSize="14px" fontWeight="500" color="#000">
                {q}
              </Typography>
            </Grid2>

            {/* Buttons */}
            <Grid2
      sx={{
        borderTop: "1px solid #E4E4E4",
        borderBottom: "1px solid #E4E4E4",
      }}
    >
      <Grid2
        sx={{
          display: "flex",
          flexDirection: "row",
          gap: "8px",
          mt: "10px",
          ml: "16px",
          mb: "12px",
        }}
      >
        {["Yes", "No", "N/A"].map((answer, i) => (
          <Button
            key={i}
            onClick={() => handleButtonClick(answer)} // Button pe click karne par state update hogi
            sx={{
              background:
                selectedAnswer === answer
                  ? "linear-gradient(102deg, #369D9C 0%, #28814D 100%)"
                  : "#FFF",
              color: selectedAnswer === answer ? "#FFF" : "#474747",
              border: selectedAnswer === answer ? "none" : "1px solid #369D9C",
              padding: "6px 22px",
              borderRadius: "32px",
              textTransform: "capitalize",
            }}
          >
            <Typography fontSize="14px" fontWeight="500">
              {answer}
            </Typography>
          </Button>
        ))}
      </Grid2>
    </Grid2>
          </React.Fragment>
        ))}
 

  const [surveyStarted, setSurveyStarted] = useState(false);

  const handleStartSurvey = () => {
    setSurveyStarted(true);
  };
 
  const questions = [
    {
      number: 1,
      text: [
        "Do you have all motors with efficiency classification IE3 & IE4?",
      ],
      logo: ac_motors_logo, // Replace with your actual logo path
      heading: "Industrial AC Motors", // Pass the heading here
    },
    {
      number: 2,
      text: [
        "Have you involved a specialist in the selection of the pump sizing?",
        "Are bypass valves and valve throttling being eliminated in all retrofitting projects?",
      ],
      logo: pump2, // Replace with your logo path
      heading: "Energy Compliance", // Example heading
    },
    {
      number: 3,
      text: [
        "Have you involved a specialist in the selection of the fan sizing?",
        "Does the fan comply with a Fan Efficiency Grade (FEG) of 85% or higher?",
      ],
      logo: wind, // Replace with your logo path
      heading: "Compressed Air System", // Example heading
    },
    {
      number: 4,
      text: [
        "Has a high-efficiency boiler been selected for all the plant process?",
        "Is are all the boiler equipped with a smart control system to optimize operational efficiency?",
      ],
      logo: boiler, // Replace with your logo path
      heading: "Industrial Boilers", // Example heading
    },
    {
      number: 5,
      text: [
        "Have you assessed the insulation level of the steam distribution system to ensure it is sufficient to minimize heat loss to the environment?",
      ],
      logo: boiler, // Replace with your logo path
      heading: "Steam Distribution System", // Example heading
    },
    {
      number: 6,
      text: [
        "Have you considered selecting an energy-efficient chiller for all the plant?",
      ],
      logo: tempreture, // Replace with your logo path
      heading: "Industrial Chiller System", // Example heading
    },
    {
      number: 7,
      text: [
        "Has the insulation level of the chilled water distribution system been assessed to ensure it is sufficient to minimize energy loss?",
      ],
      logo: snowflakes, // Replace with your logo path
      heading: "Chilled Water Distribution System", // Example heading
    },
    {
      number: 8,
      text: [
        "Has the insulation level of the chilled water distribution system been assessed to ensure it is sufficient to minimize energy loss?",
        "Has the system been designed to minimize pumping losses by reducing or eliminating bypass/re-circulation?",
      ],
      logo: snowflakes,
      heading: "Chilled Water Distribution System",
    },
    {
      number: 9,
      text: [
        "Has a high-efficiency condenser suitable for the plant been selected?",
      ],
      logo: warehouse,
      heading: "Refrigerated Storage Area",
    },
    {
      number: 10,
      text: [
        "Has the electrical system been designed to incorporate control measures?",
      ],
      logo: bolt,
      heading: "Power Quality",
    },
    {
      number: 11,
      text: [
        "Has the design process considered identifying and evaluating potential waste heat recovery systems based on the waste heat generated during the process?",
      ],
      logo: tempreture,
      heading: "Power Quality",
    },
    {
      number: 11,
      text: [
        "Has the design process considered identifying and evaluating potential waste heat recovery systems based on the waste heat generated during the process?",
        "Are all the sub-meters labeled for easy identification and tracking of energy consumption?",
      ],
      logo: r_bin,
      heading: "Process Energy Sub-Metering",
    },
    {
      number: 12,
      text: [
        "Has the development team considered improving the energy efficiency of the buildings envelope?",
      ],
      logo: r_bin,
      heading:
        "Energy Conservation Techniques and Thermal Insulation (Applicable for both Air-conditioned and Non-Air-Conditioned buildings)",
    },
    {
      number: 13,
      text: [
        "Has interior thermal imaging been conducted for air-conditioned/climate-controlled spaces to identify potential building defects?",
        "If leaks or gaps were identified, have appropriate corrective actions been taken to address them?",
        "Have the tests and reports been conducted in compliance with the specified conditions?",
      ],
      logo: snow_blowing,
      heading:
        "Envelope Tightness for Air-Conditioned Spaces - Thermal Imaging Technique",
    },
    {
      number: 14,
      text: [
        "Has the industrial facility/warehouse been assessed for envelope airtightness, and have measures been taken to identify and address any defects or leakages?",
      ],
      logo: meter_bolt,
      heading:
        "Envelope Tightness for Air-Conditioned Spaces - Thermal Imaging Technique",
    },
    {
      number: 15,
      text: [
        "Have you evaluated the potential impact of different HVAC systems on energy efficiency and operating costs to inform your selection?",
      ],
      logo: calculator_bill,
      heading: "Optimal System Sizing - HVAC",
    },
    {
      number: 17,
      text: [
        "Have you considered incorporating design strategies to utilize Energy Recovery Units (ERUs) in the plant?",
      ],
      logo: hand_holding,
      heading:
        "Installation of Energy Recovery Units and regulated air intake system",
    },
    {
      number: 18,
      text: [
        'Have you confirmed that the energy-efficient cooling equipment to be procured and installed is consistent with the capacities specified in the "Optimal System Sizing - HVAC section?',
      ],
      logo: hand_holding,
      heading:
        "Selection of Cooling Equipment with High Energy Efficiency Ratio (EER)",
    },
    {
      number: 19,
      text: [
        "Have you considered incorporating the necessary strategies into the HVAC system design to ensure efficient control and operation of the units?",
      ],
      logo: snowflakes,
      heading: "Programmable thermostats and CO2 Sensors for HVAC system",
    },
    {
      number: 19,
      text: [
        "Have you considered incorporating the necessary strategies into the HVAC system design to ensure efficient control and operation of the units?",
      ],
      logo: smoke,
      heading: "Programmable thermostats and CO2 Sensors for HVAC system",
    },
    {
      number: 120,
      text: [
        "Have you considered ways to improve interior lighting levels while ensuring they do not exceed the limits",
      ],
      logo: lightbulb,
      heading: "Light Power Density - Interior",
    },
    {
      number: 12,
      text: [
        "Have you considered selecting internal lighting systems that offer flexible control options",
      ],
      logo: insight,
      heading:
        "Automated lighting control / motion sensor for internal lighting",
    },
    {
      number: 15,
      text: [
        "Have you confirmed that the exterior lighting levels have been improved and do not exceed the specified limits?",
      ],
      logo: ideaChange,
      heading: "Exterior Light Power Density",
    },
    {
      number: 16,
      text: [
        "Have you confirmed that the external lighting systems incorporate strategies to switch on/off based on specific needs or timings?",
      ],
      logo: lightBulbSetting,
      heading: "Control of External lights",
    },
    {
      number: 16,
      text: [
        "Has the feasibility of a solar thermal hot water system been assessed, and has the potential reduction in CO2 emissions been estimated?",
      ],
      logo: solar_panel,
      heading: "Renewable Power Source - Industrial hot water",
    },
    {
      number: 18,
      text: [
        "Have you considered conducting a feasibility study to explore the potential of generating renewable power on-site?",
      ],
      logo: solarpanel_1,
      heading: "Onsite Renewable Energy Generation",
    },
    {
      number: 20,
      text: [
        "Have you explored the possibility of incorporating daylighting technologies into the industrial design?",
      ],
      logo: lightSelling,
      heading: "General Plant Lighting - Use of Solar Daylighting Technologies",
    },
  ];
 

  const [selectedAnswer, setSelectedAnswer] = useState(null);

  // Button pe click karne par state update hoti hai
  const handleButtonClick = (answer) => {
    setSelectedAnswer(answer);
  };
 
<Grid2
              sx={{
                borderTop: "1px solid #E4E4E4",
                borderBottom: "1px solid #E4E4E4",
              }}
            >
              <Grid2
                sx={{
                  display: "flex",
                  flexDirection: "row",
                  gap: "8px",
                  mt: "10px",
                  ml: "16px",
                  mb: "12px",
                }}
              >
                {["Yes", "No", "N/A"].map((answer, i) => (
                  <Button
                    key={i}
                    sx={{
                      background:
                        answer === "Yes"
                          ? "linear-gradient(102deg, #369D9C 0%, #28814D 100%)"
                          : "#FFF",
                      color: answer === "Yes" ? "#FFF" : "#474747",
                      border: answer === "Yes" ? "none" : "1px solid #369D9C",
                      padding: "6px 22px",
                      borderRadius: "32px",
                      textTransform: "capitalize",
                    }}
                  >
                    <Typography fontSize="14px" fontWeight="500">
                      {answer}
                    </Typography>
                  </Button>
                ))}
              </Grid2>
            </Grid2>
 

import React, { useState } from "react";
import { Box, Grid2, Paper, Typography, Button } from "@mui/material";
 

const Question = ({ questionNumber, questionText, logo, heading }) => {
  return (
    <Grid2
      sx={{
        flexDirection: "column",
        display: "flex",
        border: "1px solid #E4E4E4",
        borderRadius: "5px",
        borderTop: "3px solid #369D9C",
        gap: "20px",
      }}
    >
      <Paper
        sx={{
          display: "flex",
          flexDirection: "column",
          gap: "15px",
        }}
      >
        {/* Heading Section */}
        <Grid2
          sx={{
            display: "flex",
            flexDirection: "row",
            gap: "12px",
            mt: "16px",
            ml: "16px",
            alignItems: "center",
          }}
        >
          {logo && <img src={logo} alt="logo" width="18px" />}
          <Typography fontSize="16px" fontWeight="600" color="#000">
            {heading}
          </Typography>
        </Grid2>

        {/* Questions and Buttons */}
        {questionText.map((q, index) => (
          <React.Fragment key={index}>
            {/* Question Text */}
            <Grid2
              sx={{
                display: "flex",
                flexDirection: "row",
                alignItems: "center",
                gap: "12px",
                ml: "15px",
              }}
            >
              <Box
                sx={{
                  width: "37px",
                  height: "34px",
                  backgroundColor: "#F7F7F7",
                  padding: "7px",
                  borderRadius: "6px",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                }}
              >
                <Typography color="#5B5B5B" fontSize="14px" fontWeight="400">
                  Q.{index + 1}
                </Typography>
              </Box>
              <Typography fontSize="14px" fontWeight="500" color="#000">
                {q}
              </Typography>
            </Grid2>

            {/* Buttons */}
            <Grid2
              sx={{
                borderTop: "1px solid #E4E4E4",
                borderBottom: "1px solid #E4E4E4",
              }}
            >
              <Grid2
                sx={{
                  display: "flex",
                  flexDirection: "row",
                  gap: "8px",
                  mt: "10px",
                  ml: "16px",
                  mb: "12px",
                }}
              >
                {["Yes", "No", "N/A"].map((answer, i) => (
                  <Button
                    key={i}
                    sx={{
                      background:
                        answer === "Yes"
                          ? "linear-gradient(102deg, #369D9C 0%, #28814D 100%)"
                          : "#FFF",
                      color: answer === "Yes" ? "#FFF" : "#474747",
                      border: answer === "Yes" ? "none" : "1px solid #369D9C",
                      padding: "6px 22px",
                      borderRadius: "32px",
                      textTransform: "capitalize",
                    }}
                  >
                    <Typography fontSize="14px" fontWeight="500">
                      {answer}
                    </Typography>
                  </Button>
                ))}
              </Grid2>
            </Grid2>
          </React.Fragment>
        ))}
      </Paper>
    </Grid2>
  );
};
 
{/* Pass answers to the next component */}
 
// Main Component
function SurveyQuestionSection() {
  const [surveyStarted, setSurveyStarted] = useState(false);

  const handleStartSurvey = () => {
    setSurveyStarted(true);
  };
  // Example questions array with logos and headings
  const questions = [
    {
      number: 1,
      text: [
        "Do you have all motors with efficiency classification IE3 & IE4?",
      ],
      logo: ac_motors_logo, // Replace with your actual logo path
      heading: "Industrial AC Motors", // Pass the heading here
    },
    {
      number: 2,
      text: [
        "Have you involved a specialist in the selection of the pump sizing?",
        "Are bypass valves and valve throttling being eliminated in all retrofitting projects?",
      ],
      logo: pump2, // Replace with your logo path
      heading: "Energy Compliance", // Example heading
    },
    {
      number: 3,
      text: [
        "Have you involved a specialist in the selection of the fan sizing?",
        "Does the fan comply with a Fan Efficiency Grade (FEG) of 85% or higher?",
      ],
      logo: wind, // Replace with your logo path
      heading: "Compressed Air System", // Example heading
    },
    {
      number: 4,
      text: [
        "Has a high-efficiency boiler been selected for all the plant process?",
        "Is are all the boiler equipped with a smart control system to optimize operational efficiency?",
      ],
      logo: boiler, // Replace with your logo path
      heading: "Industrial Boilers", // Example heading
    },
    {
      number: 5,
      text: [
        "Have you assessed the insulation level of the steam distribution system to ensure it is sufficient to minimize heat loss to the environment?",
      ],
      logo: boiler, // Replace with your logo path
      heading: "Steam Distribution System", // Example heading
    },
    {
      number: 6,
      text: [
        "Have you considered selecting an energy-efficient chiller for all the plant?",
      ],
      logo: tempreture, // Replace with your logo path
      heading: "Industrial Chiller System", // Example heading
    },
    {
      number: 7,
      text: [
        "Has the insulation level of the chilled water distribution system been assessed to ensure it is sufficient to minimize energy loss?",
      ],
      logo: snowflakes, // Replace with your logo path
      heading: "Chilled Water Distribution System", // Example heading
    },
    {
      number: 8,
      text: [
        "Has the insulation level of the chilled water distribution system been assessed to ensure it is sufficient to minimize energy loss?",
        "Has the system been designed to minimize pumping losses by reducing or eliminating bypass/re-circulation?",
      ],
      logo: snowflakes,
      heading: "Chilled Water Distribution System",
    },
    {
      number: 9,
      text: [
        "Has a high-efficiency condenser suitable for the plant been selected?",
      ],
      logo: warehouse,
      heading: "Refrigerated Storage Area",
    },
    {
      number: 10,
      text: [
        "Has the electrical system been designed to incorporate control measures?",
      ],
      logo: bolt,
      heading: "Power Quality",
    },
    {
      number: 11,
      text: [
        "Has the design process considered identifying and evaluating potential waste heat recovery systems based on the waste heat generated during the process?",
      ],
      logo: tempreture,
      heading: "Power Quality",
    },
    {
      number: 11,
      text: [
        "Has the design process considered identifying and evaluating potential waste heat recovery systems based on the waste heat generated during the process?",
        "Are all the sub-meters labeled for easy identification and tracking of energy consumption?",
      ],
      logo: r_bin,
      heading: "Process Energy Sub-Metering",
    },
    {
      number: 12,
      text: [
        "Has the development team considered improving the energy efficiency of the buildings envelope?",
      ],
      logo: r_bin,
      heading:
        "Energy Conservation Techniques and Thermal Insulation (Applicable for both Air-conditioned and Non-Air-Conditioned buildings)",
    },
    {
      number: 13,
      text: [
        "Has interior thermal imaging been conducted for air-conditioned/climate-controlled spaces to identify potential building defects?",
        "If leaks or gaps were identified, have appropriate corrective actions been taken to address them?",
        "Have the tests and reports been conducted in compliance with the specified conditions?",
      ],
      logo: snow_blowing,
      heading:
        "Envelope Tightness for Air-Conditioned Spaces - Thermal Imaging Technique",
    },
    {
      number: 14,
      text: [
        "Has the industrial facility/warehouse been assessed for envelope airtightness, and have measures been taken to identify and address any defects or leakages?",
      ],
      logo: meter_bolt,
      heading:
        "Envelope Tightness for Air-Conditioned Spaces - Thermal Imaging Technique",
    },
    {
      number: 15,
      text: [
        "Have you evaluated the potential impact of different HVAC systems on energy efficiency and operating costs to inform your selection?",
      ],
      logo: calculator_bill,
      heading: "Optimal System Sizing - HVAC",
    },
    {
      number: 17,
      text: [
        "Have you considered incorporating design strategies to utilize Energy Recovery Units (ERUs) in the plant?",
      ],
      logo: hand_holding,
      heading:
        "Installation of Energy Recovery Units and regulated air intake system",
    },
    {
      number: 18,
      text: [
        'Have you confirmed that the energy-efficient cooling equipment to be procured and installed is consistent with the capacities specified in the "Optimal System Sizing - HVAC section?',
      ],
      logo: hand_holding,
      heading:
        "Selection of Cooling Equipment with High Energy Efficiency Ratio (EER)",
    },
    {
      number: 19,
      text: [
        "Have you considered incorporating the necessary strategies into the HVAC system design to ensure efficient control and operation of the units?",
      ],
      logo: snowflakes,
      heading: "Programmable thermostats and CO2 Sensors for HVAC system",
    },
    {
      number: 19,
      text: [
        "Have you considered incorporating the necessary strategies into the HVAC system design to ensure efficient control and operation of the units?",
      ],
      logo: smoke,
      heading: "Programmable thermostats and CO2 Sensors for HVAC system",
    },
    {
      number: 120,
      text: [
        "Have you considered ways to improve interior lighting levels while ensuring they do not exceed the limits",
      ],
      logo: lightbulb,
      heading: "Light Power Density - Interior",
    },
    {
      number: 12,
      text: [
        "Have you considered selecting internal lighting systems that offer flexible control options",
      ],
      logo: insight,
      heading:
        "Automated lighting control / motion sensor for internal lighting",
    },
    {
      number: 15,
      text: [
        "Have you confirmed that the exterior lighting levels have been improved and do not exceed the specified limits?",
      ],
      logo: ideaChange,
      heading: "Exterior Light Power Density",
    },
    {
      number: 16,
      text: [
        "Have you confirmed that the external lighting systems incorporate strategies to switch on/off based on specific needs or timings?",
      ],
      logo: lightBulbSetting,
      heading: "Control of External lights",
    },
    {
      number: 16,
      text: [
        "Has the feasibility of a solar thermal hot water system been assessed, and has the potential reduction in CO2 emissions been estimated?",
      ],
      logo: solar_panel,
      heading: "Renewable Power Source - Industrial hot water",
    },
    {
      number: 18,
      text: [
        "Have you considered conducting a feasibility study to explore the potential of generating renewable power on-site?",
      ],
      logo: solarpanel_1,
      heading: "Onsite Renewable Energy Generation",
    },
    {
      number: 20,
      text: [
        "Have you explored the possibility of incorporating daylighting technologies into the industrial design?",
      ],
      logo: lightSelling,
      heading: "General Plant Lighting - Use of Solar Daylighting Technologies",
    },
  ];

  return (
    <>
      {!surveyStarted ? (
        <>
          <Grid2 sx={{ display: "flex", flexDirection: "column", gap: "20px" }}>
            {questions.map((q) => (
              <Question
                key={q.number}
                questionNumber={q.number}
                questionText={q.text}
                logo={q.logo}
                heading={q.heading}
              />
            ))}
          </Grid2>

          <Grid2
            sx={{
              display: "flex",
              flexDirection: "row",
              justifyContent: "flex-end", // This aligns the button to the right
              mt: "45px",
            }}
          >
            <Button
              onClick={handleStartSurvey}
              sx={{
                borderRadius: "32px",
                textTransform: "capitalize",
                justifyContent: "center",
                alignItems: "center",
                background:
                  "var(--grad-3, linear-gradient(102deg, #369D9C 0%, #28814D 100%))",
                padding: "11px 40px",
              }}
            >
              <Typography color="#fff" fontSize="14px" fontWeight="600">
                Submit Survey
              </Typography>
            </Button>
          </Grid2>
        </>
      ) : (
        <DecarbonizationSurveyQsnAns></DecarbonizationSurveyQsnAns>
      )}
    </>
  );
}

export default SurveyQuestionSection;
 

function SurveyQuestionSection() {
  const questions = [
    {
      text: [
        "Do you have all motors with efficiency classification IE3 & IE4?",
      ],
      answers: [
        [
          "Upgrade to IE3 and IE4 motors for increased energy efficiency and optimal performance.",
        ],
      ],
      logo: "",
      heading: "Industrial AC Motors",
      showTable: false,
    },
    {
      text: [
        "Have you involved a specialist in the selection of the pump sizing?",
        "Are bypass valves and valve throttling being eliminated in all retrofitting projects?",
      ],
      answers: [
        [
          "Pump sizing and selection must consider all possible scenarios of the operation.",
          "Right pump technology must be selected based on process requirement.",
        ],
        [
          "Pump with right VFD must be selected for the process with variable flow requirement.",
        ],
      ],
      logo: "",
      heading: "Industrial Process Pumps",
      showTable: false,
    },
    {
      text: [
        "Have you involved a specialist in the selection of the pump sizing?",
        "Does the fan comply with a Fan Efficiency Grade (FEG) of 85% or higher?",
      ],
      answers: [
        [
          "Fan sizing and selection must consider all possible scenarios of the operation.",
          "Right fan technology must be selected based on process requirement.",
          "Fan with right VFD must be selected for the process with variable flow requirement.",
        ],
        [],
      ],
      logo: "",
      heading: "Industrial Process Fans",
      showTable: false,
    },
    {
      text: [
        "Has a specialist been appointed to select the most suitable compressor technology (e.g., variable speed drive or variable displacement compressor)?",
        "Are measures in place to minimize leakage in the compressed air system of the existing plant?",
      ],
      answers: [
        [],
        [
          "Leakage in the compressed air system must be minimized in the existing plant.",
        ],
      ],
      logo: "",
      heading: "Compressed Air System",
      showTable: false,
    },
    {
      text: [
        "Has a high-efficiency boiler been selected for the plant process?",
        "Are all the boilers equipped with a smart control system to optimize operational efficiency?",
      ],
      answers: [
        [
          "Boiler sizing and design operating parameters must consider all possible scenarios of the operation.",
        ],
        [
          "The selected boiler must have smart controls to regulate the fuel and excess air supply to the boiler based on process load variation, thereby achieving higher combustion efficiency.",
        ],
      ],
      logo: "",
      heading: "Industrial Process Boilers",
      showTable: false,
    },
    {
      text: [
        "Have you assessed the insulation level of the steam distribution system to ensure it is sufficient to minimize heat loss to the environment?",
      ],
      answers: [
        [
          "Steam distribution system economic insulation requirement must be carried out by a specialist.",
          "Effectiveness of the insulation must be tested on an annual basis.",
        ],
      ],
      logo: "",
      heading: "Steam Distribution System",
      showTable: false,
    },
    {
      text: [
        "Have you considered selecting an energy-efficient chiller for all the plant?",
      ],
      answers: [
        [
          "All chiller units should meet the Minimum Energy Efficiency Ratio (EER) mentioned in the table.",
          "Ratio (EER) mentioned in the table",
        ],
      ],
      logo: "",
      heading: "Industrial Chiller System",
      showTable: true,
    },
    {
      text: [
        "Has the insulation level of the chilled water distribution system been assessed to ensure it is sufficient to minimize energy loss?",
        "Has the system been designed to minimize pumping losses by reducing or eliminating bypass/re-circulation?",
      ],
      answers: [[], []],
      logo: "",
      heading: "Chilled Water Distribution System",
      showTable: false,
    },
    {
      text: [
        "Have you considered selecting an energy-efficient chiller for all the plant?",
      ],
      answers: [
        [
          "All condenser units should meet the Minimum Energy Efficiency Ratio (EER)",
        ],
      ],
      logo: "",
      heading: "Refrigerated Storage Area",
      showTable: true,
    },
    {
      text: [
        "Has the electrical system been designed to incorporate control measures?",
      ],
      answers: [
        [
          "The electrical system must incorporate control measures like",
          "Distributed Power Flow Controller (DPFC)",
          "Voltage Optimizer",
          "Harmonic Filters",
          "Capacitor Banks",
          "To maintain high power factor and low hormonic levels, hence power quality",
        ],
      ],
      logo: "",
      heading: "Power Quality",
      showTable: false,
      boldAnswerIndex: 0,
    },
    {
      text: [
        "Has the design process considered identifying and evaluating potential waste heat recovery systems based on the waste heat generated during the process?",
      ],
      answers: [["Develop Waste heat recovery and utilization strategy"]],
      logo: "",
      heading: "Process Waste Heat Recovery",
      showTable: false,
    },
    {
      text: [
        "Has the design process considered identifying and evaluating potential waste heat recovery systems based on the waste heat generated during the process?",
        "Are all the sub-meters labeled for easy identification and tracking of energy consumption?",
      ],
      answers: [
        [
          "Develop a sub-metering, monitoring and automatic data recording strategy to account for a minimum of the following",
          "Heating and cooling system",
          "Internal & External Lighting",
          "Compressed air system",
          "Loads above 50KW",
          "Production line-wise sub-metering",
        ],
        [
          ". In case the facility is contemplating a SCADA/ Automatic controls, these meters should be capable of providing the required outputs and integration.",
        ],
      ],
      logo: "",
      heading: "Process Energy Sub-Metering",
      showTable: false,
      boldAnswerIndex: 0,
    },
    {
      text: [
        "Has the development team considered improving the energy efficiency of the building's envelope?",
      ],
      answers: [
        [
          "Make Sure that the development team considers the improvement in the energy efficiency of the building's envelope.",
          "The envelope addresses the following",
          "Horizontal Opaque elements – Roof, Slabs",
          "Vertical Opaque element – Wall, door",
          "Horizontal Glazing – Sky light",
          "Vertical Glazing – Glass Door, windows.",
        ],
        [
          ". In case the facility is contemplating a SCADA/ Automatic controls, these meters should be capable of providing the required outputs and integration.",
        ],
      ],
      logo: "",
      heading: "Energy Conservation Techniques and Thermal Insulation",
      showTable: true,
      boldAnswerIndex: 0,
    },
    {
      text: [
        "Has interior thermal imaging been conducted for air-conditioned/climate-controlled spaces to identify potential building defects?",
        "If leaks or gaps were identified, have appropriate corrective actions been taken to address them?",
      ],
      answers: [
        ["The thermography report highlighting"],
        [
          "The thermography report highlighting",
          "The defects in the building envelope",
          "The leakage spots noticed in the space and,",
          "Recommendations for rectifications",
        ],
      ],
      logo: "",
      heading:
        "Envelope Tightness for Air-Conditioned Spaces - Thermal Imaging Technique",
      showTable: false,
      boldAnswerIndex: 4,
    },
  ];

  return (
    <>
      <Grid2 sx={{ display: "flex", flexDirection: "column", gap: "20px" }}>
        {questions.map((q, index) => (
          <Question
            key={index}
            questionText={q.text}
            logo={q.logo}
            heading={q.heading}
            answers={q.answers}
            showTable={q.showTable}
            boldAnswerIndex={q.boldAnswerIndex}
          />
        ))}
      </Grid2>
      <Grid2
        sx={{
          display: "flex",
          flexDirection: "row",
          justifyContent: "flex-end",
          mt: "45px",
        }}
      >
        <Button
          sx={{
            borderRadius: "32px",
            textTransform: "capitalize",
            justifyContent: "center",
            alignItems: "center",
            background:
              "var(--grad-3, linear-gradient(102deg, #369D9C 0%, #28814D 100%))",
            padding: "11px 40px",
          }}
        >
          <Typography color="#fff" fontSize="14px" fontWeight="600">
            Submit Survey
          </Typography>
        </Button>
      </Grid2>
    </>
  );
}

export default SurveyQuestionSection;

 

const TableComponents = {
  "Industrial Chiller System": BasicTable,
  "Refrigerated Storage Area": BasicTable2,
  "Energy Conservation Techniques and Thermal Insulation": BasicTable3,
};
 
const Question = ({
  questionText,
  logo,
  heading,
  answers,
  showTable,
  boldAnswerIndex,
}) => {
  const TableComponent = TableComponents[heading];

  return (
    <Grid2
      sx={{
        flexDirection: "column",
        display: "flex",
        border: "1px solid #E4E4E4",
        borderRadius: "5px",
        borderTop: "3px solid #369D9C",
        gap: "20px",
      }}
    >
      <Paper
        sx={{
          display: "flex",
          flexDirection: "column",
          gap: "15px",
        }}
      >
        {/* Heading Section */}
        <Grid2
          sx={{
            display: "flex",
            flexDirection: "row",
            gap: "12px",
            mt: "16px",
            ml: "16px",
            alignItems: "center",
          }}
        >
          {logo && <img src={logo} alt="logo" width="18px" />}
          <Typography fontSize="16px" fontWeight="600" color="#000">
            {heading}
          </Typography>
        </Grid2>

        {questionText.map((q, questionIndex) => (
          <React.Fragment key={questionIndex}>
            {/* Question Text */}
            <Grid2
              sx={{
                display: "flex",
                flexDirection: "row",
                alignItems: "center",
                gap: "12px",
                ml: "15px",
              }}
            >
              <Box
                sx={{
                  width: "37px",
                  height: "34px",
                  backgroundColor: "#F7F7F7",
                  padding: "7px",
                  borderRadius: "6px",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                }}
              >
                <Typography color="#5B5B5B" fontSize="14px" fontWeight="400">
                  Q.{questionIndex + 1}
                </Typography>
              </Box>
              <Typography fontSize="14px" fontWeight="500" color="#000">
                {q}
              </Typography>
            </Grid2>

            {/* Answers or Implementation Required */}
            <Grid2
              sx={{
                borderTop: "1px solid #E4E4E4",
                mt: "8px",
                mb: "8px",
                ml: "0px",
                padding: "10px 19px",
                borderRadius: "5px",
              }}
            >
              {answers[questionIndex]?.length > 0 ? (
                // Display Answers
                <Grid2
                  sx={{
                    border: "1px solid var(--Grey-3, #D9D9D9)",
                    background: "#F7FFFC",
                    borderRadius: "5px",
                    padding: "1px 12px",
                  }}
                >
                  {answers[questionIndex].map((answer, answerIndex) => (
                    <Typography
                      key={answerIndex}
                      fontSize="12px"
                      fontWeight={
                        boldAnswerIndex === questionIndex ||
                        boldAnswerIndex >= answers[questionIndex].length
                          ? "700" // Apply bold if boldAnswerIndex matches or exceeds total answers
                          : "500"
                      }
                      color="#000"
                      sx={{ padding: "6px 0" }}
                    >
                      {answerIndex + 1}. {answer}
                    </Typography>
                  ))}
                </Grid2>
              ) : (
                // Display Implementation Required with Logo
                <Grid2
                  sx={{
                    display: "flex",
                    alignItems: "center",
                    gap: "12px",
                    borderRadius: "5px",
                    padding: "10px",
                  }}
                >
                  <img
                    src={magelightBuld}
                    alt="Implementation Required"
                    width="18px"
                  />
                  <Typography fontSize="12px" fontWeight="500" color="#000">
                    Implementation Required
                  </Typography>
                </Grid2>
              )}
            </Grid2>

            {/* Conditional Rendering of Table */}
            {showTable && questionIndex === 0 && TableComponent && (
              <Grid2
                sx={{
                  mt: "-30px",
                  mb: "8px",
                  ml: "0px",
                  padding: "10px 19px",
                  borderRadius: "5px",
                }}
              >
                <TableComponent /> {/* Render the selected table component */}
              </Grid2>
            )}
          </React.Fragment>
        ))}
      </Paper>
    </Grid2>
  );
};

 
const Question = ({ question, selectedAnswer, onAnswerChange }) => {
  const handleButtonClick = (answer) => {
    onAnswerChange(answer); // Notify parent component of answer change
  };

  return (
    <Grid2
      sx={{
        flexDirection: "column",
        display: "flex",
        border: "1px solid #E4E4E4",
        borderRadius: "5px",
        borderTop: "3px solid #369D9C",
        gap: "20px",
      }}
    >
      <Paper
        sx={{
          display: "flex",
          flexDirection: "column",
          gap: "15px",
        }}
      >
        <Grid2
          sx={{
            display: "flex",
            flexDirection: "row",
            gap: "12px",
            mt: "16px",
            ml: "16px",
            alignItems: "center",
          }}
        >
          {question.logo && <img src={question.logo} alt="logo" width="18px" />}
          <Typography fontSize="16px" fontWeight="600" color="#000">
            {question.heading}
          </Typography>
        </Grid2>

        {question.text.map((q, index) => (
          <React.Fragment key={index}>
            <Grid2
              sx={{
                display: "flex",
                flexDirection: "row",
                alignItems: "center",
                gap: "12px",
                ml: "15px",
              }}
            >
              <Box
                sx={{
                  width: "37px",
                  height: "34px",
                  backgroundColor: "#F7F7F7",
                  padding: "7px",
                  borderRadius: "6px",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                }}
              >
                <Typography color="#5B5B5B" fontSize="14px" fontWeight="400">
                  Q.{index + 1}
                </Typography>
              </Box>
              <Typography fontSize="14px" fontWeight="500" color="#000">
                {q}
              </Typography>
            </Grid2>

            <Grid2
              sx={{
                borderTop: "1px solid #E4E4E4",
                borderBottom: "1px solid #E4E4E4",
              }}
            >
              <Grid2
                sx={{
                  display: "flex",
                  flexDirection: "row",
                  gap: "8px",
                  mt: "10px",
                  ml: "16px",
                  mb: "12px",
                }}
              >
                {["Yes", "No", "N/A"].map((answer) => (
                  <Button
                    key={answer}
                    onClick={() => handleButtonClick(answer)}
                    sx={{
                      background: selectedAnswer === answer
                        ? (answer === "Yes"
                          ? "linear-gradient(102deg, #369D9C 0%, #28814D 100%)"
                          : answer === "No"
                            ? "linear-gradient(102deg, #FF6F6F 0%, #BF3F3F 100%)"
                            : "linear-gradient(102deg, #D0D0D0 0%, #A0A0A0 100%)")
                        : "#FFF",
                      color: selectedAnswer === answer ? "#FFF" : "#474747",
                      border: selectedAnswer === answer ? "none" : "1px solid #369D9C",
                      padding: "6px 22px",
                      borderRadius: "32px",
                      textTransform: "capitalize",
                    }}
                  >
                    <Typography fontSize="14px" fontWeight="500">
                      {answer}
                    </Typography>
                  </Button>
                ))}
              </Grid2>
 </Grid2>
          </React.Fragment>
        ))}
      </Paper>
    </Grid2>
  );
};



const SurveyQuestionSection = () => {
  const [answers, setAnswers] = useState({}); // State to store answers

  const handleAnswerChange = (questionNumber, answer) => {
    setAnswers((prevAnswers) => ({
      ...prevAnswers,
      [questionNumber]: answer // Update the specific answer
    }));
    console.log('Answer changed:', questionNumber, answer); // Log answer change
  };

  const handleSubmit = (event) => {
    event.preventDefault(); // Prevent default form submission behavior
    console.log('Survey Answers:', answers); // Log all answers to console
    // Handle the survey submission, e.g., send to a server or show a thank you message
  };

  const questions = [
    {
      number: 1,
      text: ["Do you have all motors with efficiency classification IE3 & IE4?"],
      logo: "", // Replace with your logo path
      heading: "Industrial AC Motors",
    },
    {
      number: 2,
      text: [
        "Have you involved a specialist in the selection of the pump sizing?",
        "Are bypass valves and valve throttling being eliminated in all retrofitting projects?",
      ],
      logo: "", // Replace with your logo path
      heading: "Energy Compliance",
    },
    // Add more questions as needed
  ];

  return (
    <Grid2
      component="form" // Convert the container into a form
      onSubmit={handleSubmit} // Handle form submission
      sx={{ display: "flex", flexDirection: "column", gap: "20px" }}
    >
      {questions.map((question) => (
        <Question
          key={question.number}
          question={question}
          selectedAnswer={answers[question.number]} // Pass the answer for the specific question
          onAnswerChange={(answer) => handleAnswerChange(question.number, answer)}
        />
      ))}
      <Grid2
        sx={{
          display: "flex",
          flexDirection: "row",
          justifyContent: "flex-end",
          mt: "45px",
        }}
      >
        <Button
          type="submit" // Set button type to submit
          sx={{
            borderRadius: "32px",
            textTransform: "capitalize",
            justifyContent: "center",
            alignItems: "center",
            background: "linear-gradient(102deg, #369D9C 0%, #28814D 100%)",
            padding: "11px 40px",
          }}
        >
          <Typography color="#fff" fontSize="14px" fontWeight="600">
            Submit Survey
          </Typography>
        </Button>
      </Grid2>
    </Grid2>
  );
};

export default SurveyQuestionSection;
 

import React from 'react';
import { Box, Grid2, Paper, Typography, Button } from "@mui/material";
 

const SurveyQuestionSection = () => {
  const [answers, setAnswers] = useState({}); // State to store answers

  const handleAnswerChange = (questionNumber, answer) => {
    setAnswers((prevAnswers) => ({
      ...prevAnswers,
      [questionNumber]: answer // Update the specific answer
    }));
  };

  const handleSubmit = (event) => {
    console.log('Survey Answers:', answers); // Log all answers to console
    // Handle the survey submission, e.g., send to a server or show a thank you message
  };

  const questions = [
    {
      number: 1,
      text: ["Do you have all motors with efficiency classification IE3 & IE4?"],
      logo: "", // Replace with your logo path
      heading: "Industrial AC Motors",
    },
    {
      number: 2,
      text: [
        "Have you involved a specialist in the selection of the pump sizing?",
        "Are bypass valves and valve throttling being eliminated in all retrofitting projects?",
      ],
      logo: "", // Replace with your logo path
      heading: "Energy Compliance",
    },
    // Add more questions as needed
  ];

  return (
    <Grid2
      component="form" // Convert the container into a form
      onSubmit={handleSubmit} // Handle form submission
      sx={{ display: "flex", flexDirection: "column", gap: "20px" }}
    >
      {questions.map((question) => (
        <Question
          key={question.number}
          question={question}
          selectedAnswer={answers[question.number]} // Pass the answer for the specific question
          onAnswerChange={(answer) => handleAnswerChange(question.number, answer)}
        />
      ))}
      <Grid2
        sx={{
          display: "flex",
          flexDirection: "row",
          justifyContent: "flex-end",
          mt: "45px",
        }}
      >
        <Button
          type="submit" // Set button type to submit
          sx={{
            borderRadius: "32px",
            textTransform: "capitalize",
            justifyContent: "center",
            alignItems: "center",
            background: "linear-gradient(102deg, #369D9C 0%, #28814D 100%)",
            padding: "11px 40px",
          }}
        >
          <Typography color="#fff" fontSize="14px" fontWeight="600">
            Submit Survey
          </Typography>
        </Button>
      </Grid2>
    </Grid2>
  );
};

export default SurveyQuestionSection;
 

export default Question;
 
const Question = ({ question, selectedAnswer, onAnswerChange }) => {
  const handleButtonClick = (answer) => {
    onAnswerChange(question.number, answer); // Notify parent component of answer change
  };

  return (
    <Grid2
      sx={{
        flexDirection: "column",
        display: "flex",
        border: "1px solid #E4E4E4",
        borderRadius: "5px",
        borderTop: "3px solid #369D9C",
        gap: "20px",
      }}
    >
      <Paper
        sx={{
          display: "flex",
          flexDirection: "column",
          gap: "15px",
        }}
      >
        <Grid2
          sx={{
            display: "flex",
            flexDirection: "row",
            gap: "12px",
            mt: "16px",
            ml: "16px",
            alignItems: "center",
          }}
        >
          {question.logo && <img src={question.logo} alt="logo" width="18px" />}
          <Typography fontSize="16px" fontWeight="600" color="#000">
            {question.heading}
          </Typography>
        </Grid2>

        {question.text.map((q, index) => (
          <React.Fragment key={index}>
            <Grid2
              sx={{
                display: "flex",
                flexDirection: "row",
                alignItems: "center",
                gap: "12px",
                ml: "15px",
              }}
            >
              <Box
                sx={{
                  width: "37px",
                  height: "34px",
                  backgroundColor: "#F7F7F7",
                  padding: "7px",
                  borderRadius: "6px",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                }}
              >
                <Typography color="#5B5B5B" fontSize="14px" fontWeight="400">
                  Q.{index + 1}
                </Typography>
              </Box>
              <Typography fontSize="14px" fontWeight="500" color="#000">
                {q}
              </Typography>
            </Grid2>

            <Grid2
              sx={{
                borderTop: "1px solid #E4E4E4",
                borderBottom: "1px solid #E4E4E4",
              }}
            >
              <Grid2
                sx={{
                  display: "flex",
                  flexDirection: "row",
                  gap: "8px",
                  mt: "10px",
                  ml: "16px",
                  mb: "12px",
                }}
              >
                {["Yes", "No", "N/A"].map((answer) => (
                  <Button
                    key={answer}
                    onClick={() => handleButtonClick(answer)}
                    sx={{
                      background: selectedAnswer === answer
                        ? (answer === "Yes"
                          ? "linear-gradient(102deg, #369D9C 0%, #28814D 100%)"
                          : answer === "No"
                            ? "linear-gradient(102deg, #FF6F6F 0%, #BF3F3F 100%)"
                            : "linear-gradient(102deg, #D0D0D0 0%, #A0A0A0 100%)")
                        : "#FFF",
                      color: selectedAnswer === answer ? "#FFF" : "#474747",
                      border: selectedAnswer === answer ? "none" : "1px solid #369D9C",
                      padding: "6px 22px",
                      borderRadius: "32px",
                      textTransform: "capitalize",
                    }}
                  >
                    <Typography fontSize="14px" fontWeight="500">
                      {answer}
                    </Typography>
                  </Button>
                ))}
              </Grid2>
            </Grid2>
          </React.Fragment>
        ))}
      </Paper>
    </Grid2>
  );
};
 
const SurveyQuestionSection = () => {
  const [answers, setAnswers] = useState({}); // State to store answers

  const handleAnswerChange = (questionNumber, answer) => {
    setAnswers((prevAnswers) => ({
      ...prevAnswers,
      [questionNumber]: { answer } // Update the specific answer
    }));
  };

  const handleSubmit = (event) => {
    console.log('Survey Answers:', answers); // Log all answers to console
    // Handle the survey submission, e.g., send to a server or show a thank you message
  };

  const questions = [
    {
      number: 1,
      text: ["Do you have all motors with efficiency classification IE3 & IE4?"],
      logo: "", // Replace with your logo path
      heading: "Industrial AC Motors",
    },
    {
      number: 2,
      text: [
        "Have you involved a specialist in the selection of the pump sizing?",
        "Are bypass valves and valve throttling being eliminated in all retrofitting projects?",
      ],
      logo: "", // Replace with your logo path
      heading: "Energy Compliance",
    },
    // Add more questions as needed
  ];

  return (
    <Grid2
      component="form" // Convert the container into a form
      onSubmit={handleSubmit} // Handle form submission
      sx={{ display: "flex", flexDirection: "column", gap: "20px" }}
    >
      {questions.map((question) => (
        <Question
          key={question.number}
          question={question}
          selectedAnswer={answers[question.number] && answers[question.number].answer} // Pass the answer for the specific question
          onAnswerChange={handleAnswerChange}
        />
      ))}
      <Grid2
        sx={{
          display: "flex",
          flexDirection: "row",
          justifyContent: "flex-end",
          mt: "45px",
        }}
      >
        <Button
          type="submit" // Set button type to submit
          sx={{
            borderRadius: "32px",
            textTransform: "capitalize",
            justifyContent: "center",
            alignItems: "center",
            background: "linear-gradient(102deg, #369D9C 0%, #28814D 100%)",
            padding: "11px 40px",
          }}
        >
          <Typography color="#fff" fontSize="14px" fontWeight="600">
            Submit Survey
          </Typography>
        </Button>
      </Grid2>
    </Grid2>
  );
};

export default SurveyQuestionSection;
 
const Question = ({ question, selectedAnswer, onAnswerChange }) => {
  const handleButtonClick = (answer) => {
    onAnswerChange(question.number, answer); // Notify parent component of answer change
  };

  return (
    <Grid2
      sx={{
        flexDirection: "column",
        display: "flex",
        border: "1px solid #E4E4E4",
        borderRadius: "5px",
        borderTop: "3px solid #369D9C",
        gap: "20px",
      }}
    >
      <Paper
        sx={{
          display: "flex",
          flexDirection: "column",
          gap: "15px",
        }}
      >
        <Grid2
          sx={{
            display: "flex",
            flexDirection: "row",
            gap: "12px",
            mt: "16px",
            ml: "16px",
            alignItems: "center",
          }}
        >
          {question.logo && <img src={question.logo} alt="logo" width="18px" />}
          <Typography fontSize="16px" fontWeight="600" color="#000">
            {question.heading}
          </Typography>
        </Grid2>

        {question.text.map((q, index) => (
          <React.Fragment key={index}>
            <Grid2
              sx={{
                display: "flex",
                flexDirection: "row",
                alignItems: "center",
                gap: "12px",
                ml: "15px",
              }}
            >
              <Box
                sx={{
                  width: "37px",
                  height: "34px",
                  backgroundColor: "#F7F7F7",
                  padding: "7px",
                  borderRadius: "6px",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                }}
              >
                <Typography color="#5B5B5B" fontSize="14px" fontWeight="400">
                  Q.{index + 1}
                </Typography>
              </Box>
              <Typography fontSize="14px" fontWeight="500" color="#000">
                {q}
              </Typography>
            </Grid2>

            <Grid2
              sx={{
                borderTop: "1px solid #E4E4E4",
                borderBottom: "1px solid #E4E4E4",
              }}
            >
              <Grid2
                sx={{
                  display: "flex",
                  flexDirection: "row",
                  gap: "8px",
                  mt: "10px",
                  ml: "16px",
                  mb: "12px",
                }}
              >
                {["Yes", "No", "N/A"].map((answer) => (
                  <Button
                    key={answer}
                    onClick={() => handleButtonClick(answer)}
                    sx={{
                      background: selectedAnswer === answer
                        ? (answer === "Yes"
                          ? "linear-gradient(102deg, #369D9C 0%, #28814D 100%)"
                          : answer === "No"
                            ? "linear-gradient(102deg, #FF6F6F 0%, #BF3F3F 100%)"
                            : "linear-gradient(102deg, #D0D0D0 0%, #A0A0A0 100%)")
                        : "#FFF",
                      color: selectedAnswer === answer ? "#FFF" : "#474747",
                      border: selectedAnswer === answer ? "none" : "1px solid #369D9C",
                      padding: "6px 22px",
                      borderRadius: "32px",
                      textTransform: "capitalize",
                    }}
                  >
                    <Typography fontSize="14px" fontWeight="500">
                      {answer}
                    </Typography>
                  </Button>
                ))}
              </Grid2>
            </Grid2>
          </React.Fragment>
        ))}
      </Paper>
    </Grid2>
  );
};
 
const Question = ({ question, selectedAnswer, onAnswerChange }) => {
  const handleButtonClick = (answer) => {
    onAnswerChange(question.number, answer); // Notify parent component of answer change
  };
 

const SurveyQuestionSection = () => {
  const [answers, setAnswers] = useState({}); // State to store answers

  const handleAnswerChange = (questionNumber, answer) => {
    setAnswers((prevAnswers) => ({
      ...prevAnswers,
      [questionNumber]: answer
    }));
  };

  const handleSubmit = (event) => {
    event.preventDefault(); // Prevent the default form submission behavior
    console.log('Survey Answers:', answers); // Log all answers to console
    // Handle the survey submission, e.g., send to a server or show a thank you message
  };

  const questions = [
    {
      number: 1,
      text: ["Do you have all motors with efficiency classification IE3 & IE4?"],
      logo: "", // Replace with your logo path
      heading: "Industrial AC Motors",
    },
    {
      number: 2,
      text: [
        "Have you involved a specialist in the selection of the pump sizing?",
        "Are bypass valves and valve throttling being eliminated in all retrofitting projects?",
      ],
      logo: "", // Replace with your logo path
      heading: "Energy Compliance",
    },
    // Add more questions as needed
  ];

  return (
    <Grid2
      component="form" // Convert the container into a form
      onSubmit={handleSubmit} // Handle form submission
      sx={{ display: "flex", flexDirection: "column", gap: "20px" }}
    >
      {questions.map((question) => (
        <Question
          key={question.number}
          question={question}
          selectedAnswer={answers[question.number]} // Pass the answer for the specific question
          onAnswerChange={handleAnswerChange}
        />
      ))}
      <Grid2
        sx={{
          display: "flex",
          flexDirection: "row",
          justifyContent: "flex-end",
          mt: "45px",
        }}
      >
        <Button
          type="submit" // Set button type to submit
          sx={{
            borderRadius: "32px",
            textTransform: "capitalize",
            justifyContent: "center",
            alignItems: "center",
            background: "linear-gradient(102deg, #369D9C 0%, #28814D 100%)",
            padding: "11px 40px",
          }}
        >
          <Typography color="#fff" fontSize="14px" fontWeight="600">
            Submit Survey
          </Typography>
        </Button>
      </Grid2>
    </Grid2>
  );
};

export default SurveyQuestionSection;
 


const SurveyQuestionSection = () => {
  const [answers, setAnswers] = useState({}); // State to store answers

  const handleAnswerChange = (questionNumber, answer) => {
    setAnswers((prevAnswers) => ({
      ...prevAnswers,
      [questionNumber]: answer
    }));
  };

  const handleSubmit = (event) => {
    event.preventDefault(); // Prevent the default form submission behavior
    console.log('Survey Answers:', answers); // Log all answers to console
    // Handle the survey submission, e.g., send to a server or show a thank you message
  };

  const questions = [
    {
      number: 1,
      text: ["Do you have all motors with efficiency classification IE3 & IE4?"],
      logo: "", // Replace with your logo path
      heading: "Industrial AC Motors",
    },
    {
      number: 2,
      text: [
        "Have you involved a specialist in the selection of the pump sizing?",
        "Are bypass valves and valve throttling being eliminated in all retrofitting projects?",
      ],
      logo: "", // Replace with your logo path
      heading: "Energy Compliance",
    },
    // Add more questions as needed
  ];

  return (
    <Grid2
      component="form" // Convert the container into a form
      onSubmit={handleSubmit} // Handle form submission
      sx={{ display: "flex", flexDirection: "column", gap: "20px" }}
    >
      {questions.map((question) => (
        <Question
          key={question.number}
          question={question}
          selectedAnswer={answers[question.number]} // Pass the answer for the specific question
          onAnswerChange={handleAnswerChange}
        />
      ))}
      <Grid2
        sx={{
          display: "flex",
          flexDirection: "row",
          justifyContent: "flex-end",
          mt: "45px",
        }}
      >
        <Button
          type="submit" // Set button type to submit
          sx={{
            borderRadius: "32px",
            textTransform: "capitalize",
            justifyContent: "center",
            alignItems: "center",
            background: "linear-gradient(102deg, #369D9C 0%, #28814D 100%)",
            padding: "11px 40px",
          }}
        >
          <Typography color="#fff" fontSize="14px" fontWeight="600">
            Submit Survey
          </Typography>
        </Button>
      </Grid2>
    </Grid2>
  );
};

export default SurveyQuestionSection;
 

const Question = ({ question, selectedAnswer, onAnswerChange }) => {
  const handleButtonClick = (answer) => {
    onAnswerChange(question.number, answer); // Notify parent component of answer change
  };

  return (
    <Grid2
      sx={{
        flexDirection: "column",
        display: "flex",
        border: "1px solid #E4E4E4",
        borderRadius: "5px",
        borderTop: "3px solid #369D9C",
        gap: "20px",
      }}
    >
      <Paper
        sx={{
          display: "flex",
          flexDirection: "column",
          gap: "15px",
        }}
      >
        <Grid2
          sx={{
            display: "flex",
            flexDirection: "row",
            gap: "12px",
            mt: "16px",
            ml: "16px",
            alignItems: "center",
          }}
        >
          {question.logo && <img src={question.logo} alt="logo" width="18px" />}
          <Typography fontSize="16px" fontWeight="600" color="#000">
            {question.heading}
          </Typography>
        </Grid2>

        {question.text.map((q, index) => (
          <React.Fragment key={index}>
            <Grid2
              sx={{
                display: "flex",
                flexDirection: "row",
                alignItems: "center",
                gap: "12px",
                ml: "15px",
              }}
            >
              <Box
                sx={{
                  width: "37px",
                  height: "34px",
                  backgroundColor: "#F7F7F7",
                  padding: "7px",
                  borderRadius: "6px",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                }}
              >
                <Typography color="#5B5B5B" fontSize="14px" fontWeight="400">
                  Q.{index + 1}
                </Typography>
              </Box>
              <Typography fontSize="14px" fontWeight="500" color="#000">
                {q}
              </Typography>
            </Grid2>

            <Grid2
              sx={{
                borderTop: "1px solid #E4E4E4",
                borderBottom: "1px solid #E4E4E4",
              }}
            >
              <Grid2
                sx={{
                  display: "flex",
                  flexDirection: "row",
                  gap: "8px",
                  mt: "10px",
                  ml: "16px",
                  mb: "12px",
                }}
              >
                {["Yes", "No", "N/A"].map((answer) => (
                  <Button
                    key={answer}
                    onClick={() => handleButtonClick(answer)}
                    sx={{
                      background: selectedAnswer === answer
                        ? answer === "Yes"
                          ? "linear-gradient(102deg, #369D9C 0%, #28814D 100%)"
                          : answer === "No"
                            ? "linear-gradient(102deg, #FF6F6F 0%, #BF3F3F 100%)"
                            : "linear-gradient(102deg, #D0D0D0 0%, #A0A0A0 100%)"
                        : "#FFF",
                      color: selectedAnswer === answer ? "#FFF" : "#474747",
                      border: selectedAnswer === answer ? "none" : "1px solid #369D9C",
                      padding: "6px 22px",
                      borderRadius: "32px",
                      textTransform: "capitalize",
                    }}
                  >
                    <Typography fontSize="14px" fontWeight="500">
                      {answer}
                    </Typography>
                  </Button>
                ))}
              </Grid2>
            </Grid2>
          </React.Fragment>
        ))}
      </Paper>
    </Grid2>
  );
};

 

const SurveyQuestionSection = () => {
  const [answers, setAnswers] = useState({}); // State to store answers

  const handleAnswerChange = (questionNumber, answer) => {
    setAnswers((prevAnswers) => ({
      ...prevAnswers,
      [questionNumber]: answer
    }));
    console.log(`Question ${questionNumber}: ${answer}`);
  };

  const handleSubmit = (event) => {
    event.preventDefault(); // Prevent the default form submission behavior
    console.log('Survey Answers:', answers); // Log all answers to console
    // Handle the survey submission, e.g., send to a server or show a thank you message
  };

  const questions = [
    {
      number: 1,
      text: ["Do you have all motors with efficiency classification IE3 & IE4?"],
      logo: "", // Replace with your logo path
      heading: "Industrial AC Motors",
    },
    {
      number: 2,
      text: [
        "Have you involved a specialist in the selection of the pump sizing?",
        "Are bypass valves and valve throttling being eliminated in all retrofitting projects?",
      ],
      logo: "", // Replace with your logo path
      heading: "Energy Compliance",
    },
    // Add more questions as needed
  ];

  return (
    <Grid2
      component="form" // Convert the container into a form
      onSubmit={handleSubmit} // Handle form submission
      sx={{ display: "flex", flexDirection: "column", gap: "20px" }}
    >
      {questions.map((question) => (
        <Question
          key={question.number}
          question={question}
          selectedAnswer={answers[question.number]}
          onAnswerChange={handleAnswerChange}
        />
      ))}
      <Grid2
        sx={{
          display: "flex",
          flexDirection: "row",
          justifyContent: "flex-end",
          mt: "45px",
        }}
      >
        <Button
          type="submit" // Set button type to submit
          sx={{
            borderRadius: "32px",
            textTransform: "capitalize",
            justifyContent: "center",
            alignItems: "center",
            background: "linear-gradient(102deg, #369D9C 0%, #28814D 100%)",
            padding: "11px 40px",
          }}
        >
          <Typography color="#fff" fontSize="14px" fontWeight="600">
            Submit Survey
          </Typography>
        </Button>
      </Grid2>
    </Grid2>
  );
};

export default SurveyQuestionSection
 

const Question = ({ question, selectedAnswer, onAnswerChange }) => {
  const handleButtonClick = (answer) => {
    onAnswerChange(question.number, answer); // Notify parent component of answer change
  };

  return (
    <Grid2
      sx={{
        flexDirection: "column",
        display: "flex",
        border: "1px solid #E4E4E4",
        borderRadius: "5px",
        borderTop: "3px solid #369D9C",
        gap: "20px",
      }}
    >
      <Paper
        sx={{
          display: "flex",
          flexDirection: "column",
          gap: "15px",
        }}
      >
        <Grid2
          sx={{
            display: "flex",
            flexDirection: "row",
            gap: "12px",
            mt: "16px",
            ml: "16px",
            alignItems: "center",
          }}
        >
          {question.logo && <img src={question.logo} alt="logo" width="18px" />}
          <Typography fontSize="16px" fontWeight="600" color="#000">
            {question.heading}
          </Typography>
        </Grid2>

        {question.text.map((q, index) => (
          <React.Fragment key={index}>
            <Grid2
              sx={{
                display: "flex",
                flexDirection: "row",
                alignItems: "center",
                gap: "12px",
                ml: "15px",
              }}
            >
              <Box
                sx={{
                  width: "37px",
                  height: "34px",
                  backgroundColor: "#F7F7F7",
                  padding: "7px",
                  borderRadius: "6px",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                }}
              >
                <Typography color="#5B5B5B" fontSize="14px" fontWeight="400">
                  Q.{index + 1}
                </Typography>
              </Box>
              <Typography fontSize="14px" fontWeight="500" color="#000">
                {q}
              </Typography>
            </Grid2>

            <Grid2
              sx={{
                borderTop: "1px solid #E4E4E4",
                borderBottom: "1px solid #E4E4E4",
              }}
            >
              <Grid2
                sx={{
                  display: "flex",
                  flexDirection: "row",
                  gap: "8px",
                  mt: "10px",
                  ml: "16px",
                  mb: "12px",
                }}
              >
                {["Yes", "No", "N/A"].map((answer) => (
                  <Button
                    key={answer}
                    onClick={() => handleButtonClick(answer)}
                    sx={{
                      background: selectedAnswer === answer
                        ? answer === "Yes"
                          ? "linear-gradient(102deg, #369D9C 0%, #28814D 100%)"
                          : answer === "No"
                            ? "linear-gradient(102deg, #FF6F6F 0%, #BF3F3F 100%)"
                            : "linear-gradient(102deg, #D0D0D0 0%, #A0A0A0 100%)"
                        : "#FFF",
                      color: selectedAnswer === answer ? "#FFF" : "#474747",
                      border: selectedAnswer === answer ? "none" : "1px solid #369D9C",
                      padding: "6px 22px",
                      borderRadius: "32px",
                      textTransform: "capitalize",
                    }}
                  >
                    <Typography fontSize="14px" fontWeight="500">
                      {answer}
                    </Typography>
                  </Button>
                ))}
              </Grid2>
            </Grid2>
          </React.Fragment>
        ))}
      </Paper>
    </Grid2>
  );
};

 
const SurveyQuestionSection = () => {
  const [answers, setAnswers] = useState({}); // State to store answers

  const handleAnswerChange = (questionNumber, answer) => {
    setAnswers((prevAnswers) => ({
      ...prevAnswers,
      [questionNumber]: answer
    }));
    console.log(`Question ${questionNumber}: ${answer}`);
  };

  const handleSubmit = (event) => {
    event.preventDefault(); // Prevent the default form submission behavior
    console.log('Survey Answers:', answers); // Log all answers to console
    // Handle the survey submission, e.g., send to a server or show a thank you message
  };

  const questions = [
    {
      number: 1,
      text: ["Do you have all motors with efficiency classification IE3 & IE4?"],
      logo: "", // Replace with your logo path
      heading: "Industrial AC Motors",
    },
    {
      number: 2,
      text: [
        "Have you involved a specialist in the selection of the pump sizing?",
        "Are bypass valves and valve throttling being eliminated in all retrofitting projects?",
      ],
      logo: "", // Replace with your logo path
      heading: "Energy Compliance",
    },
    // Add more questions as needed
  ];

  return (
    <Grid2
      component="form" // Convert the container into a form
      onSubmit={handleSubmit} // Handle form submission
      sx={{ display: "flex", flexDirection: "column", gap: "20px" }}
    >
      {questions.map((question) => (
        <Question
          key={question.number}
          question={question}
          selectedAnswer={answers[question.number]}
          onAnswerChange={handleAnswerChange}
        />
      ))}
      <Grid2
        sx={{
          display: "flex",
          flexDirection: "row",
          justifyContent: "flex-end",
          mt: "45px",
        }}
      >
        <Button
          type="submit" // Set button type to submit
          sx={{
            borderRadius: "32px",
            textTransform: "capitalize",
            justifyContent: "center",
            alignItems: "center",
            background: "linear-gradient(102deg, #369D9C 0%, #28814D 100%)",
            padding: "11px 40px",
          }}
        >
          <Typography color="#fff" fontSize="14px" fontWeight="600">
            Submit Survey
          </Typography>
        </Button>
      </Grid2>
    </Grid2>
  );
};

export default SurveyQuestionSection
 

const Question = ({ question, selectedAnswer, onAnswerChange }) => {
  const handleButtonClick = (answer) => {
    onAnswerChange(question.number, answer); // Notify parent component of answer change
  };

  return (
    <Grid2
      sx={{
        flexDirection: "column",
        display: "flex",
        border: "1px solid #E4E4E4",
        borderRadius: "5px",
        borderTop: "3px solid #369D9C",
        gap: "20px",
      }}
    >
      <Paper
        sx={{
          display: "flex",
          flexDirection: "column",
          gap: "15px",
        }}
      >
        <Grid2
          sx={{
            display: "flex",
            flexDirection: "row",
            gap: "12px",
            mt: "16px",
            ml: "16px",
            alignItems: "center",
          }}
        >
          {question.logo && <img src={question.logo} alt="logo" width="18px" />}
          <Typography fontSize="16px" fontWeight="600" color="#000">
            {question.heading}
          </Typography>
        </Grid2>

        {question.text.map((q, index) => (
          <React.Fragment key={index}>
            <Grid2
              sx={{
                display: "flex",
                flexDirection: "row",
                alignItems: "center",
                gap: "12px",
                ml: "15px",
              }}
            >
              <Box
                sx={{
                  width: "37px",
                  height: "34px",
                  backgroundColor: "#F7F7F7",
                  padding: "7px",
                  borderRadius: "6px",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                }}
              >
                <Typography color="#5B5B5B" fontSize="14px" fontWeight="400">
                  Q.{index + 1}
                </Typography>
              </Box>
              <Typography fontSize="14px" fontWeight="500" color="#000">
                {q}
              </Typography>
            </Grid2>

            <Grid2
              sx={{
                borderTop: "1px solid #E4E4E4",
                borderBottom: "1px solid #E4E4E4",
              }}
            >
              <Grid2
                sx={{
                  display: "flex",
                  flexDirection: "row",
                  gap: "8px",
                  mt: "10px",
                  ml: "16px",
                  mb: "12px",
                }}
              >
                {["Yes", "No", "N/A"].map((answer) => (
                  <Button
                    key={answer}
                    onClick={() => handleButtonClick(answer)}
                    sx={{
                      background: selectedAnswer === answer
                        ? answer === "Yes"
                          ? "linear-gradient(102deg, #369D9C 0%, #28814D 100%)"
                          : answer === "No"
                            ? "linear-gradient(102deg, #FF6F6F 0%, #BF3F3F 100%)"
                            : "linear-gradient(102deg, #D0D0D0 0%, #A0A0A0 100%)"
                        : "#FFF",
                      color: selectedAnswer === answer ? "#FFF" : "#474747",
                      border: selectedAnswer === answer ? "none" : "1px solid #369D9C",
                      padding: "6px 22px",
                      borderRadius: "32px",
                      textTransform: "capitalize",
                    }}
                  >
                    <Typography fontSize="14px" fontWeight="500">
                      {answer}
                    </Typography>
                  </Button>
                ))}
              </Grid2>
            </Grid2>
          </React.Fragment>
        ))}
      </Paper>
    </Grid2>
  );
};

 

export default Question;
 


import React from "react";
import { Box, Grid2, Paper, Typography, Button } from "@mui/material";
import { useState } from "react";
 

import { Grid2, Button, Typography } from "@mui/material";
import Question from "./Question"; // Import the Question component
 

import React, { useState } from "react";
 

  ];
 

    const questions = [
 

    // Define your questions here as shown before
    // e.g.,
    // {
    //   number: 1,
    //   text: ["Do you have all motors with efficiency classification IE3 & IE4?"],
    //   logo: ac_motors_logo,
    //   heading: "Industrial AC Motors",
    // },
    // Add more questions as needed
 

        ["The leakage spots noticed in the space and,"],
 
Recommendations for rectifications
 
The thermography report highlighting
 
The defects in the building envelope
 
The defects in the building envelope
 
Answer 1 for Question 2", "Answer 2 for Question 2
 
Answer 1 for Question 1", "Answer 2 for Question 1
 
ertical Glazing – Glass Door, windows.
 
Horizontal Glazing – Sky light
 
Vertical Opaque element – Wall, door
 
Horizontal Opaque elements – Roof, Slabs
 
The envelope addresses the following
 
Make Sure that the development team considers the improvement in the energy efficiency of the building's envelope.
 
Envelope Tightness (Performance-based) Blower Door Test Technique
 
Energy Conservation Techniques and Thermal Insulation
 
Has the development team considered improving the energy efficiency of the building's envelope?
 
[
        [
            "Thermal imaging carried out by a qualified thermographer.",
        ],
        [
          ". In case the facility is contemplating a SCADA/ Automatic controls, these meters should be capable of providing the required outputs and integration.",
        ],
      ],
 

          "Develop a sub-metering, monitoring and automatic data recording strategy to account for a minimum of the following",
          "Heating and cooling system",
          "Internal & External Lighting",
          "Compressed air system",
          "Loads above 50KW",
          "Production line-wise sub-metering",
 
Envelope Tightness for Air-Conditioned Spaces - Thermal Imaging Technique
 
Process Energy Sub-Metering
 
Has the design process considered identifying and evaluating potential waste heat recovery systems based on the waste heat generated during the process?
 

        "Are all the sub-meters labeled for easy identification and tracking of energy consumption?",
 

      {/* <DecarbonTablesData3></DecarbonTablesData3> */}
      {/* Last Button */}
 

// -----------------------------------
 

// const TableComponents = {

//   "Industrial Chiller System": BasicTable,
//   "Refrigerated Storage Area": BasicTable2,
//   // Add more mappings as needed
// };

// const Question = ({ questionText, logo, heading, answers, showTable }) => {
//   const TableComponent = TableComponents[heading];

//   return (
//     <Grid2
//       sx={{
//         flexDirection: "column",
//         display: "flex",
//         border: "1px solid #E4E4E4",
//         borderRadius: "5px",
//         borderTop: "3px solid #369D9C",
//         gap: "20px",
//       }}
//     >
//       <Paper
//         sx={{
//           display: "flex",
//           flexDirection: "column",
//           gap: "15px",
//         }}
//       >
//         {/* Heading Section */}
//         <Grid2
//           sx={{
//             display: "flex",
//             flexDirection: "row",
//             gap: "12px",
//             mt: "16px",
//             ml: "16px",
//             alignItems: "center",
//           }}
//         >
//           {logo && <img src={logo} alt="logo" width="18px" />}
//           <Typography fontSize="16px" fontWeight="600" color="#000">
//             {heading}
//           </Typography>
//         </Grid2>

//         {/* Questions and Answers */}
//         {questionText.map((q, questionIndex) => (
//           <React.Fragment key={questionIndex}>
//             {/* Question Text */}
//             <Grid2
//               sx={{
//                 display: "flex",
//                 flexDirection: "row",
//                 alignItems: "center",
//                 gap: "12px",
//                 ml: "15px",
//               }}
//             >
//               <Box
//                 sx={{
//                   width: "37px",
//                   height: "34px",
//                   backgroundColor: "#F7F7F7",
//                   padding: "7px",
//                   borderRadius: "6px",
//                   display: "flex",
//                   alignItems: "center",
//                   justifyContent: "center",
//                 }}
//               >
//                 <Typography color="#5B5B5B" fontSize="14px" fontWeight="400">
//                   Q.{questionIndex + 1}
//                 </Typography>
//               </Box>
//               <Typography fontSize="14px" fontWeight="500" color="#000">
//                 {q}
//               </Typography>
//             </Grid2>

//             {/* Conditional Rendering of Table */}
//             {showTable && questionIndex === 0 && TableComponent && (
//               <Grid2
//                 sx={{
//                   borderTop: "1px solid #E4E4E4",
//                   mt: "8px",
//                   mb: "8px",
//                   ml: "0px",
//                   padding: "10px 19px",
//                   borderRadius: "5px",
//                 }}
//               >
//                 <TableComponent /> {/* Render the selected table component */}
//               </Grid2>
//             )}

//             {/* Answers or Implementation Required */}
//             {!showTable && (
//               <Grid2
//                 sx={{
//                   borderTop: "1px solid #E4E4E4",
//                   mt: "8px",
//                   mb: "8px",
//                   ml: "0px",
//                   padding: "10px 19px",
//                   borderRadius: "5px",
//                 }}
//               >
//                 {answers[questionIndex]?.length > 0 ? (
//                   // Display Answers
//                   <Grid2
//                     sx={{
//                       border: "1px solid var(--Grey-3, #D9D9D9)",
//                       background: "#F7FFFC",
//                       borderRadius: "5px",
//                       padding: "1px 12px",
//                     }}
//                   >
//                     {answers[questionIndex].map((answer, answerIndex) => (
//                       <Typography
//                         key={answerIndex}
//                         fontSize="12px"
//                         fontWeight="500"
//                         color="#000"
//                         sx={{ padding: "6px 0" }}
//                       >
//                         {answerIndex + 1}. {answer}
//                       </Typography>
//                     ))}
//                   </Grid2>
//                 ) : (
//                   // Display Implementation Required with Logo
//                   <Grid2
//                     sx={{
//                       display: "flex",
//                       alignItems: "center",
//                       gap: "12px",
//                       borderRadius: "5px",
//                       padding: "10px",
//                     }}
//                   >
//                     <img
//                       src={magelightBuld}
//                       alt="Implementation Required"
//                       width="18px"
//                     />
//                     <Typography fontSize="12px" fontWeight="500" color="#000">
//                       Implementation Required
//                     </Typography>
//                   </Grid2>
//                 )}
//               </Grid2>
//             )}
//           </React.Fragment>
//         ))}
//       </Paper>
//     </Grid2>
//   );
// };

// function SurveyQuestionSection() {
//     const questions = [
//       {
//         text: [
//           "Do you have all motors with efficiency classification IE3 & IE4?",
//         ],
//         answers: [
//           [
//             "Upgrade to IE3 and IE4 motors for increased energy efficiency and optimal performance.",
//           ],
//         ],
//         logo: "",
//         heading: "Industrial AC Motors",
//         showTable: false,
//       },
//       {
//         text: [
//           "Have you involved a specialist in the selection of the pump sizing?",
//           "Are bypass valves and valve throttling being eliminated in all retrofitting projects?",
//         ],
//         answers: [
//           [
//             "Pump sizing and selection must consider all possible scenarios of the operation.",
//             "Right pump technology must be selected based on process requirement.",
//           ],
//           [
//             "Pump with right VFD must be selected for the process with variable flow requirement.",
//           ],
//         ],
//         logo: "",
//         heading: "Industrial Process Pumps",
//         showTable: false,
//       },
//       {
//         text: [
//           "Have you involved a specialist in the selection of the pump sizing?",
//           "Does the fan comply with a Fan Efficiency Grade (FEG) of 85% or higher?",
//         ],
//         answers: [
//           [
//             "Fan sizing and selection must consider all possible scenarios of the operation.",
//             "Right fan technology must be selected based on process requirement.",
//             "Fan with right VFD must be selected for the process with variable flow requirement.",
//           ],
//           [],
//         ],
//         logo: "",
//         heading: "Industrial Process Fans",
//         showTable: false,
//       },
//       {
//         text: [
//           "Has a specialist been appointed to select the most suitable compressor technology (e.g., variable speed drive or variable displacement compressor)?",
//           "Are measures in place to minimize leakage in the compressed air system of the existing plant?",
//         ],
//         answers: [
//           [],
//           [
//             "Leakage in the compressed air system must be minimized in the existing plant.",
//           ],
//         ],
//         logo: "",
//         heading: "Compressed Air System",
//         showTable: false,
//       },
//       {
//         text: [
//           "Has a high-efficiency boiler been selected for the plant process?",
//           "Are all the boilers equipped with a smart control system to optimize operational efficiency?",
//         ],
//         answers: [
//           [
//             "Boiler sizing and design operating parameters must consider all possible scenarios of the operation.",
//           ],
//           [
//             "The selected boiler must have smart controls to regulate the fuel and excess air supply to the boiler based on process load variation, thereby achieving higher combustion efficiency.",
//           ],
//         ],
//         logo: "",
//         heading: "Industrial Process Boilers",
//         showTable: false,
//       },
//       {
//         text: [
//           "Have you assessed the insulation level of the steam distribution system to ensure it is sufficient to minimize heat loss to the environment?",
//         ],
//         answers: [
//           [
//             "Steam distribution system economic insulation requirement must be carried out by a specialist.",
//             "Effectiveness of the insulation must be tested on an annual basis.",
//           ],
//         ],
//         logo: "",
//         heading: "Steam Distribution System",
//         showTable: false,
//       },
//       {
//         text: [
//           "Have you considered selecting an energy-efficient chiller for all the plant?",
//         ],
//         answers: [
//           [
//             "All chiller units should meet the Minimum Energy Efficiency Ratio (EER) mentioned in the table.",
//           ],
//         ],
//         logo: "",
//         heading: "Industrial Chiller System",
//         showTable: true,
//       },
//       {
//         text: [
//           "Has the insulation level of the chilled water distribution system been assessed to ensure it is sufficient to minimize energy loss?",
//           "Has the system been designed to minimize pumping losses by reducing or eliminating bypass/re-circulation?",
//         ],
//         answers: [
//           [],
//           [],
//         ],
//         logo: "",
//         heading: "Chilled Water Distribution System",
//         showTable: false,
//       },
//       {
//         text: [
//           "Have you considered selecting an energy-efficient chiller for all the plant?",
//         ],
//         answers: [
//           [
//             "All chiller units should meet the Minimum Energy Efficiency Ratio (EER) mentioned in the table.",
//           ],
//         ],
//         logo: "",
//         heading: "Refrigerated Storage Area",
//         showTable: true,
//       },
//       {
//         text: [
//           "Has the electrical system been designed to incorporate control measures?",
//         ],
//         answers: [
//           [
//             "The electrical system must incorporate control measures like",
//             "Distributed Power Flow Controller (DPFC)",
//             "Voltage Optimizer",
//             "Harmonic Filters",
//             "Capacitor Banks",
//             "To maintain high power factor and low hormonic levels, hence power quality"
//           ],
//         ],
//         logo: "",
//         heading: "Power Quality",
//         showTable: false,
//       },
//     ];

//     return (
//       <>
//         <Grid2 sx={{ display: "flex", flexDirection: "column", gap: "20px" }}>
//           {questions.map((q, index) => (
//             <Question
//               key={index}
//               questionText={q.text}
//               logo={q.logo}
//               heading={q.heading}
//               answers={q.answers}
//               showTable={q.showTable}
//             />
//           ))}
//         </Grid2>

//         {/* Last Button */}
//         <Grid2
//           sx={{
//             display: "flex",
//             flexDirection: "row",
//             justifyContent: "flex-end",
//             mt: "45px",
//           }}
//         >
//           <Button
//             sx={{
//               borderRadius: "32px",
//               textTransform: "capitalize",
//               justifyContent: "center",
//               alignItems: "center",
//               background:
//                 "var(--grad-3, linear-gradient(102deg, #369D9C 0%, #28814D 100%))",
//               padding: "11px 40px",
//             }}
//           >
//             <Typography color="#fff" fontSize="14px" fontWeight="600">
//               Submit Survey
//             </Typography>
//           </Button>
//         </Grid2>
//       </>
//     );
//   }

//   export default SurveyQuestionSection;

 
(Applicable for both Air-conditioned and Non-Air-Conditioned buildings)
 
const TableComponents = {
  "Industrial Chiller System": BasicTable,
  "Refrigerated Storage Area": BasicTable2,
  "Energy Conservation Techniques and Thermal Insulation" : BasicTable3
};

const Question = ({
  questionText,
  logo,
  heading,
  answers,
  showTable,
  boldAnswerIndex,
}) => {
  const TableComponent = TableComponents[heading];

  return (
    <Grid2
      sx={{
        flexDirection: "column",
        display: "flex",
        border: "1px solid #E4E4E4",
        borderRadius: "5px",
        borderTop: "3px solid #369D9C",
        gap: "20px",
      }}
    >
      <Paper
        sx={{
          display: "flex",
          flexDirection: "column",
          gap: "15px",
        }}
      >
        {/* Heading Section */}
        <Grid2
          sx={{
            display: "flex",
            flexDirection: "row",
            gap: "12px",
            mt: "16px",
            ml: "16px",
            alignItems: "center",
          }}
        >
          {logo && <img src={logo} alt="logo" width="18px" />}
          <Typography fontSize="16px" fontWeight="600" color="#000">
            {heading}
          </Typography>
        </Grid2>

        {questionText.map((q, questionIndex) => (
          <React.Fragment key={questionIndex}>
            {/* Question Text */}
            <Grid2
              sx={{
                display: "flex",
                flexDirection: "row",
                alignItems: "center",
                gap: "12px",
                ml: "15px",
              }}
            >
              <Box
                sx={{
                  width: "37px",
                  height: "34px",
                  backgroundColor: "#F7F7F7",
                  padding: "7px",
                  borderRadius: "6px",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                }}
              >
                <Typography color="#5B5B5B" fontSize="14px" fontWeight="400">
                  Q.{questionIndex + 1}
                </Typography>
              </Box>
              <Typography fontSize="14px" fontWeight="500" color="#000">
                {q}
              </Typography>
            </Grid2>

            {/* Answers or Implementation Required */}
            <Grid2
              sx={{
                borderTop: "1px solid #E4E4E4",
                mt: "8px",
                mb: "8px",
                ml: "0px",
                padding: "10px 19px",
                borderRadius: "5px",
              }}
            >
              {answers[questionIndex]?.length > 0 ? (
                // Display Answers
                <Grid2
                  sx={{
                    border: "1px solid var(--Grey-3, #D9D9D9)",
                    background: "#F7FFFC",
                    borderRadius: "5px",
                    padding: "1px 12px",
                  }}
                >
                  {answers[questionIndex].map((answer, answerIndex) => (
                    <Typography
                      key={answerIndex}
                      fontSize="12px"
                      fontWeight={
                        boldAnswerIndex === questionIndex ||
                        boldAnswerIndex >= answers[questionIndex].length
                          ? "700" // Apply bold if boldAnswerIndex matches or exceeds total answers
                          : "500"
                      }
                      color="#000"
                      sx={{ padding: "6px 0" }}
                    >
                      {answerIndex + 1}. {answer}
                    </Typography>
                  ))}
                </Grid2>
              ) : (
                // Display Implementation Required with Logo
                <Grid2
                  sx={{
                    display: "flex",
                    alignItems: "center",
                    gap: "12px",
                    borderRadius: "5px",
                    padding: "10px",
                  }}
                >
                  <img
                    src={magelightBuld}
                    alt="Implementation Required"
                    width="18px"
                  />
                  <Typography fontSize="12px" fontWeight="500" color="#000">
                    Implementation Required
                  </Typography>
                </Grid2>
              )}
            </Grid2>

            {/* Conditional Rendering of Table */}
            {showTable && questionIndex === 0 && TableComponent && (
              <Grid2
                sx={{
                    mt:"-30px",
                  mb: "8px",
                  ml: "0px",
                  padding: "10px 19px",
                  borderRadius: "5px",
                }}
              >
                <TableComponent /> {/* Render the selected table component */}
              </Grid2>
            )}
          </React.Fragment>
        ))}
      </Paper>
    </Grid2>
  );
};

 
(Applicable for both Air-conditioned and Non-Air-Conditioned buildings)"
 
DecarbonTablesData3
 
Production line-wise sub-metering
 
Loads above 50KW
 
Compressed air system
 
Internal & External Lighting
 
Heating and cooling system
 
Develop a sub-metering, monitoring and automatic data recording strategy to account for a minimum of the following
 
Has the design process considered identifying and evaluating potential waste heat recovery systems based on the waste heat generated during the process?
 

          "Are all the sub-meters labeled for easy identification and tracking of energy consumption?",
 
Process Energy Sub-Metering
 
Has the design process considered identifying and evaluating potential waste heat recovery systems based on the waste heat generated during the process?
 

        boldAnswerIndex: 0,
 
All chiller units should meet the Minimum Energy Efficiency Ratio (EER) mentioned in the table.
 

          "All chiller units should meet the Minimum Energy Efficiency",
 
// import * as React from "react";
// import Table from "@mui/material/Table";
// import TableBody from "@mui/material/TableBody";
// import TableCell from "@mui/material/TableCell";
// import TableContainer from "@mui/material/TableContainer";
// import TableHead from "@mui/material/TableHead";
// import TableRow from "@mui/material/TableRow";
// import Paper from "@mui/material/Paper";

// function createData(sNo, chillerType, capacities, fullLoadCop, iplv) {
//   return { sNo, chillerType, capacities, fullLoadCop, iplv };
// }

// const airCooledRows = [
//   createData(1, "", "<150 TR", ">9.562", ">2.803", ">12.5"),
//   createData(1, "", ">150 TR", ">9.562", ">2.803", ">12.5"),
// ];

// const waterCooledRows = [
//   createData(
//     1,
//     "Water cooled, electrically operated, positive displacement (rotary screw & scroll)",
//     "150 TR",
//     ">4.45",
//     ">5.20"
//   ),
//   createData(
//     1,
//     "Water cooled, electrically operated, positive displacement (rotary screw & scroll)",
//     "150 TR and < 300 TR",
//     ">4.90",
//     ">5.60"
//   ),
//   createData(
//     1,
//     "Water cooled, electrically operated, positive displacement (rotary screw & scroll)",
//     "300 TR",
//     ">5.50",
//     ">6.15"
//   ),
//   createData(
//     2,
//     "Water cooled, electrically operated, centrifugal",
//     "150 TR",
//     ">5.00",
//     ">5.25"
//   ),
//   createData(
//     2,
//     "Water cooled, electrically operated, centrifugal",
//     "150 TR and < 300 TR",
//     ">5.55",
//     ">5.90"
//   ),
//   createData(
//     2,
//     "Water cooled, electrically operated, centrifugal",
//     "300 TR",
//     ">6.10",
//     ">6.40"
//   ),
// ];

// export default function BasicTable() {
//   return (
//     <div>
//       <h2 style={{ fontSize: "16px", fontWeight: "400", color: "#000000" }}>
//         Air Cooled Chillers
//       </h2>
//       <TableContainer component={Paper}>
//         <Table sx={{ minWidth: 650 }} aria-label="simple table">
//           <TableHead>
//             <TableRow>
//               <TableCell
//                 sx={{
//                   border: "1px solid var(--Grey-4, #F4F4F4)",
//                   background: " #F7FFFF",
//                 }}
//               >
//                 S.No
//               </TableCell>
//               <TableCell
//                 align="right"
//                 sx={{
//                   border: "1px solid var(--Grey-4, #F4F4F4)",
//                   background: " #F7FFFF",
//                 }}
//               >
//                 Capacities
//               </TableCell>
//               <TableCell
//                 align="right"
//                 sx={{
//                   border: "1px solid var(--Grey-4, #F4F4F4)",
//                   background: " #F7FFFF",
//                 }}
//               >
//                 Full Load, EER
//               </TableCell>
//               <TableCell
//                 align="right"
//                 sx={{
//                   border: "1px solid var(--Grey-4, #F4F4F4)",
//                   background: " #F7FFFF",
//                 }}
//               >
//                 Full Load, CoP
//               </TableCell>
//               <TableCell
//                 align="right"
//                 sx={{
//                   border: "1px solid var(--Grey-4, #F4F4F4)",
//                   background: " #F7FFFF",
//                 }}
//               >
//                 IPLV
//               </TableCell>
//             </TableRow>
//           </TableHead>
//           <TableBody>
//             {airCooledRows.map((row) => (
//               <TableRow
//                 key={row.sNo}
//                 sx={{ "&:last-child td, &:last-child th": { border: 0 } }}
//               >
//                 <TableCell
//                   component="th"
//                   scope="row"
//                   sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
//                 >
//                   {row.sNo}
//                 </TableCell>
//                 <TableCell
//                   align="right"
//                   sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
//                 >
//                   {row.capacities}
//                 </TableCell>
//                 <TableCell
//                   align="right"
//                   sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
//                 >
//                   {row.fullLoadEer}
//                 </TableCell>
//                 <TableCell
//                   align="right"
//                   sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
//                 >
//                   {row.fullLoadCop}
//                 </TableCell>
//                 <TableCell
//                   align="right"
//                   sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
//                 >
//                   {row.iplv}
//                 </TableCell>
//               </TableRow>
//             ))}
//           </TableBody>
//         </Table>
//       </TableContainer>

//       <h2 style={{ fontSize: "16px", fontWeight: "400", color: "#000000" }}>
//         Water Cooled Chillers
//       </h2>
//       <TableContainer component={Paper} sx={{border:"1px solid var(--Grey-4, #F4F4F4)"}}>
//         <Table sx={{ minWidth: 650 }} aria-label="simple table">
//           <TableHead>
//             <TableRow>
//               <TableCell sx={{ border: "1px solid var(--Grey-4, #F4F4F4)",background: " #F7FFFF" }}>
//                 S.No
//               </TableCell>
//               <TableCell
//                 align="left"
//                 sx={{ border: "1px solid var(--Grey-4, #F4F4F4)",background: " #F7FFFF" }}
//               >
//                 Chiller Type
//               </TableCell>
//               <TableCell
//                 align="right"
//                 sx={{ border: "1px solid var(--Grey-4, #F4F4F4)",background: " #F7FFFF"}}
//               >
//                 Capacities
//               </TableCell>
//               <TableCell
//                 align="right"
//                 sx={{ border: "1px solid var(--Grey-4, #F4F4F4)",background: " #F7FFFF" }}
//               >
//                 Full Load, CoP
//               </TableCell>
//               <TableCell
//                 align="right"
//                 sx={{ border: "1px solid var(--Grey-4, #F4F4F4)",background: " #F7FFFF" }}
//               >
//                 IPLV
//               </TableCell>
//             </TableRow>
//           </TableHead>
//           <TableBody>
//             {waterCooledRows.map((row) => (
//               <TableRow
//                 key={row.sNo}
//                 sx={{
//                   "&:last-child td, &:last-child th": {
//                     border: "1px solid var(--Grey-4, #F4F4F4)",
//                   },
//                 }}
//               >
//                 <TableCell
//                   component="th"
//                   scope="row"
//                   sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
//                 >
//                   {row.sNo}
//                 </TableCell>
//                 <TableCell
//                   align="left"
//                   sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
//                 >
//                   {row.chillerType}
//                 </TableCell>
//                 <TableCell
//                   align="right"
//                   sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
//                 >
//                   {row.capacities}
//                 </TableCell>
//                 <TableCell
//                   align="right"
//                   sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
//                 >
//                   {row.fullLoadCop}
//                 </TableCell>
//                 <TableCell
//                   align="right"
//                   sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
//                 >
//                   {row.iplv}
//                 </TableCell>
//               </TableRow>
//             ))}
//           </TableBody>
//         </Table>
//       </TableContainer>
//     </div>
//   );
// }

// // import React from "react";
// // import './TablesData1.css'

// // function TablesDataDecarbonation() {
// //   return (
// //     <div>
// //      <table>
// //         <tr>
// //             <th rowspan="2">S.No</th>
// //             <th rowspan="2">Capacities</th>
// //             <th colspan="3">Minimum Efficiency</th>
// //         </tr>
// //         <tr>
// //             <th>Full Load, EER</th>
// //             <th>Full Load, CoP</th>
// //             <th>IPLV</th>
// //         </tr>
// //         <tr>
// //             <td>1</td>
// //             <td>&lt;150 TR</td>
// //             <td>&gt;9.562</td>
// //             <td>&gt;2.803</td>
// //             <td>&gt;12.5</td>
// //         </tr>
// //         <tr>
// //             <td>1</td>
// //             <td>&gt;150 TR</td>
// //             <td>&gt;9.562</td>
// //             <td>&gt;2.803</td>
// //             <td>&gt;12.5</td>
// //         </tr>
// //     </table>

// //     {/* <!-- Second Table --> */}
// //     <table>
// //         <tr>
// //             <th rowspan="2">S.No</th>
// //             <th rowspan="2">Chiller Type</th>
// //             <th rowspan="2">Capacities</th>
// //             <th colspan="2">Minimum Efficiency</th>
// //         </tr>
// //         <tr>
// //             <th>Full Load, CoP</th>
// //             <th>IPLV</th>
// //         </tr>
// //         <tr>
// //             <td rowspan="3">1</td>
// //             <td rowspan="3">Water cooled, electrically operated, positive displacement (rotary screw & scroll)</td>
// //             <td>150 TR</td>
// //             <td>&gt;4.45</td>
// //             <td>&gt;5.20</td>
// //         </tr>
// //         <tr>
// //             <td>150 TR and &lt; 300 TR</td>
// //             <td>&gt;4.90</td>
// //             <td>&gt;5.60</td>
// //         </tr>
// //         <tr>
// //             <td>300 TR</td>
// //             <td>&gt;5.50</td>
// //             <td>&gt;6.15</td>
// //         </tr>
// //         <tr>
// //             <td rowspan="3">2</td>
// //             <td rowspan="3">Water cooled, electrically operated, centrifugal</td>
// //             <td>150 TR</td>
// //             <td>&gt;5.00</td>
// //             <td>&gt;5.25</td>
// //         </tr>
// //         <tr>
// //             <td>150 TR and &lt; 300 TR</td>
// //             <td>&gt;5.55</td>
// //             <td>&gt;5.90</td>
// //         </tr>
// //         <tr>
// //             <td>300 TR</td>
// //             <td>&gt;6.10</td>
// //             <td>&gt;6.40</td>
// //         </tr>
// //     </table>
// //     </div>
// //   );
// // }

// // export default TablesDataDecarbonation;

 
&lt;
 
&gt;
 

      &gt;
 
{" "}
 

const StyledTableCellChillerType = styled(StyledTableCell)(({ theme }) => ({
  width: "20px", // Adjust width as needed
  whiteSpace: "nowrap", // Prevent text wrapping to maintain width
  overflow: "hidden", // Hide overflowed text
  textOverflow: "ellipsis", // Add ellipsis for overflowed text
}));
 

const StyledTableCellNarrow = styled(TableCell)(({ theme }) => ({
  width: "110px", // Adjust width for "Chiller Type"
  whiteSpace: "nowrap",
  overflow: "hidden",
  textOverflow: "ellipsis",
}));

const StyledTableCellWide = styled(TableCell)(({ theme }) => ({
  width: "350px", // Adjust width for other cells
}));
 

const StyledTableCellNarrow = styled(StyledTableCell)(({ theme }) => ({
  width: "150px", // Set a narrower width for "Chiller Type"
  whiteSpace: "nowrap",
  overflow: "hidden",
  textOverflow: "ellipsis",
}));

const StyledTableCellWide = styled(StyledTableCell)(({ theme }) => ({
  width: "200px", // Set a wider width for other cells
}));
 

const StyledTableCellNarrow = styled(StyledTableCell)(({ theme }) => ({
  width: "150px", // Set a narrower width for "Chiller Type"
  whiteSpace: "nowrap",
  overflow: "hidden",
  textOverflow: "ellipsis",
}));

const StyledTableCellWide = styled(StyledTableCell)(({ theme }) => ({
  width: "200px", // Set a wider width for other cells
}));
 

            <TableBody>
  <TableRow>
    <StyledTableCell rowSpan={3}>1</StyledTableCell>{" "}
    {/* Spans three rows */}
    <StyledTableCellChillerType rowSpan={3}>
      &lt;Water cooled, electrically operated, positive displacement
      (rotary screw & scroll)
    </StyledTableCellChillerType>{" "}
    {/* Spans three rows */}
    <StyledTableCell>&gt;9.562</StyledTableCell>
    <StyledTableCell>&gt;2.803</StyledTableCell>
    <StyledTableCell>&gt;12.5</StyledTableCell>
  </TableRow>
  <TableRow>
    <StyledTableCell>&gt;9.562</StyledTableCell>
    <StyledTableCell>&gt;2.803</StyledTableCell>
    <StyledTableCell>&gt;12.5</StyledTableCell>
  </TableRow>
  <TableRow>
    <StyledTableCell>&gt;9.562</StyledTableCell>
    <StyledTableCell>&gt;2.803</StyledTableCell>
    <StyledTableCell>&gt;12.5</StyledTableCell>
  </TableRow>
  <TableRow>
    <StyledTableCell rowSpan={3}>2</StyledTableCell>{" "}
    {/* Spans three rows */}
    <StyledTableCellChillerType rowSpan={3}>&gt;</StyledTableCellChillerType>{" "}
    {/* Spans three rows */}
    <StyledTableCell>&gt;9.562</StyledTableCell>
    <StyledTableCell>&gt;2.803</StyledTableCell>
    <StyledTableCell>&gt;12.5</StyledTableCell>
  </TableRow>
  <TableRow>
    <StyledTableCell>&gt;9.562</StyledTableCell>
    <StyledTableCell>&gt;2.803</StyledTableCell>
    <StyledTableCell>&gt;12.5</StyledTableCell>
  </TableRow>
  <TableRow>
    <StyledTableCell>&gt;9.562</StyledTableCell>
    <StyledTableCell>&gt;2.803</StyledTableCell>
    <StyledTableCell>&gt;12.5</StyledTableCell>
  </TableRow>
</TableBody>
 
</StyledTableCell>{" "}
 

            <TableBody>
  <TableRow>
    <StyledTableCell rowSpan={3}>1</StyledTableCell>{" "}
    {/* Spans three rows */}
    <StyledTableCellChillerType rowSpan={3}>
      &lt;Water cooled, electrically operated, positive displacement
      (rotary screw & scroll)
    </StyledTableCellChillerType>{" "}
    {/* Spans three rows */}
    <StyledTableCell>&gt;9.562</StyledTableCell>
    <StyledTableCell>&gt;2.803</StyledTableCell>
    <StyledTableCell>&gt;12.5</StyledTableCell>
  </TableRow>
  <TableRow>
    <StyledTableCell>&gt;9.562</StyledTableCell>
    <StyledTableCell>&gt;2.803</StyledTableCell>
    <StyledTableCell>&gt;12.5</StyledTableCell>
  </TableRow>
  <TableRow>
    <StyledTableCell>&gt;9.562</StyledTableCell>
    <StyledTableCell>&gt;2.803</StyledTableCell>
    <StyledTableCell>&gt;12.5</StyledTableCell>
  </TableRow>
  <TableRow>
    <StyledTableCell rowSpan={3}>2</StyledTableCell>{" "}
    {/* Spans three rows */}
    <StyledTableCellChillerType rowSpan={3}>&gt;</StyledTableCellChillerType>{" "}
    {/* Spans three rows */}
    <StyledTableCell>&gt;9.562</StyledTableCell>
    <StyledTableCell>&gt;2.803</StyledTableCell>
    <StyledTableCell>&gt;12.5</StyledTableCell>
  </TableRow>
  <TableRow>
    <StyledTableCell>&gt;9.562</StyledTableCell>
    <StyledTableCell>&gt;2.803</StyledTableCell>
    <StyledTableCell>&gt;12.5</StyledTableCell>
  </TableRow>
  <TableRow>
    <StyledTableCell>&gt;9.562</StyledTableCell>
    <StyledTableCell>&gt;2.803</StyledTableCell>
    <StyledTableCell>&gt;12.5</StyledTableCell>
  </TableRow>
</TableBody>
 

const StyledTableCellChillerType = styled(StyledTableCell)(({ theme }) => ({
  width: "20px", // Adjust width as needed
  whiteSpace: "nowrap", // Prevent text wrapping to maintain width
  overflow: "hidden", // Hide overflowed text
  textOverflow: "ellipsis", // Add ellipsis for overflowed text
}));

 

            <TableBody>
              <TableRow>
                <StyledTableCell rowSpan={3}>1</StyledTableCell>{" "}
                {/* Spans three rows */}
                <StyledTableCell rowSpan={3}>
                  &lt;Water cooled, electrically operated, positive displacement
                  (rotary screw & scroll)
                </StyledTableCell>{" "}
                {/* Spans three rows */}
                <StyledTableCell>&gt;9.562</StyledTableCell>
                <StyledTableCell>&gt;2.803</StyledTableCell>
                <StyledTableCell>&gt;12.5</StyledTableCell>
              </TableRow>
              <TableRow>
                <StyledTableCell>&gt;9.562</StyledTableCell>
                <StyledTableCell>&gt;2.803</StyledTableCell>
                <StyledTableCell>&gt;12.5</StyledTableCell>
              </TableRow>
              <TableRow>
                <StyledTableCell>&gt;9.562</StyledTableCell>
                <StyledTableCell>&gt;2.803</StyledTableCell>
                <StyledTableCell>&gt;12.5</StyledTableCell>
              </TableRow>
              <TableRow>
                <StyledTableCell rowSpan={3}>2</StyledTableCell>{" "}
                {/* Spans three rows */}
                <StyledTableCell rowSpan={3}>&gt;</StyledTableCell>{" "}
                {/* Spans three rows */}
                <StyledTableCell>&gt;9.562</StyledTableCell>
                <StyledTableCell>&gt;2.803</StyledTableCell>
                <StyledTableCell>&gt;12.5</StyledTableCell>
              </TableRow>
              <TableRow>
                <StyledTableCell>&gt;9.562</StyledTableCell>
                <StyledTableCell>&gt;2.803</StyledTableCell>
                <StyledTableCell>&gt;12.5</StyledTableCell>
              </TableRow>
              <TableRow>
                <StyledTableCell>&gt;9.562</StyledTableCell>
                <StyledTableCell>&gt;2.803</StyledTableCell>
                <StyledTableCell>&gt;12.5</StyledTableCell>
              </TableRow>
            </TableBody>
 
150 TR
 
150 TR
 
<TableBody>
            <TableRow>
              <StyledTableCell>1</StyledTableCell>
              <StyledTableCell>&lt;150 TR</StyledTableCell>
              <StyledTableCell>&gt;9.562</StyledTableCell>
              <StyledTableCell>&gt;2.803</StyledTableCell>
              <StyledTableCell>&gt;12.5</StyledTableCell>
            </TableRow>
            <TableRow>
              <StyledTableCell>2</StyledTableCell>
              <StyledTableCell>&gt;150 TR</StyledTableCell>
              <StyledTableCell>&gt;9.562</StyledTableCell>
              <StyledTableCell>&gt;2.803</StyledTableCell>
              <StyledTableCell>&gt;12.5</StyledTableCell>
            </TableRow>
          </TableBody>
 
<TableHead>
            <TableRow>
              <StyledTableHeadCell rowSpan={2}>S.No</StyledTableHeadCell>
              <StyledTableHeadCell rowSpan={2}>Capacities</StyledTableHeadCell>
              <StyledTableHeadCell colSpan={3}>
                Minimum Efficiency
              </StyledTableHeadCell>
            </TableRow>
            <TableRow>
              <StyledTableHeadCell>Full Load, EER</StyledTableHeadCell>
              <StyledTableHeadCell>Full Load, CoP</StyledTableHeadCell>
              <StyledTableHeadCell>IPLV</StyledTableHeadCell>
            </TableRow>
          </TableHead>
 

              <StyledTableHeadCell>Full Load, EER</StyledTableHeadCell>
 

const StyledTableHeadCell = styled(StyledTableCell)({
  backgroundColor: "#f0f0f0",
  fontWeight: "bold",
});
 

                  mt: "4px",
 

                  borderTop: "1px solid #E4E4E4",
 

                borderBottom:""
 

                    borderbo
 

                borderBottom:"0px",
 
{/* Questions and Answers */}
        {questionText.map((q, questionIndex) => (
          <React.Fragment key={questionIndex}>
            {/* Question Text */}
            <Grid2
              sx={{
                display: "flex",
                flexDirection: "row",
                alignItems: "center",
                gap: "12px",
                ml: "15px",
              }}
            >
              <Box
                sx={{
                  width: "37px",
                  height: "34px",
                  backgroundColor: "#F7F7F7",
                  padding: "7px",
                  borderRadius: "6px",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                }}
              >
                <Typography color="#5B5B5B" fontSize="14px" fontWeight="400">
                  Q.{questionIndex + 1}
                </Typography>
              </Box>
              <Typography fontSize="14px" fontWeight="500" color="#000">
                {q}
              </Typography>
            </Grid2>

            {/* Conditional Rendering of Table */}
            {showTable && questionIndex === 0 && TableComponent && (
              <Grid2
                sx={{
                  borderTop: "1px solid #E4E4E4",
                  mt: "8px",
                  mb: "8px",
                  ml: "0px",
                  padding: "10px 19px",
                  borderRadius: "5px",
                }}
              >
                <TableComponent /> {/* Render the selected table component */}
              </Grid2>
            )}

            {/* Answers or Implementation Required */}
            {!showTable && (
              <Grid2
                sx={{
                  borderTop: "1px solid #E4E4E4",
                  mt: "8px",
                  mb: "8px",
                  ml: "0px",
                  padding: "10px 19px",
                  borderRadius: "5px",
                }}
              >
                {answers[questionIndex]?.length > 0 ? (
                  // Display Answers
                  <Grid2
                    sx={{
                      border: "1px solid var(--Grey-3, #D9D9D9)",
                      background: "#F7FFFC",
                      borderRadius: "5px",
                      padding: "1px 12px",
                    }}
                  >
                    {answers[questionIndex].map((answer, answerIndex) => (
                      <Typography
                        key={answerIndex}
                        fontSize="12px"
                        fontWeight={
                          boldAnswerIndex === questionIndex ||
                          boldAnswerIndex >= answers[questionIndex].length
                            ? "700" // Apply bold if boldAnswerIndex matches or exceeds total answers
                            : "500"
                        }
                        color="#000"
                        sx={{ padding: "6px 0" }}
                      >
                        {answerIndex + 1}. {answer}
                      </Typography>
                    ))}
                  </Grid2>
                ) : (
                  // Display Implementation Required with Logo
                  <Grid2
                    sx={{
                      display: "flex",
                      alignItems: "center",
                      gap: "12px",
                      borderRadius: "5px",
                      padding: "10px",
                    }}
                  >
                    <img
                      src={magelightBuld}
                      alt="Implementation Required"
                      width="18px"
                    />
                    <Typography fontSize="12px" fontWeight="500" color="#000">
                      Implementation Required
                    </Typography>
                  </Grid2>
                )}
              </Grid2>
            )}
          </React.Fragment>
        ))}
 
{/* Questions and Answers */}
        {questionText.map((q, questionIndex) => (
          <React.Fragment key={questionIndex}>
            {/* Question Text */}
            <Grid2
              sx={{
                display: "flex",
                flexDirection: "row",
                alignItems: "center",
                gap: "12px",
                ml: "15px",
              }}
            >
              <Box
                sx={{
                  width: "37px",
                  height: "34px",
                  backgroundColor: "#F7F7F7",
                  padding: "7px",
                  borderRadius: "6px",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                }}
              >
                <Typography color="#5B5B5B" fontSize="14px" fontWeight="400">
                  Q.{questionIndex + 1}
                </Typography>
              </Box>
              <Typography fontSize="14px" fontWeight="500" color="#000">
                {q}
              </Typography>
            </Grid2>

            {/* Conditional Rendering of Table */}
            {showTable && questionIndex === 0 && TableComponent && (
              <Grid2
                sx={{
                  borderTop: "1px solid #E4E4E4",
                  mt: "8px",
                  mb: "8px",
                  ml: "0px",
                  padding: "10px 19px",
                  borderRadius: "5px",
                }}
              >
                <TableComponent /> {/* Render the selected table component */}
              </Grid2>
            )}

            {/* Answers or Implementation Required */}
            {!showTable && (
              <Grid2
                sx={{
                  borderTop: "1px solid #E4E4E4",
                  mt: "8px",
                  mb: "8px",
                  ml: "0px",
                  padding: "10px 19px",
                  borderRadius: "5px",
                }}
              >
                {answers[questionIndex]?.length > 0 ? (
                  // Display Answers
                  <Grid2
                    sx={{
                      border: "1px solid var(--Grey-3, #D9D9D9)",
                      background: "#F7FFFC",
                      borderRadius: "5px",
                      padding: "1px 12px",
                    }}
                  >
                    {answers[questionIndex].map((answer, answerIndex) => (
                      <Typography
                        key={answerIndex}
                        fontSize="12px"
                        fontWeight={
                          boldAnswerIndex === questionIndex ||
                          boldAnswerIndex >= answers[questionIndex].length
                            ? "700" // Apply bold if boldAnswerIndex matches or exceeds total answers
                            : "500"
                        }
                        color="#000"
                        sx={{ padding: "6px 0" }}
                      >
                        {answerIndex + 1}. {answer}
                      </Typography>
                    ))}
                  </Grid2>
                ) : (
                  // Display Implementation Required with Logo
                  <Grid2
                    sx={{
                      display: "flex",
                      alignItems: "center",
                      gap: "12px",
                      borderRadius: "5px",
                      padding: "10px",
                    }}
                  >
                    <img
                      src={magelightBuld}
                      alt="Implementation Required"
                      width="18px"
                    />
                    <Typography fontSize="12px" fontWeight="500" color="#000">
                      Implementation Required
                    </Typography>
                  </Grid2>
                )}
              </Grid2>
            )}
          </React.Fragment>
        ))}
 
{/* Questions and Answers */}
        {questionText.map((q, questionIndex) => (
          <React.Fragment key={questionIndex}>
            {/* Question Text */}
            <Grid2
              sx={{
                display: "flex",
                flexDirection: "row",
                alignItems: "center",
                gap: "12px",
                ml: "15px",
              }}
            >
              <Box
                sx={{
                  width: "37px",
                  height: "34px",
                  backgroundColor: "#F7F7F7",
                  padding: "7px",
                  borderRadius: "6px",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                }}
              >
                <Typography color="#5B5B5B" fontSize="14px" fontWeight="400">
                  Q.{questionIndex + 1}
                </Typography>
              </Box>
              <Typography fontSize="14px" fontWeight="500" color="#000">
                {q}
              </Typography>
            </Grid2>

            {/* Conditional Rendering of Table */}
            {showTable && questionIndex === 0 && TableComponent && (
              <Grid2
                sx={{
                  borderTop: "1px solid #E4E4E4",
                  mt: "8px",
                  mb: "8px",
                  ml: "0px",
                  padding: "10px 19px",
                  borderRadius: "5px",
                }}
              >
                <TableComponent /> {/* Render the selected table component */}
              </Grid2>
            )}

            {/* Answers or Implementation Required */}
            {!showTable && (
              <Grid2
                sx={{
                  borderTop: "1px solid #E4E4E4",
                  mt: "8px",
                  mb: "8px",
                  ml: "0px",
                  padding: "10px 19px",
                  borderRadius: "5px",
                }}
              >
                {answers[questionIndex]?.length > 0 ? (
                  // Display Answers
                  <Grid2
                    sx={{
                      border: "1px solid var(--Grey-3, #D9D9D9)",
                      background: "#F7FFFC",
                      borderRadius: "5px",
                      padding: "1px 12px",
                    }}
                  >
                    {answers[questionIndex].map((answer, answerIndex) => (
                      <Typography
                        key={answerIndex}
                        fontSize="12px"
                        fontWeight={
                          boldAnswerIndex === questionIndex ||
                          boldAnswerIndex >= answers[questionIndex].length
                            ? "700" // Apply bold if boldAnswerIndex matches or exceeds total answers
                            : "500"
                        }
                        color="#000"
                        sx={{ padding: "6px 0" }}
                      >
                        {answerIndex + 1}. {answer}
                      </Typography>
                    ))}
                  </Grid2>
                ) : (
                  // Display Implementation Required with Logo
                  <Grid2
                    sx={{
                      display: "flex",
                      alignItems: "center",
                      gap: "12px",
                      borderRadius: "5px",
                      padding: "10px",
                    }}
                  >
                    <img
                      src={magelightBuld}
                      alt="Implementation Required"
                      width="18px"
                    />
                    <Typography fontSize="12px" fontWeight="500" color="#000">
                      Implementation Required
                    </Typography>
                  </Grid2>
                )}
              </Grid2>
            )}
          </React.Fragment>
        ))}
 

  // Add more rows as needed
 

const airCooledRows = [
  createData(1, "", "<150 TR", ">9.562", ">2.803", ">12.5"),
  createData(1, "", ">150 TR", ">9.562", ">2.803", ">12.5"),
];
 

    "",
 
<TableBody>
            {airCooledRows.map((row) => (
              <TableRow
                key={row.sNo}
                sx={{ "&:last-child td, &:last-child th": { border: 0 } }}
              >
                <TableCell
                  component="th"
                  scope="row"
                  sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
                >
                  {row.sNo}
                </TableCell>
                <TableCell
                  align="right"
                  sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
                >
                  {row.capacities}
                </TableCell>
                <TableCell
                  align="right"
                  sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
                >
                  {row.fullLoadEer}
                </TableCell>
                <TableCell
                  align="right"
                  sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
                >
                  {row.fullLoadCop}
                </TableCell>
                <TableCell
                  align="right"
                  sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
                >
                  {row.iplv}
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
 


      <h2 style={{ fontSize: "16px", fontWeight: "400", color: "#000000" }}>
        Water Cooled Chillers
      </h2>
      <TableContainer component={Paper} sx={{border:"1px solid var(--Grey-4, #F4F4F4)"}}>
        <Table sx={{ minWidth: 650 }} aria-label="simple table">
          <TableHead>
            <TableRow>
              <TableCell sx={{ border: "1px solid var(--Grey-4, #F4F4F4)",background: " #F7FFFF" }}>
                S.No
              </TableCell>
              <TableCell
                align="left"
                sx={{ border: "1px solid var(--Grey-4, #F4F4F4)",background: " #F7FFFF" }}
              >
                Chiller Type
              </TableCell>
              <TableCell
                align="right"
                sx={{ border: "1px solid var(--Grey-4, #F4F4F4)",background: " #F7FFFF"}}
              >
                Capacities
              </TableCell>
              <TableCell
                align="right"
                sx={{ border: "1px solid var(--Grey-4, #F4F4F4)",background: " #F7FFFF" }}
              >
                Full Load, CoP
              </TableCell>
              <TableCell
                align="right"
                sx={{ border: "1px solid var(--Grey-4, #F4F4F4)",background: " #F7FFFF" }}
              >
                IPLV
              </TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {waterCooledRows.map((row) => (
              <TableRow
                key={row.sNo}
                sx={{
                  "&:last-child td, &:last-child th": {
                    border: "1px solid var(--Grey-4, #F4F4F4)",
                  },
                }}
              >
                <TableCell
                  component="th"
                  scope="row"
                  sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
                >
                  {row.sNo}
                </TableCell>
                <TableCell
                  align="left"
                  sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
                >
                  {row.chillerType}
                </TableCell>
                <TableCell
                  align="right"
                  sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
                >
                  {row.capacities}
                </TableCell>
                <TableCell
                  align="right"
                  sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
                >
                  {row.fullLoadCop}
                </TableCell>
                <TableCell
                  align="right"
                  sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
                >
                  {row.iplv}
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
 

const StyledTableHeadCell = styled(TableCell)({
  background: " #F7FFFF",
  fontWeight: "bold",
  textAlign:"center",
  border:"1px solid var(--Grey-4, #F4F4F4)",
});
 

  height:"5px"
 
<TableHead >
            {/* <TableRow>
              <TableCell
                sx={{
                  border: "1px solid var(--Grey-4, #F4F4F4)",
                  background: " #F7FFFF",
                }}
              >
                S.No
              </TableCell>
              <TableCell
                align="right"
                sx={{
                  border: "1px solid var(--Grey-4, #F4F4F4)",
                  background: " #F7FFFF",
                }}
              >
                Capacities
              </TableCell>
              <TableCell
                align="right"
                sx={{
                  border: "1px solid var(--Grey-4, #F4F4F4)",
                  background: " #F7FFFF",
                }}
              >
                Full Load, EER
              </TableCell>
              <TableCell
                align="right"
                sx={{
                  border: "1px solid var(--Grey-4, #F4F4F4)",
                  background: " #F7FFFF",
                }}
              >
                Full Load, CoP
              </TableCell>
              <TableCell
                align="right"
                sx={{
                  border: "1px solid var(--Grey-4, #F4F4F4)",
                  background: " #F7FFFF",
                }}
              >
                IPLV
              </TableCell>
            </TableRow> */}
            <TableRow >
              <StyledTableHeadCell rowSpan={2}>S.No</StyledTableHeadCell>
              <StyledTableHeadCell rowSpan={2}>Capacities</StyledTableHeadCell>
              <StyledTableHeadCell colSpan={3}>
                Minimum Efficiency
              </StyledTableHeadCell>
            </TableRow>
          </TableHead>
 
TableRow >
              <StyledTableHeadCell rowSpan={2}>S.No</StyledTableHeadCell>
              <StyledTableHeadCell rowSpan={2}>Capacities</StyledTableHeadCell>
              <StyledTableHeadCell colSpan={3}>
                Minimum Efficiency
              </StyledTableHeadCell>
            </TableRow>
 

const StyledTableHeadCell = styled(TableCell)({
  background: " #F7FFFF",
  fontWeight: "bold",
});

 
backgroundColor: "#f0f0f0",
 

const StyledTableHeadCell = styled(StyledTableCell)({
  backgroundColor: "#f0f0f0",
  fontWeight: "bold",
});
const StyledTableCell = styled(TableCell)({
  border: "1px solid #ddd", // Border around the cell
  padding: "8px",
  textAlign: "center",
  fontSize: "14px",
});
 

const StyledTableHeadCell = styled(StyledTableCell)({
  backgroundColor: "#f0f0f0",
  fontWeight: "bold",
});
const StyledTableCell = styled(TableCell)({
  border: "1px solid #ddd", // Border around the cell
  padding: "8px",
  textAlign: "center",
  fontSize: 
 

    </>
 
import React from "react";
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Grid2,
} from "@mui/material";
import { styled } from "@mui/system";

// Custom styled components for consistent appearance
const CustomTable = styled(Table)({
  minWidth: 650,
  borderCollapse: "collapse",
});

const CustomTableCell = styled(TableCell)({
  border: "1px solid #ddd", // Border around the cell
  padding: "8px",
  textAlign: "center",
  fontSize: "14px",
});

const CustomTableHeadCell = styled(CustomTableCell)({
  backgroundColor: "#f0f0f0",
  fontWeight: "bold",
});

// Custom styled components for consistent appearance
const StyledTable = styled(Table)({
  minWidth: 650,
  borderCollapse: "collapse",
});

const StyledTableCell = styled(TableCell)({
  border: "1px solid #ddd", // Border around the cell
  padding: "8px",
  textAlign: "center",
  fontSize: "14px",
});

const StyledTableHeadCell = styled(StyledTableCell)({
  backgroundColor: "#f0f0f0",
  fontWeight: "bold",
});

function EfficiencyTable() {
  return (
    <>
      <h2 style={{ fontSize: "16px", fontWeight: "400", color: "#000000" }}>
        Air Cooled Chillers
      </h2>
      <TableContainer component={Paper}>
        <StyledTable aria-label="efficiency table">
          <TableHead>
            <TableRow>
              <StyledTableHeadCell rowSpan={2}>S.No</StyledTableHeadCell>
              <StyledTableHeadCell rowSpan={2}>Capacities</StyledTableHeadCell>
              <StyledTableHeadCell colSpan={3}>
                Minimum Efficiency
              </StyledTableHeadCell>
            </TableRow>
            <TableRow>
              <StyledTableHeadCell>Full Load, EER</StyledTableHeadCell>
              <StyledTableHeadCell>Full Load, CoP</StyledTableHeadCell>
              <StyledTableHeadCell>IPLV</StyledTableHeadCell>
            </TableRow>
          </TableHead>
          <TableBody>
            <TableRow>
              <StyledTableCell>1</StyledTableCell>
              <StyledTableCell>&lt;150 TR</StyledTableCell>
              <StyledTableCell>&gt;9.562</StyledTableCell>
              <StyledTableCell>&gt;2.803</StyledTableCell>
              <StyledTableCell>&gt;12.5</StyledTableCell>
            </TableRow>
            <TableRow>
              <StyledTableCell>2</StyledTableCell>
              <StyledTableCell>&gt;150 TR</StyledTableCell>
              <StyledTableCell>&gt;9.562</StyledTableCell>
              <StyledTableCell>&gt;2.803</StyledTableCell>
              <StyledTableCell>&gt;12.5</StyledTableCell>
            </TableRow>
          </TableBody>
        </StyledTable>
      </TableContainer>

      {/* table 2 */}
      <Grid2 sx={{mt:10px}}>
      <TableContainer component={Paper}>
        <CustomTable aria-label="chiller efficiency table">
          <TableHead>
            <TableRow>
              <CustomTableHeadCell rowSpan={2}>S.No</CustomTableHeadCell>
              <CustomTableHeadCell rowSpan={2}>
                Chiller Type
              </CustomTableHeadCell>
              <CustomTableHeadCell rowSpan={2}>Capacities</CustomTableHeadCell>
              <CustomTableHeadCell colSpan={2}>
                Minimum Efficiency
              </CustomTableHeadCell>
            </TableRow>
            <TableRow>
              <CustomTableHeadCell>Full Load, CoP</CustomTableHeadCell>
              <CustomTableHeadCell>IPLV</CustomTableHeadCell>
            </TableRow>
          </TableHead>
          <TableBody>
            <TableRow>
              <CustomTableCell rowSpan={3}>1</CustomTableCell>
              <CustomTableCell rowSpan={3}>
                Water cooled, electrically operated, positive displacement
                (rotary screw & scroll)
              </CustomTableCell>
              <CustomTableCell>150 TR</CustomTableCell>
              <CustomTableCell>&gt;4.45</CustomTableCell>
              <CustomTableCell>&gt;5.20</CustomTableCell>
            </TableRow>
            <TableRow>
              <CustomTableCell>150 TR and &lt; 300 TR</CustomTableCell>
              <CustomTableCell>&gt;4.90</CustomTableCell>
              <CustomTableCell>&gt;5.60</CustomTableCell>
            </TableRow>
            <TableRow>
              <CustomTableCell>300 TR</CustomTableCell>
              <CustomTableCell>&gt;5.50</CustomTableCell>
              <CustomTableCell>&gt;6.15</CustomTableCell>
            </TableRow>
            <TableRow>
              <CustomTableCell rowSpan={3}>2</CustomTableCell>
              <CustomTableCell rowSpan={3}>
                Water cooled, electrically operated, centrifugal
              </CustomTableCell>
              <CustomTableCell>150 TR</CustomTableCell>
              <CustomTableCell>&gt;5.00</CustomTableCell>
              <CustomTableCell>&gt;5.25</CustomTableCell>
            </TableRow>
            <TableRow>
              <CustomTableCell>150 TR and &lt; 300 TR</CustomTableCell>
              <CustomTableCell>&gt;5.55</CustomTableCell>
              <CustomTableCell>&gt;5.90</CustomTableCell>
            </TableRow>
            <TableRow>
              <CustomTableCell>300 TR</CustomTableCell>
              <CustomTableCell>&gt;6.10</CustomTableCell>
              <CustomTableCell>&gt;6.40</CustomTableCell>
            </TableRow>
          </TableBody>
        </CustomTable>
      </TableContainer>
      </Grid2>
    </>
  );
}

export default EfficiencyTable;

 
sx={{mt:"40px"}}
 
import React from "react";
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
} from "@mui/material";
import { styled } from "@mui/system";

// Custom styled components for consistent appearance
const StyledTable = styled(Table)({
  minWidth: 650,
  borderCollapse: "collapse",
});

const StyledTableCell = styled(TableCell)({
  border: "1px solid #ddd", // Border around the cell
  padding: "8px",
  textAlign: "center",
  fontSize: "14px",
});

const StyledTableHeadCell = styled(StyledTableCell)({
  backgroundColor: "#f0f0f0",
  fontWeight: "bold",
});

function EfficiencyTable() {
  return (
    <>
      <h2 style={{ fontSize: "16px", fontWeight: "400", color: "#000000" }}>
        Air Cooled Chillers
      </h2>
      <TableContainer component={Paper}>
        <StyledTable aria-label="efficiency table">
          <TableHead>
            <TableRow>
              <StyledTableHeadCell rowSpan={2}>S.No</StyledTableHeadCell>
              <StyledTableHeadCell rowSpan={2}>Capacities</StyledTableHeadCell>
              <StyledTableHeadCell colSpan={3}>
                Minimum Efficiency
              </StyledTableHeadCell>
            </TableRow>
            <TableRow>
              <StyledTableHeadCell>Full Load, EER</StyledTableHeadCell>
              <StyledTableHeadCell>Full Load, CoP</StyledTableHeadCell>
              <StyledTableHeadCell>IPLV</StyledTableHeadCell>
            </TableRow>
          </TableHead>
          <TableBody>
            <TableRow>
              <StyledTableCell>1</StyledTableCell>
              <StyledTableCell>&lt;150 TR</StyledTableCell>
              <StyledTableCell>&gt;9.562</StyledTableCell>
              <StyledTableCell>&gt;2.803</StyledTableCell>
              <StyledTableCell>&gt;12.5</StyledTableCell>
            </TableRow>
            <TableRow>
              <StyledTableCell>2</StyledTableCell>
              <StyledTableCell>&gt;150 TR</StyledTableCell>
              <StyledTableCell>&gt;9.562</StyledTableCell>
              <StyledTableCell>&gt;2.803</StyledTableCell>
              <StyledTableCell>&gt;12.5</StyledTableCell>
            </TableRow>
          </TableBody>
        </StyledTable>
      </TableContainer>
    </>
  );
}

export default EfficiencyTable;
 
import React from "react";
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Grid,
  Box,
} from "@mui/material";
import { styled } from "@mui/system";

// Custom styled components for consistent appearance
const StyledTable = styled(Table)({
  minWidth: 650, // Yeh table ki minimum width set karta hai, isse adjust karein apne layout ke hisaab se.
  borderCollapse: "collapse",
  height:"10px"
});

const StyledTableCell = styled(TableCell)({
  border: "1px solid #ddd", // Yeh border set karta hai cell ke aas-paas.
  padding: "8px", // Yeh padding hai cell ke andar ki spacing ke liye.

});

const StyledTableHeadCell = styled(StyledTableCell)({
  backgroundColor: "#f0f0f0", // Header cell ki background color.
  fontWeight: "bold",
  textAlign: "center",
});

function CustomTable() {
  return (
    <TableContainer component={Paper}>
      <StyledTable aria-label="custom table">
        <TableBody>
          <TableRow>
            <StyledTableCell>Row 1, Col 1</StyledTableCell>
            <StyledTableCell>Row 1, Col 2</StyledTableCell>
            <StyledTableCell>
              {/* Yeh container hai jo third column ko split karta hai */}
              <Grid container direction="column" style={{ height: "100%" }}>
                {/* Top part of the third column */}
                <Grid item style={{ borderBottom: "1px solid #ddd" }}>
                  <Box
                    display="flex"
                    justifyContent="center"
                    alignItems="center"
                    height="10px" // Yahan se top part ki height adjust karein. Is value ko change karke height set kar sakte hain.
                  >
                    Top Part
                  </Box>
                </Grid>
                {/* Bottom part of the third column with 3 smaller columns */}
                <Grid item>
                  <Grid container>
                    <StyledTableCell
                      component="div"
                      style={{ borderRight: "1px solid #ddd", width: "33.33%" }} // First bottom column ki width yahan set karein.
                    >
                      Bottom 1
                    </StyledTableCell>
                    <StyledTableCell
                      component="div"
                      style={{ borderRight: "1px solid #ddd", width: "33.33%" }} // Second bottom column ki width yahan set karein.
                    >
                      Bottom 2
                    </StyledTableCell>
                    <StyledTableCell component="div" style={{ width: "33.33%" }}> // Third bottom column ki width yahan set karein.
                      Bottom 3
                    </StyledTableCell>
                  </Grid>
                </Grid>
              </Grid>
            </StyledTableCell>
          </TableRow>
        </TableBody>
      </StyledTable>
    </TableContainer>
  );
}

export default CustomTable;

 

  padding: "8px", // Yeh padding hai cell ke andar ki spacing ke liye.
 

        {/* <TableHead>
          <TableRow>
            <StyledTableHeadCell>Column 1</StyledTableHeadCell>
            <StyledTableHeadCell>Column 2</StyledTableHeadCell>
            <StyledTableHeadCell>Column 3</StyledTableHeadCell>
          </TableRow>
        </TableHead> */}
 
import React from 'react'
import { TableContainer,TableHead,TableRow,TableCell, TableBody, Paper } from '@mui/material'

function TablesDataDecarbonation() {
  return (
    <div>
      <TableContainer component={Paper}>
        <TableHead>
          <TableRow><TableCell>hagf</TableCell></TableRow>
          <TableRow><TableCell>Capacities</TableCell></TableRow>
          <TableRow><TableCell>Full Load, EER</TableCell></TableRow>
          <TableRow><TableCell>Full Load, EER</TableCell></TableRow>
          <TableRow><TableCell>Full Load, EER</TableCell></TableRow>
          <TableRow><TableCell>Full Load, EER</TableCell></TableRow>
        </TableHead>
        <TableBody>
          <TableRow>
            <TableCell>1</TableCell>
            <TableCell>2</TableCell>
            <TableCell>3</TableCell>
            <TableCell>4</TableCell>
            <TableCell>5</TableCell>
            <TableCell>6</TableCell>
          </TableRow>
          <TableRow>
            <TableCell>1</TableCell>
            <TableCell>2</TableCell>
            <TableCell>3</TableCell>
            <TableCell>4</TableCell>
            <TableCell>5</TableCell>
            <TableCell>6</TableCell>
          </TableRow>
        </TableBody>
      </TableContainer>
    </div>
  )
}

export default TablesDataDecarbonation

 
Full Load, EER
 
// import * as React from "react";
// import Table from "@mui/material/Table";
// import TableBody from "@mui/material/TableBody";
// import TableCell from "@mui/material/TableCell";
// import TableContainer from "@mui/material/TableContainer";
// import TableHead from "@mui/material/TableHead";
// import TableRow from "@mui/material/TableRow";
// import Paper from "@mui/material/Paper";

// function createData(sNo, chillerType, capacities, fullLoadCop, iplv) {
//   return { sNo, chillerType, capacities, fullLoadCop, iplv };
// }

// const airCooledRows = [
//   createData(1, "", "<150 TR", ">9.562", ">2.803", ">12.5"),
//   createData(1, "", ">150 TR", ">9.562", ">2.803", ">12.5"),
// ];

// const waterCooledRows = [
//   createData(
//     1,
//     "Water cooled, electrically operated, positive displacement (rotary screw & scroll)",
//     "150 TR",
//     ">4.45",
//     ">5.20"
//   ),
//   createData(
//     1,
//     "Water cooled, electrically operated, positive displacement (rotary screw & scroll)",
//     "150 TR and < 300 TR",
//     ">4.90",
//     ">5.60"
//   ),
//   createData(
//     1,
//     "Water cooled, electrically operated, positive displacement (rotary screw & scroll)",
//     "300 TR",
//     ">5.50",
//     ">6.15"
//   ),
//   createData(
//     2,
//     "Water cooled, electrically operated, centrifugal",
//     "150 TR",
//     ">5.00",
//     ">5.25"
//   ),
//   createData(
//     2,
//     "Water cooled, electrically operated, centrifugal",
//     "150 TR and < 300 TR",
//     ">5.55",
//     ">5.90"
//   ),
//   createData(
//     2,
//     "Water cooled, electrically operated, centrifugal",
//     "300 TR",
//     ">6.10",
//     ">6.40"
//   ),
// ];

// export default function BasicTable() {
//   return (
//     <div>
//       <h2 style={{ fontSize: "16px", fontWeight: "400", color: "#000000" }}>
//         Air Cooled Chillers
//       </h2>
//       <TableContainer component={Paper}>
//         <Table sx={{ minWidth: 650 }} aria-label="simple table">
//           <TableHead>
//             <TableRow>
//               <TableCell
//                 sx={{
//                   border: "1px solid var(--Grey-4, #F4F4F4)",
//                   background: " #F7FFFF",
//                 }}
//               >
//                 S.No
//               </TableCell>
//               <TableCell
//                 align="right"
//                 sx={{
//                   border: "1px solid var(--Grey-4, #F4F4F4)",
//                   background: " #F7FFFF",
//                 }}
//               >
//                 Capacities
//               </TableCell>
//               <TableCell
//                 align="right"
//                 sx={{
//                   border: "1px solid var(--Grey-4, #F4F4F4)",
//                   background: " #F7FFFF",
//                 }}
//               >
//                 Full Load, EER
//               </TableCell>
//               <TableCell
//                 align="right"
//                 sx={{
//                   border: "1px solid var(--Grey-4, #F4F4F4)",
//                   background: " #F7FFFF",
//                 }}
//               >
//                 Full Load, CoP
//               </TableCell>
//               <TableCell
//                 align="right"
//                 sx={{
//                   border: "1px solid var(--Grey-4, #F4F4F4)",
//                   background: " #F7FFFF",
//                 }}
//               >
//                 IPLV
//               </TableCell>
//             </TableRow>
//           </TableHead>
//           <TableBody>
//             {airCooledRows.map((row) => (
//               <TableRow
//                 key={row.sNo}
//                 sx={{ "&:last-child td, &:last-child th": { border: 0 } }}
//               >
//                 <TableCell
//                   component="th"
//                   scope="row"
//                   sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
//                 >
//                   {row.sNo}
//                 </TableCell>
//                 <TableCell
//                   align="right"
//                   sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
//                 >
//                   {row.capacities}
//                 </TableCell>
//                 <TableCell
//                   align="right"
//                   sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
//                 >
//                   {row.fullLoadEer}
//                 </TableCell>
//                 <TableCell
//                   align="right"
//                   sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
//                 >
//                   {row.fullLoadCop}
//                 </TableCell>
//                 <TableCell
//                   align="right"
//                   sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
//                 >
//                   {row.iplv}
//                 </TableCell>
//               </TableRow>
//             ))}
//           </TableBody>
//         </Table>
//       </TableContainer>

//       <h2 style={{ fontSize: "16px", fontWeight: "400", color: "#000000" }}>
//         Water Cooled Chillers
//       </h2>
//       <TableContainer component={Paper} sx={{border:"1px solid var(--Grey-4, #F4F4F4)"}}>
//         <Table sx={{ minWidth: 650 }} aria-label="simple table">
//           <TableHead>
//             <TableRow>
//               <TableCell sx={{ border: "1px solid var(--Grey-4, #F4F4F4)",background: " #F7FFFF" }}>
//                 S.No
//               </TableCell>
//               <TableCell
//                 align="left"
//                 sx={{ border: "1px solid var(--Grey-4, #F4F4F4)",background: " #F7FFFF" }}
//               >
//                 Chiller Type
//               </TableCell>
//               <TableCell
//                 align="right"
//                 sx={{ border: "1px solid var(--Grey-4, #F4F4F4)",background: " #F7FFFF"}}
//               >
//                 Capacities
//               </TableCell>
//               <TableCell
//                 align="right"
//                 sx={{ border: "1px solid var(--Grey-4, #F4F4F4)",background: " #F7FFFF" }}
//               >
//                 Full Load, CoP
//               </TableCell>
//               <TableCell
//                 align="right"
//                 sx={{ border: "1px solid var(--Grey-4, #F4F4F4)",background: " #F7FFFF" }}
//               >
//                 IPLV
//               </TableCell>
//             </TableRow>
//           </TableHead>
//           <TableBody>
//             {waterCooledRows.map((row) => (
//               <TableRow
//                 key={row.sNo}
//                 sx={{
//                   "&:last-child td, &:last-child th": {
//                     border: "1px solid var(--Grey-4, #F4F4F4)",
//                   },
//                 }}
//               >
//                 <TableCell
//                   component="th"
//                   scope="row"
//                   sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
//                 >
//                   {row.sNo}
//                 </TableCell>
//                 <TableCell
//                   align="left"
//                   sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
//                 >
//                   {row.chillerType}
//                 </TableCell>
//                 <TableCell
//                   align="right"
//                   sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
//                 >
//                   {row.capacities}
//                 </TableCell>
//                 <TableCell
//                   align="right"
//                   sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
//                 >
//                   {row.fullLoadCop}
//                 </TableCell>
//                 <TableCell
//                   align="right"
//                   sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
//                 >
//                   {row.iplv}
//                 </TableCell>
//               </TableRow>
//             ))}
//           </TableBody>
//         </Table>
//       </TableContainer>
//     </div>
//   );
// }
 
function createData(sNo, chillerType, capacities, fullLoadCop, iplv) {
//   return { sNo, chillerType, capacities, fullLoadCop, iplv };
// }

// const airCooledRows = [
//   createData(1, "", "<150 TR", ">9.562", ">2.803", ">12.5"),
//   createData(1, "", ">150 TR", ">9.562", ">2.803", ">12.5"),
// ];

// const waterCooledRows = [
//   createData(
//     1,
//     "Water cooled, electrically operated, positive displacement (rotary screw & scroll)",
//     "150 TR",
//     ">4.45",
//     ">5.20"
//   ),
//   createData(
//     1,
//     "Water cooled, electrically operated, positive displacement (rotary screw & scroll)",
//     "150 TR and < 300 TR",
//     ">4.90",
//     ">5.60"
//   ),
//   createData(
//     1,
//     "Water cooled, electrically operated, positive displacement (rotary screw & scroll)",
//     "300 TR",
//     ">5.50",
//     ">6.15"
//   ),
//   createData(
//     2,
//     "Water cooled, electrically operated, centrifugal",
//     "150 TR",
//     ">5.00",
//     ">5.25"
//   ),
//   createData(
//     2,
//     "Water cooled, electrically operated, centrifugal",
//     "150 TR and < 300 TR",
//     ">5.55",
//     ">5.90"
//   ),
//   createData(
//     2,
//     "Water cooled, electrically operated, centrifugal",
//     "300 TR",
//     ">6.10",
//     ">6.40"
//   ),
// ];

// export default function BasicTable() {
//   return (
//     <div>
//       <h2 style={{ fontSize: "16px", fontWeight: "400", color: "#000000" }}>
//         Air Cooled Chillers
//       </h2>
//       <TableContainer component={Paper}>
//         <Table sx={{ minWidth: 650 }} aria-label="simple table">
//           <TableHead>
//             <TableRow>
//               <TableCell
//                 sx={{
//                   border: "1px solid var(--Grey-4, #F4F4F4)",
//                   background: " #F7FFFF",
//                 }}
//               >
//                 S.No
//               </TableCell>
//               <TableCell
//                 align="right"
//                 sx={{
//                   border: "1px solid var(--Grey-4, #F4F4F4)",
//                   background: " #F7FFFF",
//                 }}
//               >
//                 Capacities
//               </TableCell>
//               <TableCell
//                 align="right"
//                 sx={{
//                   border: "1px solid var(--Grey-4, #F4F4F4)",
//                   background: " #F7FFFF",
//                 }}
//               >
//                 Full Load, EER
//               </TableCell>
//               <TableCell
//                 align="right"
//                 sx={{
//                   border: "1px solid var(--Grey-4, #F4F4F4)",
//                   background: " #F7FFFF",
//                 }}
//               >
//                 Full Load, CoP
//               </TableCell>
//               <TableCell
//                 align="right"
//                 sx={{
//                   border: "1px solid var(--Grey-4, #F4F4F4)",
//                   background: " #F7FFFF",
//                 }}
//               >
//                 IPLV
//               </TableCell>
//             </TableRow>
//           </TableHead>
//           <TableBody>
//             {airCooledRows.map((row) => (
//               <TableRow
//                 key={row.sNo}
//                 sx={{ "&:last-child td, &:last-child th": { border: 0 } }}
//               >
//                 <TableCell
//                   component="th"
//                   scope="row"
//                   sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
//                 >
//                   {row.sNo}
//                 </TableCell>
//                 <TableCell
//                   align="right"
//                   sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
//                 >
//                   {row.capacities}
//                 </TableCell>
//                 <TableCell
//                   align="right"
//                   sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
//                 >
//                   {row.fullLoadEer}
//                 </TableCell>
//                 <TableCell
//                   align="right"
//                   sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
//                 >
//                   {row.fullLoadCop}
//                 </TableCell>
//                 <TableCell
//                   align="right"
//                   sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
//                 >
//                   {row.iplv}
//                 </TableCell>
//               </TableRow>
//             ))}
//           </TableBody>
//         </Table>
//       </TableContainer>

//       <h2 style={{ fontSize: "16px", fontWeight: "400", color: "#000000" }}>
//         Water Cooled Chillers
//       </h2>
//       <TableContainer component={Paper} sx={{border:"1px solid var(--Grey-4, #F4F4F4)"}}>
//         <Table sx={{ minWidth: 650 }} aria-label="simple table">
//           <TableHead>
//             <TableRow>
//               <TableCell sx={{ border: "1px solid var(--Grey-4, #F4F4F4)",background: " #F7FFFF" }}>
//                 S.No
//               </TableCell>
//               <TableCell
//                 align="left"
//                 sx={{ border: "1px solid var(--Grey-4, #F4F4F4)",background: " #F7FFFF" }}
//               >
//                 Chiller Type
//               </TableCell>
//               <TableCell
//                 align="right"
//                 sx={{ border: "1px solid var(--Grey-4, #F4F4F4)",background: " #F7FFFF"}}
//               >
//                 Capacities
//               </TableCell>
//               <TableCell
//                 align="right"
//                 sx={{ border: "1px solid var(--Grey-4, #F4F4F4)",background: " #F7FFFF" }}
//               >
//                 Full Load, CoP
//               </TableCell>
//               <TableCell
//                 align="right"
//                 sx={{ border: "1px solid var(--Grey-4, #F4F4F4)",background: " #F7FFFF" }}
//               >
//                 IPLV
//               </TableCell>
//             </TableRow>
//           </TableHead>
//           <TableBody>
//             {waterCooledRows.map((row) => (
//               <TableRow
//                 key={row.sNo}
//                 sx={{
//                   "&:last-child td, &:last-child th": {
//                     border: "1px solid var(--Grey-4, #F4F4F4)",
//                   },
//                 }}
//               >
//                 <TableCell
//                   component="th"
//                   scope="row"
//                   sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
//                 >
//                   {row.sNo}
//                 </TableCell>
//                 <TableCell
//                   align="left"
//                   sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
//                 >
//                   {row.chillerType}
//                 </TableCell>
//                 <TableCell
//                   align="right"
//                   sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
//                 >
//                   {row.capacities}
//                 </TableCell>
//                 <TableCell
//                   align="right"
//                   sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
//                 >
//                   {row.fullLoadCop}
//                 </TableCell>
//                 <TableCell
//                   align="right"
//                   sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
//                 >
//                   {row.iplv}
//                 </TableCell>
//               </TableRow>
//             ))}
//           </TableBody>
//         </Table>
//       </TableContainer>
//     </div>
//   );
// }
 

      <table>
        <tr>
          <th rowspan="2">S.No</th>
          <th rowspan="2">Chiller Type</th>
          <th rowspan="2">Capacities</th>
          <th colspan="2">Minimum Efficiency</th>
        </tr>
        <tr>
          <th>Full Load, CoP</th>
          <th>IPLV</th>
        </tr>
        <tr>
          <td rowspan="3">1</td>
          <td rowspan="3">
            Water cooled, electrically operated, positive displacement (rotary
            screw & scroll)
          </td>
          <td>150 TR</td>
          <td>&gt;4.45</td>
          <td>&gt;5.20</td>
        </tr>
        <tr>
          <td>150 TR and &lt; 300 TR</td>
          <td>&gt;4.90</td>
          <td>&gt;5.60</td>
        </tr>
        <tr>
          <td>300 TR</td>
          <td>&gt;5.50</td>
          <td>&gt;6.15</td>
        </tr>
        <tr>
          <td rowspan="3">2</td>
          <td rowspan="3">Water cooled, electrically operated, centrifugal</td>
          <td>150 TR</td>
          <td>&gt;5.00</td>
          <td>&gt;5.25</td>
        </tr>
        <tr>
          <td>150 TR and &lt; 300 TR</td>
          <td>&gt;5.55</td>
          <td>&gt;5.90</td>
        </tr>
        <tr>
          <td>300 TR</td>
          <td>&gt;6.10</td>
          <td>&gt;6.40</td>
        </tr>
      </table>
 
 Industry Structure (Non-Conditional Space)
 
Industry Structure (Non-Conditional Space)
 
0.45 W/m2k
 
<table style={{border:"1px solid gray", width:"100%"}}>
      <tr style={{}}>
        <th>Industry Envelope Element</th>
        <th>Parameter</th>
        <th>Requirements</th>
      </tr>
      <tr>
        <td>External Walls</td>
        <td>U - value (Max)</td>
        <td>0.45 W/m2k</td>
      </tr>
      <tr>
        <td>Roof</td>
        <td>U - value (Max)</td>
        <td>0.42 W/m2k</td>
      </tr>
      </table>
 

    </Grid2>
 
<Grid2 sx={{}}>
 

        <th></th>
 
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
} from "@mui/material";
 

const createData = (name, calories, fat) => {
  return { name, calories, fat };
};
const rows = [
  createData("Cupcake", 305, 3.7),
  createData("Donut", 452, 25.0),
  createData("Eclair", 262, 16.0),
  createData("Frozen yoghurt", 159, 6.0),
  createData("Gingerbread", 356, 16.0),
  createData("Honeycomb", 408, 3.2),
  createData("Ice cream sandwich", 237, 9.0),
];

 

      <TableContainer component={Paper}>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>Item</TableCell>
              <TableCell align="right">Calories</TableCell>
              <TableCell align="right">Fat (g)</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {rows.map((row) => (
              <TableRow key={row.name}>
                <TableCell component="th" scope="row">
                  {row.name}
                </TableCell>
                <TableCell align="right">{row.calories}</TableCell>
                <TableCell align="right">{row.fat}</TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
 
 <Grid2
      sx={{
        display: "flex",
        flexDirection: "row",
        gap: "12px",
        alignItems: "center",
        mt: "8px", // Adjusted margin-top
        ml: "16px",
        mr: "18px"
      }}
    >
      <TableContainer component={Paper}>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>Item</TableCell>
              <TableCell align="right">Calories</TableCell>
              <TableCell align="right">Fat (g)</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {rows.map((row) => (
              <TableRow key={row.name}>
                <TableCell component="th" scope="row">
                  {row.name}
                </TableCell>
                <TableCell align="right">{row.calories}</TableCell>
                <TableCell align="right">{row.fat}</TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
    </Grid2>
 
<Grid2
      sx={{
        display: "flex",
        flexDirection: "row",
        gap: "12px",
        alignItems: "center",
        mt: "8px", // Adjusted margin-top
        ml: "16px",
        mr: "18px"
      }}
    >
      <TableContainer component={Paper}>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>Item</TableCell>
              <TableCell align="right">Calories</TableCell>
              <TableCell align="right">Fat (g)</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {rows.map((row) => (
              <TableRow key={row.name}>
                <TableCell component="th" scope="row">
                  {row.name}
                </TableCell>
                <TableCell align="right">{row.calories}</TableCell>
                <TableCell align="right">{row.fat}</TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
    </Grid2>
 

      <Grid2
        sx={{
          display: "flex",
          flexDirection: "row",
          gap: "12px",
          alignItems: "center",
          mt: "16px",
          ml: "16px",
          mr:"18px"
        }}
      >
        <TableContainer component={Paper}>
          <Table>
            <TableHead>
              <TableRow>
                <TableCell>Item</TableCell>
                <TableCell align="right">Calories</TableCell>
                <TableCell align="right">Fat (g)</TableCell>
                <TableCell align="right">Carbs (g)</TableCell>
                <TableCell align="right">Protein (g)</TableCell>
                <TableCell align="right">Item</TableCell>
                <TableCell align="right">Calories</TableCell>
                <TableCell align="right">Fat (g)</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {rows.map((row) => (
                <TableRow key={row.name}>
                  <TableCell component="th" scope="row">
                    {row.name}
                  </TableCell>
                  <TableCell align="right">{row.calories}</TableCell>
                  <TableCell align="right">{row.fat}</TableCell>
                  <TableCell align="right">{row.carbs}</TableCell>
                  <TableCell align="right">{row.protein}</TableCell>
                  <TableCell align="right">{row.name}</TableCell>
                  <TableCell align="right">{row.calories}</TableCell>
                  <TableCell align="right">{row.fat}</TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </TableContainer>
      </Grid2>
 

const createData = (name, calories, fat, carbs, protein) => {
  return { name, calories, fat, carbs, protein };
};
 

const rows = [
  createData("Cupcake", 305, 3.7, 67, 4.3),
  createData("Donut", 452, 25.0, 51, 4.9),
  createData("Eclair", 262, 16.0, 24, 6.0),
  createData("Frozen yoghurt", 159, 6.0, 24, 4.0),
  createData("Gingerbread", 356, 16.0, 49, 3.9),
  createData("Honeycomb", 408, 3.2, 87, 6.5),
  createData("Ice cream sandwich", 237, 9.0, 37, 4.3),
  createData("Jelly Bean", 375, 0.0, 94, 0.0),
];
 

        paddingRight:"20px"
 
1px solid #F7F7F7
 
border:"1px solid #F7F7F7"
 
fontFamily=
 
Make Sure</b> that the <b>development team considers</b> the{" "}
          <b>improvement</b> in the <b>energy efficiency</b> of the{" "}
          <b>building's envelope.</b>
 
black
 

        hello
 

           mb:"10px"
 

            padding:"10px",
 

            padding: "17px 10px 15px 10px",
 

            paddi
 

        padding:"10px 10px 10px 10px"
 
background: "gray", borderRadius:"6px",
          background:"#F7F7F7"
 
fontSize="14px" fontWeight="500" color="#000"
 

          border:"1px solid black"
 

        padding:"10px"
 
 display: "flex",
        flexDirection: "column",
        gap: "20px",
        border: "1px solid #E4E4E4",
        mt:"15px",
        borderRadius:"5px"
 
Energy Conservation Techniques:
 
import React from "react";
import { Grid2, Typography, Box } from "@mui/material";

const NewLayout = () => {
  return (
    <Grid2 sx={{ display: "flex", flexDirection: "column", gap: "20px" }}>
      {/* Header Section */}
      <Grid2
        sx={{
          display: "flex",
          flexDirection: "row",
          gap: "12px",
          alignItems: "center",
          mt: "16px",
          ml: "16px",
        }}
      >
        {/* Logo */}
        <img src="" alt="logo" width="18px" />
        
        {/* Header Text */}
        <Typography fontSize="16px" fontWeight="600" color="#000">
          Energy Conservation Techniques and Thermal Insulation (Applicable for both Air-conditioned and Non-Air-Conditioned buildings)
        </Typography>
      </Grid2>

      {/* Subheader Section */}
      <Grid2 sx={{ display: "flex", flexDirection: "row", gap: "12px", alignItems: "center", ml: "16px" }}>
        {/* Subheader Text */}
        <Box>
          <Typography fontSize="14px" fontWeight="500" color="#000">
            Energy Conservation Techniques:
          </Typography>
        </Box>

        {/* Question Text */}
        <Typography fontSize="14px" fontWeight="500" color="#000">
          Has the development team considered improving the energy efficiency of the building's envelope?
        </Typography>
      </Grid2>
    </Grid2>
  );
};

export default NewLayout;

 

      yaha pr call karna hai
 

      <Grid2>
        
      </Grid2>
 

            hello
 

  // Add more mappings as needed
 
// Pass the boldAnswerIndex to the Question component
 

    {
        text: [
          "",
        ],
        answers: [
          [
            "Develop a sub-metering, monitoring and automatic data recording strategy to account for a minimum of the following",
            "Heating and cooling system",
            "Internal & External Lighting",
            "Compressed air system",
            "Loads above 50KW",
            "Production line-wise sub-metering",
          ],
          [
            ". In case the facility is contemplating a SCADA/ Automatic controls, these meters should be capable of providing the required outputs and integration.",
          ],
        ],
        logo: "",
        heading: "Energy Conservation Techniques and Thermal Insulation (Applicable for both Air-conditioned and Non-Air-Conditioned buildings)",
        showTable: false,
        boldAnswerIndex: 0,
      },
 
Develop a sub-metering, monitoring and automatic data recording strategy to account for a minimum of the following
 
Has the design process considered identifying and evaluating potential waste heat recovery systems based on the waste heat generated during the process?
 

          "Are all the sub-meters labeled for easy identification and tracking of energy consumption?",
 
Process Energy Sub-Metering
 
Has the design process considered identifying and evaluating potential waste heat recovery systems based on the waste heat generated during the process?
 
Has the design process considered identifying and evaluating potential waste heat recovery systems based on the waste heat generated during the process?",
 
To maintain high power factor and low hormonic levels, hence power quality
 
Capacitor Banks
 
Harmonic Filters
 
Voltage Optimizer
 
Distributed Power Flow Controller (DPFC)
 
The electrical system must incorporate control measures like
 
Has the electrical system been designed to incorporate control measures?
 
Power Quality
 
Upgrade to IE3 and IE4 motors for increased energy efficiency and optimal performance.
 
Do you have all motors with efficiency classification IE3 & IE4?
 
Industrial AC Motors
 
 {!showTable && (
              <Grid2
                sx={{
                  borderTop: "1px solid #E4E4E4",
                  mt: "8px",
                  mb: "8px",
                  ml: "0px",
                  padding: "10px 19px",
                  borderRadius: "5px",
                }}
              >
                {answers[questionIndex]?.length > 0 ? (
                  // Display Answers
                  <Grid2
                    sx={{
                      border: "1px solid var(--Grey-3, #D9D9D9)",
                      background: "#F7FFFC",
                      borderRadius: "5px",
                      padding: "1px 12px",
                    }}
                  >
                    {answers[questionIndex].map((answer, answerIndex) => (
                      <Typography
                        key={answerIndex}
                        fontSize="12px"
                        fontWeight={
                          boldAnswerIndex === questionIndex && answerIndex === 0
                            ? "700"
                            : "500"
                        }
                        color="#000"
                        sx={{ padding: "6px 0" }}
                      >
                        {answerIndex + 1}. {answer}
                      </Typography>
                    ))}
                  </Grid2>
                ) : (
                  // Display Implementation Required with Logo
                  <Grid2
                    sx={{
                      display: "flex",
                      alignItems: "center",
                      gap: "12px",
                      borderRadius: "5px",
                      padding: "10px",
                    }}
                  >
                    <img
                      src={magelightBuld}
                      alt="Implementation Required"
                      width="18px"
                    />
                    <Typography fontSize="12px" fontWeight="500" color="#000">
                      Implementation Required
                    </Typography>
                  </Grid2>
                )}
              </Grid2>
            )}
 
 // Specify which answer should be bold
 
{
      text: [
        "Do you have all motors with efficiency classification IE3 & IE4?",
      ],
      answers: [
        [
          "Upgrade to IE3 and IE4 motors for increased energy efficiency and optimal performance.",
        ],
      ],
      logo: "",
      heading: "Industrial AC Motors",
      showTable: false,
    },
 

    // Other questions here...
 





import React from "react";
import { Box, Grid2, Paper, Typography, Button } from "@mui/material";
import magelightBuld from "../../../../assets/images/mage_light-bulb.svg";
import BasicTable from "./TablesDataDecarbonation";
import BasicTable2 from "./TablesDataDecarbonation2";
 
Upgrade to IE3 and IE4 motors for increased energy efficiency and optimal performance.
 
Do you have all motors with efficiency classification IE3 & IE4?
 
Upgrade to IE3 and IE4 motors for increased energy efficiency and optimal performance
 
Industrial AC Motors
 
import * as React from "react";
import Table from "@mui/material/Table";
import TableBody from "@mui/material/TableBody";
import TableCell from "@mui/material/TableCell";
import TableContainer from "@mui/material/TableContainer";
import TableHead from "@mui/material/TableHead";
import TableRow from "@mui/material/TableRow";
import Paper from "@mui/material/Paper";

function createData(sNo, chillerType, capacities, fullLoadCop, iplv) {
  return { sNo, chillerType, capacities, fullLoadCop, iplv };
}

const airCooledRows = [
  createData(1, "", "<150 TR", ">9.562", ">2.803", ">12.5"),
  createData(1, "", ">150 TR", ">9.562", ">2.803", ">12.5"),
];

const waterCooledRows = [
  createData(
    1,
    "Water cooled, electrically operated, positive displacement (rotary screw & scroll)",
    "150 TR",
    ">4.45",
    ">5.20"
  ),
  createData(
    1,
    "Water cooled, electrically operated, positive displacement (rotary screw & scroll)",
    "150 TR and < 300 TR",
    ">4.90",
    ">5.60"
  ),
  createData(
    1,
    "Water cooled, electrically operated, positive displacement (rotary screw & scroll)",
    "300 TR",
    ">5.50",
    ">6.15"
  ),
  createData(
    2,
    "Water cooled, electrically operated, centrifugal",
    "150 TR",
    ">5.00",
    ">5.25"
  ),
  createData(
    2,
    "Water cooled, electrically operated, centrifugal",
    "150 TR and < 300 TR",
    ">5.55",
    ">5.90"
  ),
  createData(
    2,
    "Water cooled, electrically operated, centrifugal",
    "300 TR",
    ">6.10",
    ">6.40"
  ),
];

export default function BasicTable2() {
  return (
    <div>
      <h2 style={{ fontSize: "16px", fontWeight: "400", color: "#000000" }}>
        Air Cooled Chillers
      </h2>
      <TableContainer component={Paper}>
        <Table sx={{ minWidth: 650 }} aria-label="simple table">
          <TableHead>
            <TableRow>
              <TableCell
                sx={{
                  border: "1px solid var(--Grey-4, #F4F4F4)",
                  background: " #F7FFFF",
                }}
              >
                S.No
              </TableCell>
              <TableCell
                align="right"
                sx={{
                  border: "1px solid var(--Grey-4, #F4F4F4)",
                  background: " #F7FFFF",
                }}
              >
                Capacities
              </TableCell>
              <TableCell
                align="right"
                sx={{
                  border: "1px solid var(--Grey-4, #F4F4F4)",
                  background: " #F7FFFF",
                }}
              >
                Full Load, EER
              </TableCell>
              <TableCell
                align="right"
                sx={{
                  border: "1px solid var(--Grey-4, #F4F4F4)",
                  background: " #F7FFFF",
                }}
              >
                Full Load, CoP
              </TableCell>
              <TableCell
                align="right"
                sx={{
                  border: "1px solid var(--Grey-4, #F4F4F4)",
                  background: " #F7FFFF",
                }}
              >
                IPLV
              </TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {airCooledRows.map((row) => (
              <TableRow
                key={row.sNo}
                sx={{ "&:last-child td, &:last-child th": { border: 0 } }}
              >
                <TableCell
                  component="th"
                  scope="row"
                  sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
                >
                  {row.sNo}
                </TableCell>
                <TableCell
                  align="right"
                  sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
                >
                  {row.capacities}
                </TableCell>
                <TableCell
                  align="right"
                  sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
                >
                  {row.fullLoadEer}
                </TableCell>
                <TableCell
                  align="right"
                  sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
                >
                  {row.fullLoadCop}
                </TableCell>
                <TableCell
                  align="right"
                  sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
                >
                  {row.iplv}
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>

      <h2 style={{ fontSize: "16px", fontWeight: "400", color: "#000000" }}>
        Water Cooled Chillers
      </h2>
      <TableContainer component={Paper} sx={{border:"1px solid var(--Grey-4, #F4F4F4)"}}>
        <Table sx={{ minWidth: 650 }} aria-label="simple table">
          <TableHead>
            <TableRow>
              <TableCell sx={{ border: "1px solid var(--Grey-4, #F4F4F4)",background: " #F7FFFF" }}>
                S.No
              </TableCell>
              <TableCell
                align="left"
                sx={{ border: "1px solid var(--Grey-4, #F4F4F4)",background: " #F7FFFF" }}
              >
                Chiller Type
              </TableCell>
              <TableCell
                align="right"
                sx={{ border: "1px solid var(--Grey-4, #F4F4F4)",background: " #F7FFFF"}}
              >
                Capacities
              </TableCell>
              <TableCell
                align="right"
                sx={{ border: "1px solid var(--Grey-4, #F4F4F4)",background: " #F7FFFF" }}
              >
                Full Load, CoP
              </TableCell>
              <TableCell
                align="right"
                sx={{ border: "1px solid var(--Grey-4, #F4F4F4)",background: " #F7FFFF" }}
              >
                IPLV
              </TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {waterCooledRows.map((row) => (
              <TableRow
                key={row.sNo}
                sx={{
                  "&:last-child td, &:last-child th": {
                    border: "1px solid var(--Grey-4, #F4F4F4)",
                  },
                }}
              >
                <TableCell
                  component="th"
                  scope="row"
                  sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
                >
                  {row.sNo}
                </TableCell>
                <TableCell
                  align="left"
                  sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
                >
                  {row.chillerType}
                </TableCell>
                <TableCell
                  align="right"
                  sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
                >
                  {row.capacities}
                </TableCell>
                <TableCell
                  align="right"
                  sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
                >
                  {row.fullLoadCop}
                </TableCell>
                <TableCell
                  align="right"
                  sx={{ border: "1px solid var(--Grey-4, #F4F4F4)" }}
                >
                  {row.iplv}
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
    </div>
  );
}

 


// Main component to render the survey question section
function SurveyQuestionSection() {
  // Example questions array with logos, headings, and multiple answers
  const questions = [
    {
      text: [
        "Do you have all motors with efficiency classification IE3 & IE4?",
      ],
      answers: [
        [
          "Upgrade to IE3 and IE4 motors for increased energy efficiency and optimal performance.",
        ],
      ],
      logo: "", // Replace with your actual logo path
      heading: "Industrial AC Motors", // Pass the heading here
      showTable: false, // Indicate no table needed
    },
    {
      text: [
        "Have you involved a specialist in the selection of the pump sizing?",
        "Are bypass valves and valve throttling being eliminated in all retrofitting projects?",
      ],
      answers: [
        [
          "Pump sizing and selection must consider all possible scenarios of the operation.",
          "Right pump technology must be selected based on process requirement.",
        ],
        [
          "Pump with right VFD must be selected for the process with variable flow requirement.",
        ],
      ],
      logo: "", // Replace with your actual logo path
      heading: "Industrial Process Pumps", // Pass the heading here
      showTable: false, // Indicate no table needed
    },
    {
      text: [
        "Have you involved a specialist in the selection of the pump sizing?",
        "Does the fan comply with a Fan Efficiency Grade (FEG) of 85% or higher?",
      ],
      answers: [
        [
          "Fan sizing and selection must consider all possible scenarios of the operation.",
          "Right fan technology must be selected based on process requirement.",
          "Fan with right VFD must be selected for the process with variable flow requirement.",
        ],
        [], // No answers for this question
      ],
      logo: "", // Replace with your actual logo path
      heading: "Industrial Process Fans", // Pass the heading here
      showTable: false, // Indicate no table needed
    },
    {
      text: [
        "Has a specialist been appointed to select the most suitable compressor technology (e.g., variable speed drive or variable displacement compressor)?",
        "Are measures in place to minimize leakage in the compressed air system of the existing plant?",
      ],
      answers: [
        [], // No answers for this question
        [
          "Leakage in the compressed air system must be minimized in the existing plant.",
        ],
      ],
      logo: "", // Replace with your actual logo path
      heading: "Compressed Air System", // Pass the heading here
      showTable: false, // Indicate no table needed
    },
    {
      text: [
        "Has a high-efficiency boiler been selected for the plant process?",
        "Are all the boilers equipped with a smart control system to optimize operational efficiency?",
      ],
      answers: [
        [
          "Boiler sizing and design operating parameters must consider all possible scenarios of the operation.",
        ],
        [
          "The selected boiler must have smart controls to regulate the fuel and excess air supply to the boiler based on process load variation, thereby achieving higher combustion efficiency.",
        ],
      ],
      logo: "", // Replace with your actual logo path
      heading: "Industrial Process Boilers", // Pass the heading here
      showTable: false, // Indicate no table needed
    },
    {
      text: [
        "Have you assessed the insulation level of the steam distribution system to ensure it is sufficient to minimize heat loss to the environment?",
      ],
      answers: [
        [
          "Steam distribution system economic insulation requirement must be carried out by a specialist.",
          "Effectiveness of the insulation must be tested on an annual basis.",
        ],
      ],
      logo: "", // Replace with your actual logo path
      heading: "Steam Distribution System", // Pass the heading here
      showTable: false, // Indicate no table needed
    },
    {
      text: [
        "Have you considered selecting an energy-efficient chiller for all the plant?",
      ],
      answers: [
        [
          "All chiller units should meet the Minimum Energy Efficiency Ratio (EER) mentioned in the table.",
        ],
      ],
      logo: "", // Replace with your actual logo path
      heading: "Industrial Chiller System", // Pass the heading here
      showTable: true, // Indicate that a table should be shown
    },
    {
      text: [
        "Has the insulation level of the chilled water distribution system been assessed to ensure it is sufficient to minimize energy loss?",
        "Has the system been designed to minimize pumping losses by reducing or eliminating bypass/re-circulation?",
      ],
      answers: [
        [],
        [], // No answers for this question
      ],
      logo: "", // Replace with your actual logo path
      heading: "Chilled Water Distribution System", // Pass the heading here
      showTable: false, // Indicate no table needed
    },
    // is wale mei tablebasic2 composhow karana hai
    {
      text: [
        "Have you considered selecting an energy-efficient chiller for all the plant?",
      ],
      answers: [
        [
          "All chiller units should meet the Minimum Energy Efficiency Ratio (EER) mentioned in the table.",
        ],
      ],
      // is card mei shwo larana hai basictable2 lekin kese
      logo: "", // Replace with your actual logo path
      heading: "Refrigerated Storage Area", // Pass the heading here
      showTable: true, // Indicate that a table should be shown
    },
    
  ];

  return (
    <>
      <Grid2 sx={{ display: "flex", flexDirection: "column", gap: "20px" }}>
        {questions.map((q, index) => (
          <Question
            key={index}
            questionText={q.text}
            logo={q.logo}
            heading={q.heading}
            answers={q.answers}
            showTable={q.showTable} // Pass the showTable prop
          />
        ))}
      </Grid2>

      {/* Last Button */}
      <Grid2
        sx={{
          display: "flex",
          flexDirection: "row",
          justifyContent: "flex-end", // This aligns the button to the right
          mt: "45px",
        }}
      >
        <Button
          sx={{
            borderRadius: "32px",
            textTransform: "capitalize",
            justifyContent: "center",
            alignItems: "center",
            background:
              "var(--grad-3, linear-gradient(102deg, #369D9C 0%, #28814D 100%))",
            padding: "11px 40px",
          }}
        >
          <Typography color="#fff" fontSize="14px" fontWeight="600">
            Submit Survey
          </Typography>
        </Button>
      </Grid2>
    </>
  );
}

export default SurveyQuestionSection;

 

export default Question;
 
import React from "react";
import { Box, Grid2, Paper, Typography, Button } from "@mui/material";
import magelightBuld from "../../../../assets/images/mage_light-bulb.svg";
import BasicTable from "./TablesDataDecarbonation"; // Import the table component
import BasicTable2 from "./TablesDataDecarbonation2";

const TableComponents = {
    BasicTable,
    BasicTable2,
  };

// Component to render each question with its respective answers
const Question = ({ questionText, logo, heading, answers, showTable }) => {
  return (
    <Grid2
      sx={{
        flexDirection: "column",
        display: "flex",
        border: "1px solid #E4E4E4",
        borderRadius: "5px",
        borderTop: "3px solid #369D9C",
        gap: "20px",
      }}
    >
      <Paper
        sx={{
          display: "flex",
          flexDirection: "column",
          gap: "15px",
        }}
      >
        {/* Heading Section */}
        <Grid2
          sx={{
            display: "flex",
            flexDirection: "row",
            gap: "12px",
            mt: "16px",
            ml: "16px",
            alignItems: "center",
          }}
        >
          {logo && <img src={logo} alt="logo" width="18px" />}
          <Typography fontSize="16px" fontWeight="600" color="#000">
            {heading}
          </Typography>
        </Grid2>

        {/* Questions and Answers */}
        {questionText.map((q, questionIndex) => (
          <React.Fragment key={questionIndex}>
            {/* Question Text */}
            <Grid2
              sx={{
                display: "flex",
                flexDirection: "row",
                alignItems: "center",
                gap: "12px",
                ml: "15px",
              }}
            >
              <Box
                sx={{
                  width: "37px",
                  height: "34px",
                  backgroundColor: "#F7F7F7",
                  padding: "7px",
                  borderRadius: "6px",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                }}
              >
                <Typography color="#5B5B5B" fontSize="14px" fontWeight="400">
                  Q.{questionIndex + 1}
                </Typography>
              </Box>
              <Typography fontSize="14px" fontWeight="500" color="#000">
                {q}
              </Typography>
            </Grid2>

            {/* Conditional Rendering of BasicTable */}
            {showTable && questionIndex === 0 && (
              <Grid2
                sx={{
                  borderTop: "1px solid #E4E4E4",
                  mt: "8px",
                  mb: "8px",
                  ml: "0px",
                  padding: "10px 19px",
                  borderRadius: "5px",
                }}
              >
                <BasicTable /> {/* Render BasicTable */}
              </Grid2>
            )}

            {/* Answers or Implementation Required */}
            {!showTable && (
              <Grid2
                sx={{
                  borderTop: "1px solid #E4E4E4",
                  mt: "8px",
                  mb: "8px",
                  ml: "0px",
                  padding: "10px 19px",
                  borderRadius: "5px",
                }}
              >
                {answers[questionIndex]?.length > 0 ? (
                  // Display Answers
                  <Grid2
                    sx={{
                      border: "1px solid var(--Grey-3, #D9D9D9)",
                      background: "#F7FFFC",
                      borderRadius: "5px",
                      padding: "1px 12px",
                    }}
                  >
                    {answers[questionIndex].map((answer, answerIndex) => (
                      <Typography
                        key={answerIndex}
                        fontSize="12px"
                        fontWeight="500"
                        color="#000"
                        sx={{ padding: "6px 0" }}
                      >
                        {answerIndex + 1}. {answer}
                      </Typography>
                    ))}
                  </Grid2>
                ) : (
                  // Display Implementation Required with Logo
                  <Grid2
                    sx={{
                      display: "flex",
                      alignItems: "center",
                      gap: "12px",
                      borderRadius: "5px",
                      padding: "10px",
                    }}
                  >
                    <img
                      src={magelightBuld}
                      alt="Implementation Required"
                      width="18px"
                    />
                    <Typography fontSize="12px" fontWeight="500" color="#000">
                      Implementation Required
                    </Typography>
                  </Grid2>
                )}
              </Grid2>
            )}
          </React.Fragment>
        ))}
      </Paper>
    </Grid2>
  );
};
 

    BasicTable3,
    BasicTable4,
    BasicTable5,
 

import { Box, Grid, Paper, Typography, Button } from '@mui/material';
import magelightBuld from '../../../../assets/images/mage_light-bulb.svg';
 

import React from 'react';
 
// Component to render each question with its respective answers
const Question = ({ questionText, logo, heading, answers, showTable }) => {
  return (
    <Grid2
      sx={{
        flexDirection: "column",
        display: "flex",
        border: "1px solid #E4E4E4",
        borderRadius: "5px",
        borderTop: "3px solid #369D9C",
        gap: "20px",
      }}
    >
      <Paper
        sx={{
          display: "flex",
          flexDirection: "column",
          gap: "15px",
        }}
      >
        {/* Heading Section */}
        <Grid2
          sx={{
            display: "flex",
            flexDirection: "row",
            gap: "12px",
            mt: "16px",
            ml: "16px",
            alignItems: "center",
          }}
        >
          {logo && <img src={logo} alt="logo" width="18px" />}
          <Typography fontSize="16px" fontWeight="600" color="#000">
            {heading}
          </Typography>
        </Grid2>

        {/* Questions and Answers */}
        {questionText.map((q, questionIndex) => (
          <React.Fragment key={questionIndex}>
            {/* Question Text */}
            <Grid2
              sx={{
                display: "flex",
                flexDirection: "row",
                alignItems: "center",
                gap: "12px",
                ml: "15px",
              }}
            >
              <Box
                sx={{
                  width: "37px",
                  height: "34px",
                  backgroundColor: "#F7F7F7",
                  padding: "7px",
                  borderRadius: "6px",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                }}
              >
                <Typography color="#5B5B5B" fontSize="14px" fontWeight="400">
                  Q.{questionIndex + 1}
                </Typography>
              </Box>
              <Typography fontSize="14px" fontWeight="500" color="#000">
                {q}
              </Typography>
            </Grid2>

            {/* Conditional Rendering of BasicTable */}
            {showTable && questionIndex === 0 && (
              <Grid2
                sx={{
                  borderTop: "1px solid #E4E4E4",
                  mt: "8px",
                  mb: "8px",
                  ml: "0px",
                  padding: "10px 19px",
                  borderRadius: "5px",
                }}
              >
                <BasicTable /> {/* Render BasicTable */}
              </Grid2>
            )}

            {/* Answers or Implementation Required */}
            {!showTable && (
              <Grid2
                sx={{
                  borderTop: "1px solid #E4E4E4",
                  mt: "8px",
                  mb: "8px",
                  ml: "0px",
                  padding: "10px 19px",
                  borderRadius: "5px",
                }}
              >
                {answers[questionIndex]?.length > 0 ? (
                  // Display Answers
                  <Grid2
                    sx={{
                      border: "1px solid var(--Grey-3, #D9D9D9)",
                      background: "#F7FFFC",
                      borderRadius: "5px",
                      padding: "1px 12px",
                    }}
                  >
                    {answers[questionIndex].map((answer, answerIndex) => (
                      <Typography
                        key={answerIndex}
                        fontSize="12px"
                        fontWeight="500"
                        color="#000"
                        sx={{ padding: "6px 0" }}
                      >
                        {answerIndex + 1}. {answer}
                      </Typography>
                    ))}
                  </Grid2>
                ) : (
                  // Display Implementation Required with Logo
                  <Grid2
                    sx={{
                      display: "flex",
                      alignItems: "center",
                      gap: "12px",
                      borderRadius: "5px",
                      padding: "10px",
                    }}
                  >
                    <img
                      src={magelightBuld}
                      alt="Implementation Required"
                      width="18px"
                    />
                    <Typography fontSize="12px" fontWeight="500" color="#000">
                      Implementation Required
                    </Typography>
                  </Grid2>
                )}
              </Grid2>
            )}
          </React.Fragment>
        ))}
      </Paper>
    </Grid2>
  );
};

// Main component to render the survey question section
function SurveyQuestionSection() {
  // Example questions array with logos, headings, and multiple answers
  const questions = [
    {
      text: [
        "Do you have all motors with efficiency classification IE3 & IE4?",
      ],
      answers: [
        [
          "Upgrade to IE3 and IE4 motors for increased energy efficiency and optimal performance.",
        ],
      ],
      logo: "", // Replace with your actual logo path
      heading: "Industrial AC Motors", // Pass the heading here
      showTable: false, // Indicate no table needed
    },
    {
      text: [
        "Have you involved a specialist in the selection of the pump sizing?",
        "Are bypass valves and valve throttling being eliminated in all retrofitting projects?",
      ],
      answers: [
        [
          "Pump sizing and selection must consider all possible scenarios of the operation.",
          "Right pump technology must be selected based on process requirement.",
        ],
        [
          "Pump with right VFD must be selected for the process with variable flow requirement.",
        ],
      ],
      logo: "", // Replace with your actual logo path
      heading: "Industrial Process Pumps", // Pass the heading here
      showTable: false, // Indicate no table needed
    },
    {
      text: [
        "Have you involved a specialist in the selection of the pump sizing?",
        "Does the fan comply with a Fan Efficiency Grade (FEG) of 85% or higher?",
      ],
      answers: [
        [
          "Fan sizing and selection must consider all possible scenarios of the operation.",
          "Right fan technology must be selected based on process requirement.",
          "Fan with right VFD must be selected for the process with variable flow requirement.",
        ],
        [], // No answers for this question
      ],
      logo: "", // Replace with your actual logo path
      heading: "Industrial Process Fans", // Pass the heading here
      showTable: false, // Indicate no table needed
    },
    {
      text: [
        "Has a specialist been appointed to select the most suitable compressor technology (e.g., variable speed drive or variable displacement compressor)?",
        "Are measures in place to minimize leakage in the compressed air system of the existing plant?",
      ],
      answers: [
        [], // No answers for this question
        [
          "Leakage in the compressed air system must be minimized in the existing plant.",
        ],
      ],
      logo: "", // Replace with your actual logo path
      heading: "Compressed Air System", // Pass the heading here
      showTable: false, // Indicate no table needed
    },
    {
      text: [
        "Has a high-efficiency boiler been selected for the plant process?",
        "Are all the boilers equipped with a smart control system to optimize operational efficiency?",
      ],
      answers: [
        [
          "Boiler sizing and design operating parameters must consider all possible scenarios of the operation.",
        ],
        [
          "The selected boiler must have smart controls to regulate the fuel and excess air supply to the boiler based on process load variation, thereby achieving higher combustion efficiency.",
        ],
      ],
      logo: "", // Replace with your actual logo path
      heading: "Industrial Process Boilers", // Pass the heading here
      showTable: false, // Indicate no table needed
    },
    {
      text: [
        "Have you assessed the insulation level of the steam distribution system to ensure it is sufficient to minimize heat loss to the environment?",
      ],
      answers: [
        [
          "Steam distribution system economic insulation requirement must be carried out by a specialist.",
          "Effectiveness of the insulation must be tested on an annual basis.",
        ],
      ],
      logo: "", // Replace with your actual logo path
      heading: "Steam Distribution System", // Pass the heading here
      showTable: false, // Indicate no table needed
    },
    {
      text: [
        "Have you considered selecting an energy-efficient chiller for all the plant?",
      ],
      answers: [
        [
          "All chiller units should meet the Minimum Energy Efficiency Ratio (EER) mentioned in the table.",
        ],
      ],
      logo: "", // Replace with your actual logo path
      heading: "Industrial Chiller System", // Pass the heading here
      showTable: true, // Indicate that a table should be shown
    },
    {
      text: [
        "Has the insulation level of the chilled water distribution system been assessed to ensure it is sufficient to minimize energy loss?",
        "Has the system been designed to minimize pumping losses by reducing or eliminating bypass/re-circulation?",
      ],
      answers: [
        [],
        [], // No answers for this question
      ],
      logo: "", // Replace with your actual logo path
      heading: "Chilled Water Distribution System", // Pass the heading here
      showTable: false, // Indicate no table needed
    },
    // is wale mei tablebasic2 composhow karana hai 
    {
        text: [
          "Have you considered selecting an energy-efficient chiller for all the plant?",
        ],
        answers: [
          [
            "All chiller units should meet the Minimum Energy Efficiency Ratio (EER) mentioned in the table.",
          ],
        ],
        // is card mei shwo larana hai basictable2 lekin kese
        logo: "", // Replace with your actual logo path
        heading: "Refrigerated Storage Area", // Pass the heading here
        showTable: true, // Indicate that a table should be shown
      },
  ];

  return (
    <>
      <Grid2 sx={{ display: "flex", flexDirection: "column", gap: "20px" }}>
        {questions.map((q, index) => (
          <Question
            key={index}
            questionText={q.text}
            logo={q.logo}
            heading={q.heading}
            answers={q.answers}
            showTable={q.showTable} // Pass the showTable prop
          />
        ))}
      </Grid2>

      {/* Last Button */}
      <Grid2
        sx={{
          display: "flex",
          flexDirection: "row",
          justifyContent: "flex-end", // This aligns the button to the right
          mt: "45px",
        }}
      >
        <Button
          sx={{
            borderRadius: "32px",
            textTransform: "capitalize",
            justifyContent: "center",
            alignItems: "center",
            background:
              "var(--grad-3, linear-gradient(102deg, #369D9C 0%, #28814D 100%))",
            padding: "11px 40px",
          }}
        >
          <Typography color="#fff" fontSize="14px" fontWeight="600">
            Submit Survey
          </Typography>
        </Button>
      </Grid2>
    </>
  );
}

export default SurveyQuestionSection;

 
"Fan sizing and selection must consider all possible scenarios of the operation.",
            "Right fan technology must be selected based on process requirement.",
            "Fan with right VFD must be selected for the process with variable flow requirement.",
 
Does the fan comply with a Fan Efficiency Grade (FEG) of 85% or higher?
 
Have you involved a specialist in the selection of the pump sizing?
 
Industrial Process Fans
 

    {
        number: 3,
        text: [
          "Have you involved a specialist in the selection of the fan sizing?",
          "Does the fan comply with a Fan Efficiency Grade (FEG) of 85% or higher?",
        ],
        logo: "", // Replace with your logo path
        heading: "Compressed Air System", // Example heading
      },
 
 <Button variant="contained" color="primary">
          Submit
        </Button>
 
import React from "react";
import { Box, Grid2, Paper, Typography, Button } from "@mui/material";
import magelightBuld from "../../../../assets/images/mage_light-bulb.svg";
import BasicTable from "./TablesDataDecarbonation";
// Component to render each question with its respective answers

// Component to render each question with its respective answers
const Question = ({ questionText, logo, heading, answers }) => {
  return (
    <Grid2
      sx={{
        flexDirection: "column",
        display: "flex",
        border: "1px solid #E4E4E4",
        borderRadius: "5px",
        borderTop: "3px solid #369D9C",
        gap: "20px",
      }}
    >
      <Paper
        sx={{
          display: "flex",
          flexDirection: "column",
          gap: "15px",
        }}
      >
        {/* Heading Section */}
        <Grid2
          sx={{
            display: "flex",
            flexDirection: "row",
            gap: "12px",
            mt: "16px",
            ml: "16px",
            alignItems: "center",
          }}
        >
          {logo && <img src={logo} alt="logo" width="18px" />}
          <Typography fontSize="16px" fontWeight="600" color="#000">
            {heading}
          </Typography>
        </Grid2>

        {/* Questions and Answers */}
        {questionText.map((q, questionIndex) => (
          <React.Fragment key={questionIndex}>
            {/* Question Text */}
            <Grid2
              sx={{
                display: "flex",
                flexDirection: "row",
                alignItems: "center",
                gap: "12px",
                ml: "15px",
              }}
            >
              <Box
                sx={{
                  width: "37px",
                  height: "34px",
                  backgroundColor: "#F7F7F7",
                  padding: "7px",
                  borderRadius: "6px",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                }}
              >
                <Typography color="#5B5B5B" fontSize="14px" fontWeight="400">
                  Q.{questionIndex + 1}
                </Typography>
              </Box>
              <Typography fontSize="14px" fontWeight="500" color="#000">
                {q}
              </Typography>
            </Grid2>

            {/* Answers or Implementation Required */}
            <Grid2
              sx={{
                borderTop: "1px solid #E4E4E4",
                mt: "8px",
                mb: "8px",
                ml: "0px",
                padding: "10px 19px",
                borderRadius: "5px",
              }}
            >
              {answers[questionIndex]?.length > 0 ? (
                // Display Answers
                <Grid2
                  sx={{
                    border: "1px solid var(--Grey-3, #D9D9D9)",
                    background: "#F7FFFC",
                    borderRadius: "5px",
                    padding: "1px 12px",
                  }}
                >
                  {answers[questionIndex].map((answer, answerIndex) => (
                    <Typography
                      key={answerIndex}
                      fontSize="12px"
                      fontWeight="500"
                      color="#000"
                      sx={{ padding: "6px 0" }}
                    >
                      {answerIndex + 1}. {answer}
                    </Typography>
                  ))}
                </Grid2>
              ) : (
                // Display Implementation Required with Logo
                <Grid2
                  sx={{
                    display: "flex",
                    alignItems: "center",
                    gap: "12px",
                    borderRadius: "5px",
                    padding: "10px",
                  }}
                >
                  <img
                    src={magelightBuld}
                    alt="Implementation Required"
                    width="18px"
                  />
                  <Typography fontSize="12px" fontWeight="500" color="#000">
                    Implementation Required
                  </Typography>
                </Grid2>
              )}
            </Grid2>
          </React.Fragment>
        ))}
      </Paper>
    </Grid2>
  );
};

// Main component to render the survey question section
function SurveyQuestionSection() {
  // Example questions array with logos, headings, and multiple answers
  const questions = [
    {
      text: [
        "Do you have all motors with efficiency classification IE3 & IE4?",
      ],
      answers: [
        [
          "Upgrade to IE3 and IE4 motors for increased energy efficiency and optimal performance.",
        ],
      ],
      logo: "", // Replace with your actual logo path
      heading: "Industrial AC Motors", // Pass the heading here
    },
    {
      text: [
        "Have you involved a specialist in the selection of the pump sizing?",
        "Are bypass valves and valve throttling being eliminated in all retrofitting projects?",
      ],
      answers: [
        [
          "Pump sizing and selection must consider all possible scenarios of the operation.",
          "Right pump technology must be selected based on process requirement.",
        ],
        [
          "Pump with right VFD must be selected for the process with variable flow requirement.",
        ],
      ],
      logo: "", // Replace with your actual logo path
      heading: "Industrial Process Pumps", // Pass the heading here
    },
    {
      text: [
        "Have you involved a specialist in the selection of the pump sizing?",
        "Does the fan comply with a Fan Efficiency Grade (FEG) of 85% or higher?",
      ],
      answers: [
        [
          "Fan sizing and selection must consider all possible scenarios of the operation.",
          "Right fan technology must be selected based on process requirement.",
          "Fan with right VFD must be selected for the process with variable flow requirement.",
        ],
        [], // No answers for this question
      ],
      logo: "", // Replace with your actual logo path
      heading: "Industrial Process Fans", // Pass the heading here
    },
    {
      text: [
        "Has a specialist been appointed to select the most suitable compressor technology (e.g., variable speed drive or variable displacement compressor)?",
        "Are measures in place to minimize leakage in the compressed air system of the existing plant?",
      ],
      answers: [
        [], // No answers for this question
        [
          " Leakage in the compressed air system must be minimized in the existing plant.",
        ],
      ],
      logo: "", // Replace with your actual logo path
      heading: "Compressed Air System", // Pass the heading here
    },
    {
      text: [
        "Has a high-efficiency boiler been selected for the plant process?",
        "Is are all the boiler equipped with a smart control system to optimize operational efficiency?",
      ],
      answers: [
        [
          "Boiler sizing and design operating parameters must consider all possible scenarios of the operation.",
        ],
        [
          "The selected boiler must have smart controls to regulate the fuel and excess air supply to the boiler based on process load variation, thereby by achieving higher combustion efficiency.",
        ],
      ],
      logo: "", // Replace with your actual logo path
      heading: "Industrial Process Pumps", // Pass the heading here
    },
    {
      text: [
        "Have you assessed the insulation level of the steam distribution system to ensure it is sufficient to minimize heat loss to the environment?",
      ],
      answers: [
        [
          "Steam distribution system economic insulation requirement must be carried out by a specialist.",
          "Effectiveness of the insulation must be tested on an annual basis.",
        ],
      ],
      logo: "", // Replace with your actual logo path
      heading: "Steam Distribution System", // Pass the heading here
    },
    {
      text: [
        "Have you considered selecting an energy-efficient chiller for all the plant?",
      ],
      answers: [
        [
          "All chiller units should meet the Minimum Energy Efficiency",
          "Ratio (EER) mentioned in the table.",
        ],
      ],
      logo: "", // Replace with your actual logo path
      heading: "Industrial Chiller System", // Pass the heading here
      
    },
  ];

  return (
    <>
      <Grid2 sx={{ display: "flex", flexDirection: "column", gap: "20px" }}>
        {questions.map((q, index) => (
          <Question
            key={index}
            questionText={q.text}
            logo={q.logo}
            heading={q.heading}
            answers={q.answers}
          />

        ))}
      </Grid2>

      <Grid2>
        
      </Grid2>

      {/* Last Button */}
      <Grid2
        sx={{
          display: "flex",
          flexDirection: "row",
          justifyContent: "flex-end", // This aligns the button to the right
          mt: "45px",
        }}
      >
        <Button
          sx={{
            borderRadius: "32px",
            textTransform: "capitalize",
            justifyContent: "center",
            alignItems: "center",
            background:
              "var(--grad-3, linear-gradient(102deg, #369D9C 0%, #28814D 100%))",
            padding: "11px 40px",
          }}
        >
          <Typography color="#fff" fontSize="14px" fontWeight="600">
            Submit Survey
          </Typography>
        </Button>
      </Grid2>
    </>
  );
}

export default SurveyQuestionSection;

 
hello
 

          <BasicTable></BasicTable>
 


 
Effectiveness of the insulation must be tested on an annual basis.
 
Steam distribution system economic insulation requirement must be carried out by a specialist.
 
Have you assessed the insulation level of the steam distribution system to ensure it is sufficient to minimize heat loss to the environment?
 
Steam Distribution System
 
Upgrade to IE3 and IE4 motors for increased energy efficiency and optimal performance.
 
Do you have all motors with efficiency classification IE3 & IE4?
 
Industrial AC Motors
 

          [
            "Pump with right VFD must be selected for the process with variable flow requirement.",
          ],
 
Pump sizing and selection must consider all possible scenarios of the operation.
 

            "Right pump technology must be selected based on process requirement.",
 
Are bypass valves and valve throttling being eliminated in all retrofitting projects?
 
Have you involved a specialist in the selection of the pump sizing?
 
[
            "Fan sizing and selection must consider all possible scenarios of the operation.",
            "Right fan technology must be selected based on process requirement.",
            "Fan with right VFD must be selected for the process with variable flow requirement.",
          ],
 
Have you involved a specialist in the selection of the pump sizing?
 
 "Does the fan comply with a Fan Efficiency Grade (FEG) of 85% or higher?"
 
Industrial Process Fans
 

                      background: "#F7FFFC",
 

                      border: "1px solid var(--Grey-3, #D9D9D9)",
 

                      border: "1px solid var(--Grey-3, #D9D9D9)",
 

                  borderTop: "1px solid #E4E4E4",
 

// Component to render each question with its respective answers
const Question = ({ questionText, logo, heading, answers }) => {
    return (
      <Grid2
        sx={{
          flexDirection: "column",
          display: "flex",
          border: "1px solid #E4E4E4",
          borderRadius: "5px",
          borderTop: "3px solid #369D9C",
          gap: "20px",
        }}
      >
        <Paper
          sx={{
            display: "flex",
            flexDirection: "column",
            gap: "15px",
          }}
        >
          {/* Heading Section */}
          <Grid2
            sx={{
              display: "flex",
              flexDirection: "row",
              gap: "12px",
              mt: "16px",
              ml: "16px",
              alignItems: "center",
            }}
          >
            {logo && <img src={logo} alt="logo" width="18px" />}
            <Typography fontSize="16px" fontWeight="600" color="#000">
              {heading}
            </Typography>
          </Grid2>
  
          {/* Questions and Text Answers */}
          {questionText.map((q, questionIndex) => (
            <React.Fragment key={questionIndex}>
              {/* Question Text */}
              <Grid2
                sx={{
                  display: "flex",
                  flexDirection: "row",
                  alignItems: "center",
                  gap: "12px",
                  ml: "15px",
                }}
              >
                <Box
                  sx={{
                    width: "37px",
                    height: "34px",
                    backgroundColor: "#F7F7F7",
                    padding: "7px",
                    borderRadius: "6px",
                    display: "flex",
                    alignItems: "center",
                    justifyContent: "center",
                  }}
                >
                  <Typography color="#5B5B5B" fontSize="14px" fontWeight="400">
                    Q.{questionIndex + 1}
                  </Typography>
                </Box>
                <Typography fontSize="14px" fontWeight="500" color="#000">
                  {q}
                </Typography>
              </Grid2>
  
              {/* Answers or Implementation Required */}
              <Grid2
                sx={{
                  borderTop: "1px solid #E4E4E4",
                  mt: "8px",
                  mb: "8px",
                  ml: "0px",
                  padding: "10px 19px",
                  borderRadius: "5px",
                }}
              >
                {answers[questionIndex]?.length > 0 ? (
                  <Grid2
                    sx={{
                      border: "1px solid var(--Grey-3, #D9D9D9)",
                      background: "#F7FFFC",
                      borderRadius: "5px",
                      padding: "1px 12px",
                    }}
                  >
                    {answers[questionIndex].map((answer, answerIndex) => (
                      <Typography
                        key={answerIndex}
                        fontSize="12px"
                        fontWeight="500"
                        color="#000"
                        sx={{ padding: "6px 0" }}
                      >
                        {answerIndex + 1}. {answer}
                      </Typography>
                    ))}
                  </Grid2>
                ) : (
                  <Grid2
                    sx={{
                      display: "flex",
                      alignItems: "center",
                      gap: "12px",
                      border: "1px solid var(--Grey-3, #D9D9D9)",
                      background: "#F7FFFC",
                      borderRadius: "5px",
                      padding: "10px",
                    }}
                  >
                    {logo && <img src={logo} alt="logo" width="18px" />}
                    <Typography fontSize="12px" fontWeight="500" color="#000">
                      Implementation Required
                    </Typography>
                  </Grid2>
                )}
              </Grid2>
            </React.Fragment>
          ))}
        </Paper>
      </Grid2>
    );
  };
  
  // Main component to render the survey question section
  function SurveyQuestionSection() {
    // Example questions array with logos, headings, and multiple answers
    const questions = [
      {
        text: [
          "Do you have all motors with efficiency classification IE3 & IE4?",
        ],
        answers: [
          [
            "Upgrade to IE3 and IE4 motors for increased energy efficiency and optimal performance.",
          ],
        ],
        logo: "", // Replace with your actual logo path
        heading: "Industrial AC Motors", // Pass the heading here
      },
      {
        text: [
          "Have you involved a specialist in the selection of the pump sizing?",
          "Are bypass valves and valve throttling being eliminated in all retrofitting projects?",
        ],
        answers: [
          [
            "Pump sizing and selection must consider all possible scenarios of the operation.",
            "Right pump technology must be selected based on process requirement.",
          ],
          [
            "Pump with right VFD must be selected for the process with variable flow requirement.",
          ],
        ],
        logo: "", // Replace with your actual logo path
        heading: "Industrial Process Pumps", // Pass the heading here
      },
      {
        text: [
          "Have you involved a specialist in the selection of the pump sizing?",
          "Does the fan comply with a Fan Efficiency Grade (FEG) of 85% or higher?"
        ],
        answers: [
          [
            "Fan sizing and selection must consider all possible scenarios of the operation.",
            "Right fan technology must be selected based on process requirement.",
            "Fan with right VFD must be selected for the process with variable flow requirement.",
          ],
          [],
        ],
        logo: "", // Replace with your actual logo path
        heading: "Industrial Process Fans", // Pass the heading here
      },
    ];
  
    return (
      <>
        <Grid2 sx={{ display: "flex", flexDirection: "column", gap: "20px" }}>
          {questions.map((q, index) => (
            <Question
              key={index}
              questionText={q.text}
              logo={q.logo}
              heading={q.heading}
              answers={q.answers}
            />
          ))}
        </Grid2>
  
        <Grid2
          sx={{
            display: "flex",
            flexDirection: "row",
            justifyContent: "flex-end", // This aligns the button to the right
            mt: "45px",
          }}
        >
          <Button
            sx={{
              borderRadius: "32px",
              textTransform: "capitalize",
              justifyContent: "center",
              alignItems: "center",
              background:
                "var(--grad-3, linear-gradient(102deg, #369D9C 0%, #28814D 100%))",
              padding: "11px 40px",
            }}
          >
            <Typography color="#fff" fontSize="14px" fontWeight="600">
              Submit Survey
            </Typography>
          </Button>
        </Grid2>
      </>
    );
  }
  
  export default SurveyQuestionSection;
 

const Question = ({ questionText, logo, heading, answers }) => {
    return (
      <Grid2
        sx={{
          flexDirection: "column",
          display: "flex",
          border: "1px solid #E4E4E4",
          borderRadius: "5px",
          borderTop: "3px solid #369D9C",
          gap: "20px",
        }}
      >
        <Paper
          sx={{
            display: "flex",
            flexDirection: "column",
            gap: "15px",
          }}
        >
          {/* Heading Section */}
          <Grid2
            sx={{
              display: "flex",
              flexDirection: "row",
              gap: "12px",
              mt: "16px",
              ml: "16px",
              alignItems: "center",
            }}
          >
            {logo && <img src={logo} alt="logo" width="18px" />}
            <Typography fontSize="16px" fontWeight="600" color="#000">
              {heading}
            </Typography>
          </Grid2>
  
          {/* Questions and Text Answers */}
          {questionText.map((q, questionIndex) => (
            <React.Fragment key={questionIndex}>
              {/* Question Text */}
              <Grid2
                sx={{
                  display: "flex",
                  flexDirection: "row",
                  alignItems: "center",
                  gap: "12px",
                  ml: "15px",
                }}
              >
                <Box
                  sx={{
                    width: "37px",
                    height: "34px",
                    backgroundColor: "#F7F7F7",
                    padding: "7px",
                    borderRadius: "6px",
                    display: "flex",
                    alignItems: "center",
                    justifyContent: "center",
                  }}
                >
                  <Typography color="#5B5B5B" fontSize="14px" fontWeight="400">
                    Q.{questionIndex + 1}
                  </Typography>
                </Box>
                <Typography fontSize="14px" fontWeight="500" color="#000">
                  {q}
                </Typography>
              </Grid2>
  
              {/* Answers or Implementation Required */}
              <Grid2
                sx={{
                  borderTop: "1px solid #E4E4E4",
                  mt: "8px",
                  mb: "8px",
                  ml: "0px",
                  padding: "10px 19px",
                  borderRadius: "5px",
                }}
              >
                {answers[questionIndex]?.length > 0 ? (
                  <Grid2
                    sx={{
                      border: "1px solid var(--Grey-3, #D9D9D9)",
                      background: "#F7FFFC",
                      borderRadius: "5px",
                      padding: "1px 12px",
                    }}
                  >
                    {answers[questionIndex].map((answer, answerIndex) => (
                      <Typography
                        key={answerIndex}
                        fontSize="12px"
                        fontWeight="500"
                        color="#000"
                        sx={{ padding: "6px 0" }}
                      >
                        {answerIndex + 1}. {answer}
                      </Typography>
                    ))}
                  </Grid2>
                ) : (
                  <Grid2
                    sx={{
                      display: "flex",
                      alignItems: "center",
                      gap: "12px",
                      border: "1px solid var(--Grey-3, #D9D9D9)",
                      background: "#F7FFFC",
                      borderRadius: "5px",
                      padding: "10px",
                    }}
                  >
                    {logo && <img src={magelightBuld} alt="logo" width="18px" />}
                    <Typography fontSize="12px" fontWeight="500" color="#000">
                      Implementation Required
                    </Typography>
                  </Grid2>
                )}
              </Grid2>
            </React.Fragment>
          ))}
        </Paper>
      </Grid2>
    );
  };
  
  // Main component to render the survey question section
  function SurveyQuestionSection() {
    // Example questions array with logos, headings, and multiple answers
    const questions = [
      {
        text: [
          "Do you have all motors with efficiency classification IE3 & IE4?",
        ],
        answers: [
          [
            "Upgrade to IE3 and IE4 motors for increased energy efficiency and optimal performance.",
          ],
        ],
        logo: "", // Replace with your actual logo path
        heading: "Industrial AC Motors", // Pass the heading here
      },
      {
        text: [
          "Have you involved a specialist in the selection of the pump sizing?",
          "Are bypass valves and valve throttling being eliminated in all retrofitting projects?",
        ],
        answers: [
          [
            "Pump sizing and selection must consider all possible scenarios of the operation.",
            "Right pump technology must be selected based on process requirement.",
          ],
          [
            "Pump with right VFD must be selected for the process with variable flow requirement.",
          ],
        ],
        logo: "", // Replace with your actual logo path
        heading: "Industrial Process Pumps", // Pass the heading here
      },
      {
        text: [
          "Have you involved a specialist in the selection of the pump sizing?",
          "Does the fan comply with a Fan Efficiency Grade (FEG) of 85% or higher?"
        ],
        answers: [
          [
            "Fan sizing and selection must consider all possible scenarios of the operation.",
            "Right fan technology must be selected based on process requirement.",
            "Fan with right VFD must be selected for the process with variable flow requirement.",
          ],
          [],
        ],
        logo: "", // Replace with your actual logo path
        heading: "Industrial Process Fans", // Pass the heading here
      },
    ];
  
    return (
      <>
        <Grid2 sx={{ display: "flex", flexDirection: "column", gap: "20px" }}>
          {questions.map((q, index) => (
            <Question
              key={index}
              questionText={q.text}
              logo={q.logo}
              heading={q.heading}
              answers={q.answers}
            />
          ))}
        </Grid2>
  
        <Grid2
          sx={{
            display: "flex",
            flexDirection: "row",
            justifyContent: "flex-end", // This aligns the button to the right
            mt: "45px",
          }}
        >
          <Button
            sx={{
              borderRadius: "32px",
              textTransform: "capitalize",
              justifyContent: "center",
              alignItems: "center",
              background:
                "var(--grad-3, linear-gradient(102deg, #369D9C 0%, #28814D 100%))",
              padding: "11px 40px",
            }}
          >
            <Typography color="#fff" fontSize="14px" fontWeight="600">
              Submit Survey
            </Typography>
          </Button>
        </Grid2>
      </>
    );
  }
  
  export default SurveyQuestionSection;
 
const Question = ({ questionText, logo, heading, answers }) => {
  return (
    <Grid2
      sx={{
        flexDirection: "column",
        display: "flex",
        border: "1px solid #E4E4E4",
        borderRadius: "5px",
        borderTop: "3px solid #369D9C",
        gap: "20px",
      }}
    >
      <Paper
        sx={{
          display: "flex",
          flexDirection: "column",
          gap: "15px",
        }}
      >
        {/* Heading Section */}
        <Grid2
          sx={{
            display: "flex",
            flexDirection: "row",
            gap: "12px",
            mt: "16px",
            ml: "16px",
            alignItems: "center",
          }}
        >
          {logo && <img src={logo} alt="logo" width="18px" />}
          <Typography fontSize="16px" fontWeight="600" color="#000">
            {heading}
          </Typography>
        </Grid2>

        {/* Questions and Text Answers */}
        {questionText.map((q, questionIndex) => (
          <React.Fragment key={questionIndex}>
            {/* Question Text */}
            <Grid2
              sx={{
                display: "flex",
                flexDirection: "row",
                alignItems: "center",
                gap: "12px",
                ml: "15px",
              }}
            >
              <Box
                sx={{
                  width: "37px",
                  height: "34px",
                  backgroundColor: "#F7F7F7",
                  padding: "7px",
                  borderRadius: "6px",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                }}
              >
                <Typography color="#5B5B5B" fontSize="14px" fontWeight="400">
                  Q.{questionIndex + 1}
                </Typography>
              </Box>
              <Typography fontSize="14px" fontWeight="500" color="#000">
                {q}
              </Typography>
            </Grid2>

            {/* Text Answers */}
            <Grid2
              sx={{
                borderTop: "1px solid #E4E4E4",
                mt: "8px",
                mb: "8px",
                ml: "0px",
                padding: "10px 19px",
                borderRadius: "5px",
              }}
            >
              <Grid2
                sx={{
                  border: "1px solid var(--Grey-3, #D9D9D9)",
                  background: "#F7FFFC",
                  borderRadius: "5px",
                  padding: "1px 12px 1px 12px",
                }}
              >
                {answers[questionIndex]?.map((answer, answerIndex) => (
                  <Typography
                    key={answerIndex}
                    fontSize="12px"
                    fontWeight="500"
                    color="#000"
                    sx={{ padding: "6px 0" }}
                  >
                    {answerIndex + 1}. {answer}
                  </Typography>
                ))}
              </Grid2>
            </Grid2>
          </React.Fragment>
        ))}
      </Paper>
    </Grid2>
  );
};

// Main component to render the survey question section
function SurveyQuestionSection() {
  // Example questions array with logos, headings, and multiple answers
  const questions = [
    {
      text: [
        "Do you have all motors with efficiency classification IE3 & IE4?",
      ],
      answers: [
        [
          "Upgrade to IE3 and IE4 motors for increased energy efficiency and optimal performance.",
        ],
      ],
      logo: "", // Replace with your actual logo path
      heading: "Industrial AC Motors", // Pass the heading here
    },
    {
      text: [
        "Have you involved a specialist in the selection of the pump sizing?",
        "Are bypass valves and valve throttling being eliminated in all retrofitting projects?",
      ],
      answers: [
        ["Pump sizing and selection must consider all possible scenarios of the operation. ","Right pump technology must be selected based on process requirement."],
        [
          "Pump with right VFD must be selected for the process with variable flow requirement.",
        ],
      ],
      logo: "", // Replace with your actual logo path
      heading: "Industrial Process Pumps", // Pass the heading here
    },
    {
      text: [
        "Have you involved a specialist in the selection of the pump sizing?",
        "Does the fan comply with a Fan Efficiency Grade (FEG) of 85% or higher?"
      ],
      answers: [
        [
          "Fan sizing and selection must consider all possible scenarios of the operation.",
          "Right fan technology must be selected based on process requirement.",
          "Fan with right VFD must be selected for the process with variable flow requirement."
        ],
        [
            "Implementation Required"
        ]
      ],
      logo: "", // Replace with your actual logo path
      heading: "Industrial Process Fans", // Pass the heading here
    },
  ];

  return (
    <>
      <Grid2 sx={{ display: "flex", flexDirection: "column", gap: "20px" }}>
        {questions.map((q, index) => (
          <Question
            key={index}
            questionText={q.text}
            logo={q.logo}
            heading={q.heading}
            answers={q.answers}
          />
        ))}
      </Grid2>

      <Grid2
        sx={{
          display: "flex",
          flexDirection: "row",
          justifyContent: "flex-end", // This aligns the button to the right
          mt: "45px",
        }}
      >
        <Button
          sx={{
            borderRadius: "32px",
            textTransform: "capitalize",
            justifyContent: "center",
            alignItems: "center",
            background:
              "var(--grad-3, linear-gradient(102deg, #369D9C 0%, #28814D 100%))",
            padding: "11px 40px",
          }}
        >
          <Typography color="#fff" fontSize="14px" fontWeight="600">
            Submit Survey
          </Typography>
        </Button>
      </Grid2>
    </>
  );
}

export default SurveyQuestionSection;

 

        [
          "Pump with right VFD must be selected for the process with variable flow requirement.",
        ],
 

        "Are all your motors operating efficiently?",
 

        "Do you have a strategy for optimizing pump efficiency?",
 
Right pump technology must be selected based on process requirement.
 
Pump sizing and selection must consider all possible scenarios of the operation. 
 
IE3 motors are used for maximum efficiency.
 

          "Older motors are being phased out gradually.",
 

        [
          "We use VFDs to optimize pump performance.",
          "Pumps are sized correctly according to process needs.",
          "Energy-efficient pumps have been installed.",
        ],
 
Are bypass valves and valve throttling being eliminated in all retrofitting projects?
 
Technicians are trained for proper maintenance.
 
Regular maintenance schedules are implemented.
 
Is your equipment regularly maintained?
 
Equipment Efficiency & Maintenance
 
Right pump technology must be selected based on process requirement.
 

          "Regular maintenance of pumps ensures optimum performance.",
          "Energy audits help in selecting efficient pumps.",
 
"Right pump technology must be selected based on process requirement.",
 
Yes, we use LED lighting throughout the factory.
 
Have you involved a specialist in the selection of the pump sizing?
 
Is your factory equipped with energy-efficient lighting?
 
Yes, we use LED lighting throughout the factory
 
Factory Lighting & Pump Sizing
 

                borderBottom: "1px solid #E4E4E4",
 
const Question = ({ questionText, logo, heading, answers }) => {
  return (
    <Grid2
      sx={{
        flexDirection: "column",
        display: "flex",
        border: "1px solid #E4E4E4",
        borderRadius: "5px",
        borderTop: "3px solid #369D9C",
        gap: "20px",
      }}
    >
      <Paper
        sx={{
          display: "flex",
          flexDirection: "column",
          gap: "15px",
        }}
      >
        {/* Heading Section */}
        <Grid2
          sx={{
            display: "flex",
            flexDirection: "row",
            gap: "12px",
            mt: "16px",
            ml: "16px",
            alignItems: "center",
          }}
        >
          {logo && <img src={logo} alt="logo" width="18px" />}
          <Typography fontSize="16px" fontWeight="600" color="#000">
            {heading}
          </Typography>
        </Grid2>

        {/* Questions and Text Answers */}
        {questionText.map((q, questionIndex) => (
          <React.Fragment key={questionIndex}>
            {/* Question Text */}
            <Grid2
              sx={{
                display: "flex",
                flexDirection: "row",
                alignItems: "center",
                gap: "12px",
                ml: "15px",
              }}
            >
              <Box
                sx={{
                  width: "37px",
                  height: "34px",
                  backgroundColor: "#F7F7F7",
                  padding: "7px",
                  borderRadius: "6px",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                }}
              >
                <Typography color="#5B5B5B" fontSize="14px" fontWeight="400">
                  Q.{questionIndex + 1}
                </Typography>
              </Box>
              <Typography fontSize="14px" fontWeight="500" color="#000">
                {q}
              </Typography>
            </Grid2>

            {/* Text Answers */}
            <Grid2
              sx={{
                borderTop: "1px solid #E4E4E4",
                borderBottom: "1px solid #E4E4E4",
                mt: "8px",
                mb: "8px",
                ml: "0px",
                padding: "10px 19px",
                borderRadius: "5px",
              }}
            >
              <Grid2
                sx={{
                  border: "1px solid var(--Grey-3, #D9D9D9)",
                  background: "#F7FFFC",
                  borderRadius: "5px",
                  padding: "1px 12px 1px 12px",
                }}
              >
                {answers[questionIndex]?.map((answer, answerIndex) => (
                  <Typography
                    key={answerIndex}
                    fontSize="12px"
                    fontWeight="500"
                    color="#000"
                    sx={{ padding: "6px 0" }}
                  >
                    {answerIndex + 1}. {answer}
                  </Typography>
                ))}
              </Grid2>
            </Grid2>
          </React.Fragment>
        ))}
      </Paper>
    </Grid2>
  );
};

// Main component to render the survey question section
function SurveyQuestionSection() {
  // Example questions array with logos, headings, and multiple answers
  const questions = [
    {
      text: [
        "Do you have all motors with efficiency classification IE3 & IE4?",
      ],
      answers: [
        [
          "Upgrade to IE3 and IE4 motors for increased energy efficiency and optimal performance.",
        ],
      ],
      logo: "", // Replace with your actual logo path
      heading: "Industrial AC Motors", // Pass the heading here
    },
    {
      text: [
        "Is your factory equipped with energy-efficient lighting?",
        "Have you involved a specialist in the selection of the pump sizing?",
      ],
      answers: [
        ["Yes, we use LED lighting throughout the factory."],
        [
          "Right pump technology must be selected based on process requirement.",
          "Regular maintenance of pumps ensures optimum performance.",
          "Energy audits help in selecting efficient pumps.",
        ],
      ],
      logo: "", // Replace with your actual logo path
      heading: "Factory Lighting & Pump Sizing", // Pass the heading here
    },
    {
      text: [
        "Is your equipment regularly maintained?",
        "Are all your motors operating efficiently?",
        "Do you have a strategy for optimizing pump efficiency?",
      ],
      answers: [
        [
          "Regular maintenance schedules are implemented.",
          "Technicians are trained for proper maintenance.",
        ],
        [
          "IE3 motors are used for maximum efficiency.",
          "Older motors are being phased out gradually.",
        ],
        [
          "We use VFDs to optimize pump performance.",
          "Pumps are sized correctly according to process needs.",
          "Energy-efficient pumps have been installed.",
        ],
      ],
      logo: "", // Replace with your actual logo path
      heading: "Equipment Efficiency & Maintenance", // Pass the heading here
    },
  ];

  return (
    <>
      <Grid2 sx={{ display: "flex", flexDirection: "column", gap: "20px" }}>
        {questions.map((q, index) => (
          <Question
            key={index}
            questionText={q.text}
            logo={q.logo}
            heading={q.heading}
            answers={q.answers}
          />
        ))}
      </Grid2>

      <Grid2
        sx={{
          display: "flex",
          flexDirection: "row",
          justifyContent: "flex-end", // This aligns the button to the right
          mt: "45px",
        }}
      >
        <Button
          sx={{
            borderRadius: "32px",
            textTransform: "capitalize",
            justifyContent: "center",
            alignItems: "center",
            background:
              "var(--grad-3, linear-gradient(102deg, #369D9C 0%, #28814D 100%))",
            padding: "11px 40px",
          }}
        >
          <Typography color="#fff" fontSize="14px" fontWeight="600">
            Submit Survey
          </Typography>
        </Button>
      </Grid2>
    </>
  );
}

export default SurveyQuestionSection;

 

          "Select the right VFD for your variable speed processes for seamless integration and cost savings.",
 
const Question = ({ questionText, logo, heading, answers }) => {
  return (
    <Grid2
      sx={{
        flexDirection: "column",
        display: "flex",
        border: "1px solid #E4E4E4",
        borderRadius: "5px",
        borderTop: "3px solid #369D9C",
        gap: "20px",
      }}
    >
      <Paper
        sx={{
          display: "flex",
          flexDirection: "column",
          gap: "15px",
        }}
      >
        {/* Heading Section */}
        <Grid2
          sx={{
            display: "flex",
            flexDirection: "row",
            gap: "12px",
            mt: "16px",
            ml: "16px",
            alignItems: "center",
          }}
        >
          {logo && <img src={logo} alt="logo" width="18px" />}
          <Typography fontSize="16px" fontWeight="600" color="#000">
            {heading}
          </Typography>
        </Grid2>

        {/* Questions and Text Answers */}
        {questionText.map((q, questionIndex) => (
          <React.Fragment key={questionIndex}>
            {/* Question Text */}
            <Grid2
              sx={{
                display: "flex",
                flexDirection: "row",
                alignItems: "center",
                gap: "12px",
                ml: "15px",
              }}
            >
              <Box
                sx={{
                  width: "37px",
                  height: "34px",
                  backgroundColor: "#F7F7F7",
                  padding: "7px",
                  borderRadius: "6px",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                }}
              >
                <Typography color="#5B5B5B" fontSize="14px" fontWeight="400">
                  Q.{questionIndex + 1}
                </Typography>
              </Box>
              <Typography fontSize="14px" fontWeight="500" color="#000">
                {q}
              </Typography>
            </Grid2>

            {/* Text Answers */}
            <Grid2
              sx={{
                borderTop: "1px solid #E4E4E4",
                borderBottom: "1px solid #E4E4E4",
                mt: "8px",
                mb: "8px",
                ml: "0px",
                padding: "10px 19px",
                borderRadius: "5px",
              }}
            >
              <Grid2
                sx={{
                  border: "1px solid var(--Grey-3, #D9D9D9)",
                  background: "#F7FFFC",
                  borderRadius: "5px",
                  padding: "1px 12px 1px 12px",
                }}
              >
                {answers[questionIndex]?.map((answer, answerIndex) => (
                  <Typography
                    key={answerIndex}
                    fontSize="12px"
                    fontWeight="500"
                    color="#000"
                    sx={{ padding: "6px 0" }}
                  >
                    {answerIndex + 1}. {answer}
                  </Typography>
                ))}
              </Grid2>
            </Grid2>
          </React.Fragment>
        ))}
      </Paper>
    </Grid2>
  );
};

// Main component to render the survey question section
function SurveyQuestionSection() {
  // Example questions array with logos, headings, and multiple answers
  const questions = [
    {
      text: [
        "Do you have all motors with efficiency classification IE3 & IE4?",
      ],
      answers: [
        [
          "Upgrade to IE3 and IE4 motors for increased energy efficiency and optimal performance.",
          "Select the right VFD for your variable speed processes for seamless integration and cost savings.",
        ],
      ],
      logo: "", // Replace with your actual logo path
      heading: "Industrial AC Motors", // Pass the heading here
    },
    {
      text: [
        "Is your factory equipped with energy-efficient lighting?",
        "Have you involved a specialist in the selection of the pump sizing?",
      ],
      answers: [
        ["Yes, we use LED lighting throughout the factory."],
        [
          "Right pump technology must be selected based on process requirement.",
          "Regular maintenance of pumps ensures optimum performance.",
          "Energy audits help in selecting efficient pumps.",
        ],
      ],
      logo: "", // Replace with your actual logo path
      heading: "Factory Lighting & Pump Sizing", // Pass the heading here
    },
    {
      text: [
        "Is your equipment regularly maintained?",
        "Are all your motors operating efficiently?",
        "Do you have a strategy for optimizing pump efficiency?",
      ],
      answers: [
        [
          "Regular maintenance schedules are implemented.",
          "Technicians are trained for proper maintenance.",
        ],
        [
          "IE3 motors are used for maximum efficiency.",
          "Older motors are being phased out gradually.",
        ],
        [
          "We use VFDs to optimize pump performance.",
          "Pumps are sized correctly according to process needs.",
          "Energy-efficient pumps have been installed.",
        ],
      ],
      logo: "", // Replace with your actual logo path
      heading: "Equipment Efficiency & Maintenance", // Pass the heading here
    },
  ];

  return (
    <>
      <Grid2 sx={{ display: "flex", flexDirection: "column", gap: "20px" }}>
        {questions.map((q, index) => (
          <Question
            key={index}
            questionText={q.text}
            logo={q.logo}
            heading={q.heading}
            answers={q.answers}
          />
        ))}
      </Grid2>

      <Grid2
        sx={{
          display: "flex",
          flexDirection: "row",
          justifyContent: "flex-end", // This aligns the button to the right
          mt: "45px",
        }}
      >
        <Button
          sx={{
            borderRadius: "32px",
            textTransform: "capitalize",
            justifyContent: "center",
            alignItems: "center",
            background:
              "var(--grad-3, linear-gradient(102deg, #369D9C 0%, #28814D 100%))",
            padding: "11px 40px",
          }}
        >
          <Typography color="#fff" fontSize="14px" fontWeight="600">
            Submit Survey
          </Typography>
        </Button>
      </Grid2>
    </>
  );
}

export default SurveyQuestionSection;

 
import React from "react";
import { Box, Grid2, Paper, Typography, Button } from "@mui/material";
// Component to render each question with its respective answers
const Question = ({ questionText, logo, heading, answers }) => {
  return (
    <Grid2
      sx={{
        flexDirection: "column",
        display: "flex",
        border: "1px solid #E4E4E4",
        borderRadius: "5px",
        borderTop: "3px solid #369D9C",
        gap: "20px",
      }}
    >
      <Paper
        sx={{
          display: "flex",
          flexDirection: "column",
          gap: "15px",
        }}
      >
        {/* Heading Section */}
        <Grid2
          sx={{
            display: "flex",
            flexDirection: "row",
            gap: "12px",
            mt: "16px",
            ml: "16px",
            alignItems: "center",
          }}
        >
          {logo && <img src={logo} alt="logo" width="18px" />}
          <Typography fontSize="16px" fontWeight="600" color="#000">
            {heading}
          </Typography>
        </Grid2>

        {/* Questions and Text Answers */}
        {questionText.map((q, questionIndex) => (
          <React.Fragment key={questionIndex}>
            {/* Question Text */}
            <Grid2
              sx={{
                display: "flex",
                flexDirection: "row",
                alignItems: "center",
                gap: "12px",
                ml: "15px",
              }}
            >
              <Box
                sx={{
                  width: "37px",
                  height: "34px",
                  backgroundColor: "#F7F7F7",
                  padding: "7px",
                  borderRadius: "6px",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                }}
              >
                <Typography color="#5B5B5B" fontSize="14px" fontWeight="400">
                  Q.{questionIndex + 1}
                </Typography>
              </Box>
              <Typography fontSize="14px" fontWeight="500" color="#000">
                {q}
              </Typography>
            </Grid2>

            {/* Text Answers */}
            <Grid2
              sx={{
                borderTop: "1px solid #E4E4E4",
                borderBottom: "1px solid #E4E4E4",
                mt: "8px",
                mb: "8px",
                ml: "0px",
                padding: "10px 19px",
                borderRadius: "5px",
              }}
            >
              <Grid2
                sx={{
                  border: "1px solid var(--Grey-3, #D9D9D9)",
                  background: "#F7FFFC",
                  borderRadius: "5px",
                  padding: "1px 12px 1px 12px",
                }}
              >
                {answers[questionIndex]?.map((answer, answerIndex) => (
                  <Typography
                    key={answerIndex}
                    fontSize="12px"
                    fontWeight="500"
                    color="#000"
                    sx={{ padding: "6px 0" }}
                  >
                    {answerIndex + 1}. {answer}
                  </Typography>
                ))}
              </Grid2>
            </Grid2>
          </React.Fragment>
        ))}
      </Paper>
    </Grid2>
  );
};

// Main component to render the survey question section
function SurveyQuestionSection() {
  // Example questions array with logos, headings, and multiple answers
  const questions = [
    {
      text: [
        "Do you have all motors with efficiency classification IE3 & IE4?",
      ],
      answers: [
        [
          "Upgrade to IE3 and IE4 motors for increased energy efficiency and optimal performance.",
          "Select the right VFD for your variable speed processes for seamless integration and cost savings.",
        ],
      ],
      logo: "", // Replace with your actual logo path
      heading: "Industrial AC Motors", // Pass the heading here
    },
    {
      text: [
        "Is your factory equipped with energy-efficient lighting?",
        "Have you involved a specialist in the selection of the pump sizing?",
      ],
      answers: [
        ["Yes, we use LED lighting throughout the factory."],
        [
          "Right pump technology must be selected based on process requirement.",
          "Regular maintenance of pumps ensures optimum performance.",
          "Energy audits help in selecting efficient pumps.",
        ],
      ],
      logo: "", // Replace with your actual logo path
      heading: "Factory Lighting & Pump Sizing", // Pass the heading here
    },
    {
      text: [
        "Is your equipment regularly maintained?",
        "Are all your motors operating efficiently?",
        "Do you have a strategy for optimizing pump efficiency?",
      ],
      answers: [
        [
          "Regular maintenance schedules are implemented.",
          "Technicians are trained for proper maintenance.",
        ],
        [
          "IE3 motors are used for maximum efficiency.",
          "Older motors are being phased out gradually.",
        ],
        [
          "We use VFDs to optimize pump performance.",
          "Pumps are sized correctly according to process needs.",
          "Energy-efficient pumps have been installed.",
        ],
      ],
      logo: "", // Replace with your actual logo path
      heading: "Equipment Efficiency & Maintenance", // Pass the heading here
    },
  ];

  return (
    <>
      <Grid2 sx={{ display: "flex", flexDirection: "column", gap: "20px" }}>
        {questions.map((q, index) => (
          <Question
            key={index}
            questionText={q.text}
            logo={q.logo}
            heading={q.heading}
            answers={q.answers}
          />
        ))}
      </Grid2>

      <Grid2
        sx={{
          display: "flex",
          flexDirection: "row",
          justifyContent: "flex-end", // This aligns the button to the right
          mt: "45px",
        }}
      >
        <Button
          sx={{
            borderRadius: "32px",
            textTransform: "capitalize",
            justifyContent: "center",
            alignItems: "center",
            background:
              "var(--grad-3, linear-gradient(102deg, #369D9C 0%, #28814D 100%))",
            padding: "11px 40px",
          }}
        >
          <Typography color="#fff" fontSize="14px" fontWeight="600">
            Submit Survey
          </Typography>
        </Button>
      </Grid2>
    </>
  );
}

export default SurveyQuestionSection;

 
import React from "react";
import { Box, Grid2, Paper, Typography, Button } from "@mui/material";
// Component to render each question with its respective answers
const Question = ({ questionText, logo, heading, answers }) => {
  return (
    <Grid2
      sx={{
        flexDirection: "column",
        display: "flex",
        border: "1px solid #E4E4E4",
        borderRadius: "5px",
        borderTop: "3px solid #369D9C",
        gap: "20px",
      }}
    >
      <Paper
        sx={{
          display: "flex",
          flexDirection: "column",
          gap: "15px",
        }}
      >
        {/* Heading Section */}
        <Grid2
          sx={{
            display: "flex",
            flexDirection: "row",
            gap: "12px",
            mt: "16px",
            ml: "16px",
            alignItems: "center",
          }}
        >
          {logo && <img src={logo} alt="logo" width="18px" />}
          <Typography fontSize="16px" fontWeight="600" color="#000">
            {heading}
          </Typography>
        </Grid2>

        {/* Questions and Text Answers */}
        {questionText.map((q, questionIndex) => (
          <React.Fragment key={questionIndex}>
            {/* Question Text */}
            <Grid2
              sx={{
                display: "flex",
                flexDirection: "row",
                alignItems: "center",
                gap: "12px",
                ml: "15px",
              }}
            >
              <Box
                sx={{
                  width: "37px",
                  height: "34px",
                  backgroundColor: "#F7F7F7",
                  padding: "7px",
                  borderRadius: "6px",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                }}
              >
                <Typography color="#5B5B5B" fontSize="14px" fontWeight="400">
                  Q.{questionIndex + 1}
                </Typography>
              </Box>
              <Typography fontSize="14px" fontWeight="500" color="#000">
                {q}
              </Typography>
            </Grid2>

            {/* Text Answers */}
            <Grid2
              sx={{
                borderTop: "1px solid #E4E4E4",
                borderBottom: "1px solid #E4E4E4",
                mt: "8px",
                mb: "8px",
                ml: "0px",
                padding: "10px 19px",
                borderRadius: "5px",
              }}
            >
              <Grid2
                sx={{
                  border: "1px solid var(--Grey-3, #D9D9D9)",
                  background: "#F7FFFC",
                  borderRadius: "5px",
                  padding: "1px 12px 1px 12px",
                }}
              >
                {answers[questionIndex]?.map((answer, answerIndex) => (
                  <Typography
                    key={answerIndex}
                    fontSize="12px"
                    fontWeight="500"
                    color="#000"
                    sx={{ padding: "6px 0" }}
                  >
                    {answerIndex + 1}. {answer}
                  </Typography>
                ))}
              </Grid2>
            </Grid2>
          </React.Fragment>
        ))}
      </Paper>
    </Grid2>
  );
};

// Main component to render the survey question section
function SurveyQuestionSection() {
  // Example questions array with logos, headings, and multiple answers
  const questions = [
    {
      text: [
        "Do you have all motors with efficiency classification IE3 & IE4?",
      ],
      answers: [
        [
          "Upgrade to IE3 and IE4 motors for increased energy efficiency and optimal performance.",
          "Select the right VFD for your variable speed processes for seamless integration and cost savings.",
        ],
      ],
      logo: "", // Replace with your actual logo path
      heading: "Industrial AC Motors", // Pass the heading here
    },
    {
      text: [
        "Is your factory equipped with energy-efficient lighting?",
        "Have you involved a specialist in the selection of the pump sizing?",
      ],
      answers: [
        ["Yes, we use LED lighting throughout the factory."],
        [
          "Right pump technology must be selected based on process requirement.",
          "Regular maintenance of pumps ensures optimum performance.",
          "Energy audits help in selecting efficient pumps.",
        ],
      ],
      logo: "", // Replace with your actual logo path
      heading: "Factory Lighting & Pump Sizing", // Pass the heading here
    },
    {
      text: [
        "Is your equipment regularly maintained?",
        "Are all your motors operating efficiently?",
        "Do you have a strategy for optimizing pump efficiency?",
      ],
      answers: [
        [
          "Regular maintenance schedules are implemented.",
          "Technicians are trained for proper maintenance.",
        ],
        [
          "IE3 motors are used for maximum efficiency.",
          "Older motors are being phased out gradually.",
        ],
        [
          "We use VFDs to optimize pump performance.",
          "Pumps are sized correctly according to process needs.",
          "Energy-efficient pumps have been installed.",
        ],
      ],
      logo: "", // Replace with your actual logo path
      heading: "Equipment Efficiency & Maintenance", // Pass the heading here
    },
  ];

  return (
    <>
      <Grid2 sx={{ display: "flex", flexDirection: "column", gap: "20px" }}>
        {questions.map((q, index) => (
          <Question
            key={index}
            questionText={q.text}
            logo={q.logo}
            heading={q.heading}
            answers={q.answers}
          />
        ))}
      </Grid2>

      <Grid2
        sx={{
          display: "flex",
          flexDirection: "row",
          justifyContent: "flex-end", // This aligns the button to the right
          mt: "45px",
        }}
      >
        <Button
          sx={{
            borderRadius: "32px",
            textTransform: "capitalize",
            justifyContent: "center",
            alignItems: "center",
            background:
              "var(--grad-3, linear-gradient(102deg, #369D9C 0%, #28814D 100%))",
            padding: "11px 40px",
          }}
        >
          <Typography color="#fff" fontSize="14px" fontWeight="600">
            Submit Survey
          </Typography>
        </Button>
      </Grid2>
    </>
  );
}

export default SurveyQuestionSection;

 


// const Question = ({ questionNumber, questionText, logo, heading, answers }) => {
//   return (
//     <Grid2
//       sx={{
//         flexDirection: "column",
//         display: "flex",
//         border: "1px solid #E4E4E4",
//         borderRadius: "5px",
//         borderTop: "3px solid #369D9C",
//         gap: "20px",
//       }}
//     >
//       <Paper
//         sx={{
//           display: "flex",
//           flexDirection: "column",
//           gap: "15px",
//         }}
//       >
//         {/* Heading Section */}
//         <Grid2
//           sx={{
//             display: "flex",
//             flexDirection: "row",
//             gap: "12px",
//             mt: "16px",
//             ml: "16px",
//             alignItems: "center",
//           }}
//         >
//           {logo && <img src={logo} alt="logo" width="18px" />}
//           <Typography fontSize="16px" fontWeight="600" color="#000">
//             {heading}
//           </Typography>
//         </Grid2>

//         {/* Questions and Text Answers */}
//         {questionText.map((q, index) => (
//           <React.Fragment key={index}>
//             {/* Question Text */}
//             <Grid2
//               sx={{
//                 display: "flex",
//                 flexDirection: "row",
//                 alignItems: "center",
//                 gap: "12px",
//                 ml: "15px",
//               }}
//             >
//               <Box
//                 sx={{
//                   width: "37px",
//                   height: "34px",
//                   backgroundColor: "#F7F7F7",
//                   padding: "7px",
//                   borderRadius: "6px",
//                   display: "flex",
//                   alignItems: "center",
//                   justifyContent: "center",
//                 }}
//               >
//                 <Typography color="#5B5B5B" fontSize="14px" fontWeight="400">
//                   Q.{questionNumber}.{index + 1}
//                 </Typography>
//               </Box>
//               <Typography fontSize="14px" fontWeight="500" color="#000">
//                 {q}
//               </Typography>
//             </Grid2>

//             {/* Text Answers */}
//             <Grid2
//               sx={{
//                 borderTop: "1px solid #E4E4E4",
//                 borderBottom: "1px solid #E4E4E4",
//                 mt: "8px",
//                 mb: "8px",
//                 ml: "0px",
//                 padding: "20px",
//               }}
//             >
//               <Grid2
//                 sx={{
//                   borderRadius: "5px",
//                   border: "1px solid var(--Grey-3, #D9D9D9)",
//                   background: "#F7FFFC",
//                   padding:"8px 15px 8px 15px"
//                 }}
//               >
//                 {answers[index] && (
//                   <Typography
//                     fontSize="14px"
//                     fontWeight="500"
//                     color="#474747"
//                     sx={{ padding: "6px 0" }}
//                   >
//                     {answers[index]}
//                   </Typography>
//                 )}
//               </Grid2>
//             </Grid2>
//           </React.Fragment>
//         ))}
//       </Paper>
//     </Grid2>
//   );
// };

// function SurveyQuestionSection() {
//   // Example questions array with logos, headings, and answers
//   const questions = [
//     {
//       number: 1,
//       text: [
//         "Do you have all motors with efficiency classification IE3 & IE4?",
//       ],
//       answers: [
//         "Upgrade to IE3 and IE4 motors for increased energy efficiency and optimal performance. Select the right VFD for your variable speed processes for seamless integration and cost savings.",
//       ],
//       logo: "", // Replace with your actual logo path
//       heading: "Industrial AC Motors", // Pass the heading here
//     },
//     {
//       number: 2,
//       text: ["Is your factory equipped with energy-efficient lighting?","Have you involved a specialist in the selection of the pump sizing?"],
//       answers: ["Yes, we use LED lighting throughout the factory.",["Right pump technology must be selected based on process requirement."]],
//       logo: "", // Replace with your actual logo path
//       heading: "Factory Lighting", // Pass the heading here
//     },
//   ];

//   return (
//     <>
//       <Grid2 sx={{ display: "flex", flexDirection: "column", gap: "20px" }}>
//         {questions.map((q) => (
//           <Question
//             key={q.number}
//             questionNumber={q.number}
//             questionText={q.text}
//             logo={q.logo}
//             heading={q.heading}
//             answers={q.answers}
//           />
//         ))}
//       </Grid2>

//       <Grid2
//         sx={{
//           display: "flex",
//           flexDirection: "row",
//           justifyContent: "flex-end", // This aligns the button to the right
//           mt: "45px",
//         }}
//       >
//         <Button
//           sx={{
//             borderRadius: "32px",
//             textTransform: "capitalize",
//             justifyContent: "center",
//             alignItems: "center",
//             background:
//               "var(--grad-3, linear-gradient(102deg, #369D9C 0%, #28814D 100%))",
//             padding: "11px 40px",
//           }}
//         >
//           <Typography color="#fff" fontSize="14px" fontWeight="600">
//             Submit Survey
//           </Typography>
//         </Button>
//       </Grid2>
//     </>
//   );
// }

// export default SurveyQuestionSection;

// Component to render each question with its respective answers

 
1px solid
 

                background: "#F7FFFC",
 

import React from "react";
import { Box, Grid2, Paper, Typography, Button } from "@mui/material";
 
const Question = ({ questionText, logo, heading, answers }) => {
  return (
    <Grid2
      sx={{
        flexDirection: "column",
        display: "flex",
        border: "1px solid #E4E4E4",
        borderRadius: "5px",
        borderTop: "3px solid #369D9C",
        gap: "20px",
      }}
    >
      <Paper
        sx={{
          display: "flex",
          flexDirection: "column",
          gap: "15px",
        }}
      >
        {/* Heading Section */}
        <Grid2
          sx={{
            display: "flex",
            flexDirection: "row",
            gap: "12px",
            mt: "16px",
            ml: "16px",
            alignItems: "center",
          }}
        >
          {logo && <img src={logo} alt="logo" width="18px" />}
          <Typography fontSize="16px" fontWeight="600" color="#000">
            {heading}
          </Typography>
        </Grid2>

        {/* Questions and Text Answers */}
        {questionText.map((q, questionIndex) => (
          <React.Fragment key={questionIndex}>
            {/* Question Text */}
            <Grid2
              sx={{
                display: "flex",
                flexDirection: "row",
                alignItems: "center",
                gap: "12px",
                ml: "15px",
              }}
            >
              <Box
                sx={{
                  width: "37px",
                  height: "34px",
                  backgroundColor: "#F7F7F7",
                  padding: "7px",
                  borderRadius: "6px",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                }}
              >
                <Typography color="#5B5B5B" fontSize="14px" fontWeight="400">
                  Q.{questionIndex + 1}
                </Typography>
              </Box>
              <Typography fontSize="14px" fontWeight="500" color="#000">
                {q}
              </Typography>
            </Grid2>

            {/* Text Answers */}
            <Grid2
              sx={{
                borderTop: "1px solid #E4E4E4",
                borderBottom: "1px solid #E4E4E4",
                mt: "8px",
                mb: "8px",
                ml: "0px",
                padding: "26px 19px",
                borderRadius: "5px",
              }}
            >
              <Grid2 sx={{background: "#F7FFFC",}}>
              {answers[questionIndex]?.map((answer, answerIndex) => (
                <Typography
                  key={answerIndex}
                  fontSize="14px"
                  fontWeight="500"
                  color="#474747"
                  sx={{ padding: "6px 10",border:"1px solid var(--Grey-3, #D9D9D9);" }}
                >
                  {answerIndex + 1}. {answer}
                </Typography>
              ))}
              </Grid2>
            </Grid2>
          </React.Fragment>
        ))}
      </Paper>
    </Grid2>
  );
};

// Main component to render the survey question section
function SurveyQuestionSection() {
  // Example questions array with logos, headings, and multiple answers
  const questions = [
    {
      text: ["Do you have all motors with efficiency classification IE3 & IE4?"],
      answers: [
        [
          "Upgrade to IE3 and IE4 motors for increased energy efficiency and optimal performance.",
          "Select the right VFD for your variable speed processes for seamless integration and cost savings.",
        ],
      ],
      logo: "", // Replace with your actual logo path
      heading: "Industrial AC Motors", // Pass the heading here
    },
    {
      text: [
        "Is your factory equipped with energy-efficient lighting?",
        "Have you involved a specialist in the selection of the pump sizing?",
      ],
      answers: [
        ["Yes, we use LED lighting throughout the factory."],
        [
          "Right pump technology must be selected based on process requirement.",
          "Regular maintenance of pumps ensures optimum performance.",
          "Energy audits help in selecting efficient pumps.",
        ],
      ],
      logo: "", // Replace with your actual logo path
      heading: "Factory Lighting & Pump Sizing", // Pass the heading here
    },
    {
      text: [
        "Is your equipment regularly maintained?",
        "Are all your motors operating efficiently?",
        "Do you have a strategy for optimizing pump efficiency?",
      ],
      answers: [
        [
          "Regular maintenance schedules are implemented.",
          "Technicians are trained for proper maintenance.",
        ],
        [
          "IE3 motors are used for maximum efficiency.",
          "Older motors are being phased out gradually.",
        ],
        [
          "We use VFDs to optimize pump performance.",
          "Pumps are sized correctly according to process needs.",
          "Energy-efficient pumps have been installed.",
        ],
      ],
      logo: "", // Replace with your actual logo path
      heading: "Equipment Efficiency & Maintenance", // Pass the heading here
    },
  ];

  return (
    <>
      <Grid2 sx={{ display: "flex", flexDirection: "column", gap: "20px" }}>
        {questions.map((q, index) => (
          <Question
            key={index}
            questionText={q.text}
            logo={q.logo}
            heading={q.heading}
            answers={q.answers}
          />
        ))}
      </Grid2>

      <Grid2
        sx={{
          display: "flex",
          flexDirection: "row",
          justifyContent: "flex-end", // This aligns the button to the right
          mt: "45px",
        }}
      >
        <Button
          sx={{
            borderRadius: "32px",
            textTransform: "capitalize",
            justifyContent: "center",
            alignItems: "center",
            background:
              "var(--grad-3, linear-gradient(102deg, #369D9C 0%, #28814D 100%))",
            padding: "11px 40px",
          }}
        >
          <Typography color="#fff" fontSize="14px" fontWeight="600">
            Submit Survey
          </Typography>
        </Button>
      </Grid2>
    </>
  );
}

export default SurveyQuestionSection;
 
10px 10px 20px 10px
 


import React from "react";
import { Box, Grid2, Paper, Typography, Button } from "@mui/material";
 


import React from "react";
import { Box, Grid2, Paper, Typography, Button } from "@mui/material";

 
Yes, we have motors with efficiency classifications IE3 and IE4.
 

                height:"",
 

        "Are your motors regularly serviced?",
 

        "Yes, our motors are serviced regularly according to maintenance schedules.",
 
import React from "react";
import { Box, Grid2, Paper, Typography, Button } from "@mui/material";

const Question = ({ questionNumber, questionText, logo, heading }) => {
  return (
    <Grid2
      sx={{
        flexDirection: "column",
        display: "flex",
        border: "1px solid #E4E4E4",
        borderRadius: "5px",
        borderTop: "3px solid #369D9C",
        gap: "20px",
      }}
    >
      <Paper
        sx={{
          display: "flex",
          flexDirection: "column",
          gap: "15px",
        }}
      >
        {/* Heading Section */}
        <Grid2
          sx={{
            display: "flex",
            flexDirection: "row",
            gap: "12px",
            mt: "16px",
            ml: "16px",
            alignItems: "center",
          }}
        >
          {logo && <img src={logo} alt="logo" width="18px" />}
          <Typography fontSize="16px" fontWeight="600" color="#000">
            {heading}
          </Typography>
        </Grid2>

        {/* Questions and Buttons */}
        {questionText.map((q, index) => (
          <React.Fragment key={index}>
            {/* Question Text */}
            <Grid2
              sx={{
                display: "flex",
                flexDirection: "row",
                alignItems: "center",
                gap: "12px",
                ml: "15px",
              }}
            >
              <Box
                sx={{
                  width: "37px",
                  height: "34px",
                  backgroundColor: "#F7F7F7",
                  padding: "7px",
                  borderRadius: "6px",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                }}
              >
                <Typography color="#5B5B5B" fontSize="14px" fontWeight="400">
                  Q.{index + 1}
                </Typography>
              </Box>
              <Typography fontSize="14px" fontWeight="500" color="#000">
                {q}
              </Typography>
            </Grid2>

            {/* Buttons */}
            <Grid2
              sx={{
                borderTop: "1px solid #E4E4E4",
                borderBottom: "1px solid #E4E4E4",
              }}
            >
              <Grid2
                sx={{
                  display: "flex",
                  flexDirection: "row",
                  gap: "8px",
                  mt: "10px",
                  ml: "16px",
                  mb: "12px",
                }}
              >
                {["Yes", "No", "N/A"].map((answer, i) => (
                  <Button
                    key={i}
                    sx={{
                      background:
                        answer === "Yes"
                          ? "linear-gradient(102deg, #369D9C 0%, #28814D 100%)"
                          : "#FFF",
                      color: answer === "Yes" ? "#FFF" : "#474747",
                      border: answer === "Yes" ? "none" : "1px solid #369D9C",
                      padding: "6px 22px",
                      borderRadius: "32px",
                      textTransform: "capitalize",
                    }}
                  >
                    <Typography fontSize="14px" fontWeight="500">
                      {answer}
                    </Typography>
                  </Button>
                ))}
              </Grid2>
            </Grid2>
          </React.Fragment>
        ))}
      </Paper>
    </Grid2>
  );
};

function SurveyQuestionSection() {
  // Example questions array with logos and headings
  const questions = [
    {
      number: 1,
      text: [
        "Do you have all motors with efficiency classification IE3 & IE4?",
      ],
      logo: "", // Replace with your actual logo path
      heading: "Industrial AC Motors", // Pass the heading here
    },
  ];

  return (
    <>
      <Grid2 sx={{ display: "flex", flexDirection: "column", gap: "20px" }}>
        {questions.map((q) => (
          <Question
            key={q.number}
            questionNumber={q.number}
            questionText={q.text}
            logo={q.logo}
            heading={q.heading}
          />
        ))}
      </Grid2>

      <Grid2
        sx={{
          display: "flex",
          flexDirection: "row",
          justifyContent: "flex-end", // This aligns the button to the right
          mt: "45px",
        }}
      >
        <Button
          sx={{
            borderRadius: "32px",
            textTransform: "capitalize",
            justifyContent: "center",
            alignItems: "center",
            background:
              "var(--grad-3, linear-gradient(102deg, #369D9C 0%, #28814D 100%))",
            padding: "11px 40px",
          }}
        >
          <Typography color="#fff" fontSize="14px" fontWeight="600">
            Submit Survey
          </Typography>
        </Button>
      </Grid2>
    </>
  );
}

export default SurveyQuestionSection;

 
ac_motors_logo
 

          onClick={handleStartSurvey}
 
 const [surveyStarted, setSurveyStarted] = useState(false);

  const handleStartSurvey = () => {
    setSurveyStarted(true);
  };
 

    {
      number: 2,
      text: [
        "Have you involved a specialist in the selection of the pump sizing?",
        "Are bypass valves and valve throttling being eliminated in all retrofitting projects?",
      ],
      logo: pump2, // Replace with your logo path
      heading: "Energy Compliance", // Example heading
    },
    {
      number: 3,
      text: [
        "Have you involved a specialist in the selection of the fan sizing?",
        "Does the fan comply with a Fan Efficiency Grade (FEG) of 85% or higher?",
      ],
      logo: wind, // Replace with your logo path
      heading: "Compressed Air System", // Example heading
    },
    {
      number: 4,
      text: [
        "Has a high-efficiency boiler been selected for all the plant process?",
        "Is are all the boiler equipped with a smart control system to optimize operational efficiency?",
      ],
      logo: boiler, // Replace with your logo path
      heading: "Industrial Boilers", // Example heading
    },
    {
      number: 5,
      text: [
        "Have you assessed the insulation level of the steam distribution system to ensure it is sufficient to minimize heat loss to the environment?",
      ],
      logo: boiler, // Replace with your logo path
      heading: "Steam Distribution System", // Example heading
    },
    {
      number: 6,
      text: [
        "Have you considered selecting an energy-efficient chiller for all the plant?",
      ],
      logo: tempreture, // Replace with your logo path
      heading: "Industrial Chiller System", // Example heading
    },
    {
      number: 7,
      text: [
        "Has the insulation level of the chilled water distribution system been assessed to ensure it is sufficient to minimize energy loss?",
      ],
      logo: snowflakes, // Replace with your logo path
      heading: "Chilled Water Distribution System", // Example heading
    },
    {
      number: 8,
      text: [
        "Has the insulation level of the chilled water distribution system been assessed to ensure it is sufficient to minimize energy loss?",
        "Has the system been designed to minimize pumping losses by reducing or eliminating bypass/re-circulation?",
      ],
      logo: snowflakes,
      heading: "Chilled Water Distribution System",
    },
    {
      number: 9,
      text: [
        "Has a high-efficiency condenser suitable for the plant been selected?",
      ],
      logo: warehouse,
      heading: "Refrigerated Storage Area",
    },
    {
      number: 10,
      text: [
        "Has the electrical system been designed to incorporate control measures?",
      ],
      logo: bolt,
      heading: "Power Quality",
    },
    {
      number: 11,
      text: [
        "Has the design process considered identifying and evaluating potential waste heat recovery systems based on the waste heat generated during the process?",
      ],
      logo: tempreture,
      heading: "Power Quality",
    },
    {
      number: 11,
      text: [
        "Has the design process considered identifying and evaluating potential waste heat recovery systems based on the waste heat generated during the process?",
        "Are all the sub-meters labeled for easy identification and tracking of energy consumption?",
      ],
      logo: r_bin,
      heading: "Process Energy Sub-Metering",
    },
    {
      number: 12,
      text: [
        "Has the development team considered improving the energy efficiency of the buildings envelope?",
      ],
      logo: r_bin,
      heading:
        "Energy Conservation Techniques and Thermal Insulation (Applicable for both Air-conditioned and Non-Air-Conditioned buildings)",
    },
    {
      number: 13,
      text: [
        "Has interior thermal imaging been conducted for air-conditioned/climate-controlled spaces to identify potential building defects?",
        "If leaks or gaps were identified, have appropriate corrective actions been taken to address them?",
        "Have the tests and reports been conducted in compliance with the specified conditions?",
      ],
      logo: snow_blowing,
      heading:
        "Envelope Tightness for Air-Conditioned Spaces - Thermal Imaging Technique",
    },
    {
      number: 14,
      text: [
        "Has the industrial facility/warehouse been assessed for envelope airtightness, and have measures been taken to identify and address any defects or leakages?",
      ],
      logo: meter_bolt,
      heading:
        "Envelope Tightness for Air-Conditioned Spaces - Thermal Imaging Technique",
    },
    {
      number: 15,
      text: [
        "Have you evaluated the potential impact of different HVAC systems on energy efficiency and operating costs to inform your selection?",
      ],
      logo: calculator_bill,
      heading: "Optimal System Sizing - HVAC",
    },
    {
      number: 17,
      text: [
        "Have you considered incorporating design strategies to utilize Energy Recovery Units (ERUs) in the plant?",
      ],
      logo: hand_holding,
      heading:
        "Installation of Energy Recovery Units and regulated air intake system",
    },
    {
      number: 18,
      text: [
        'Have you confirmed that the energy-efficient cooling equipment to be procured and installed is consistent with the capacities specified in the "Optimal System Sizing - HVAC section?',
      ],
      logo: hand_holding,
      heading:
        "Selection of Cooling Equipment with High Energy Efficiency Ratio (EER)",
    },
    {
      number: 19,
      text: [
        "Have you considered incorporating the necessary strategies into the HVAC system design to ensure efficient control and operation of the units?",
      ],
      logo: snowflakes,
      heading: "Programmable thermostats and CO2 Sensors for HVAC system",
    },
    {
      number: 19,
      text: [
        "Have you considered incorporating the necessary strategies into the HVAC system design to ensure efficient control and operation of the units?",
      ],
      logo: smoke,
      heading: "Programmable thermostats and CO2 Sensors for HVAC system",
    },
    {
      number: 120,
      text: [
        "Have you considered ways to improve interior lighting levels while ensuring they do not exceed the limits",
      ],
      logo: lightbulb,
      heading: "Light Power Density - Interior",
    },
    {
      number: 12,
      text: [
        "Have you considered selecting internal lighting systems that offer flexible control options",
      ],
      logo: insight,
      heading:
        "Automated lighting control / motion sensor for internal lighting",
    },
    {
      number: 15,
      text: [
        "Have you confirmed that the exterior lighting levels have been improved and do not exceed the specified limits?",
      ],
      logo: ideaChange,
      heading: "Exterior Light Power Density",
    },
    {
      number: 16,
      text: [
        "Have you confirmed that the external lighting systems incorporate strategies to switch on/off based on specific needs or timings?",
      ],
      logo: lightBulbSetting,
      heading: "Control of External lights",
    },
    {
      number: 16,
      text: [
        "Has the feasibility of a solar thermal hot water system been assessed, and has the potential reduction in CO2 emissions been estimated?",
      ],
      logo: solar_panel,
      heading: "Renewable Power Source - Industrial hot water",
    },
    {
      number: 18,
      text: [
        "Have you considered conducting a feasibility study to explore the potential of generating renewable power on-site?",
      ],
      logo: solarpanel_1,
      heading: "Onsite Renewable Energy Generation",
    },
    {
      number: 20,
      text: [
        "Have you explored the possibility of incorporating daylighting technologies into the industrial design?",
      ],
      logo: lightSelling,
      heading: "General Plant Lighting - Use of Solar Daylighting Technologies",
    },
 
 <>
      {!surveyStarted ? (
        <>
          
        </>
      ) : (
        <DecarbonizationSurveyQsnAns></DecarbonizationSurveyQsnAns>
      )}
    </>
 

function DecarbonizationSurveyQsnAns() {
  return (
    <div>
      hello answer
    </div>
  )
}

export default DecarbonizationSurveyQsnAns

 

// function SurveyQuestionSection() {
//   return (
//     <Grid2 sx={{ display: "flex", flexDirection: "column", gap: "20px" }}>

//       {/* First Qu */}
//       <Grid2
//         sx={{
//           flexDirection: "column",
//           display: "flex",
//           border: "1px solid #E4E4E4",
//           borderRadius: "5px",
//           borderTop: "3px solid #369D9C", // Correct top border colo
//           borderBottom: "1px solid #E4E4E4",
//           borderLeft: "1px solid #E4E4E4",
//           borderRight: "1px solid #E4E4E4",
//           gap: "20px",
//         }}
//       >
//         <Paper
//           sx={{
//             //   padding: "15px 15px",
//             display: "flex",
//             flexDirection: "column",
//             gap: "15px",
//           }}
//         >
//           <Grid2
//             sx={{
//               display: "flex",
//               flexDirection: "row",
//               gap: "12px",
//               mt: "16px",
//               ml: "16px",
//             }}
//           >
//             <img src={ac_motors_logo} alt="ac-motors-logo" width="18px" />
//             <Typography fontSize="16px" fontWeight="600" color="#000">
//               Industrial AC Motors
//             </Typography>
//           </Grid2>
//           <Grid2
//             sx={{
//               display: "flex",
//               flexDirection: "row",
//               alignItems: "center", // Vertically center items
//               gap: "12px",
//               ml: "15px",
//             }}
//           >
//             <Box
//               sx={{
//                 width: "37px",
//                 height: "34px",
//                 backgroundColor: "#F7F7F7",
//                 padding: "7px 15px 15px 7px",
//                 borderRadius: "6px",
//                 display: "flex",
//                 alignItems: "center",
//                 justifyContent: "center", // Center text horizontally within the Box
//               }}
//             >
//               <Typography
//                 color="#5B5B5B"
//                 fontSize="14px"
//                 fontWeight="400"
//                 padding="15px 0px 7px 8px"
//               >
//                 Q.1
//               </Typography>
//             </Box>
//             <Typography fontSize="14px" fontWeight="500" color="#000">
//               Do you have all motors with efficiency classification IE3 & IE4?
//             </Typography>
//           </Grid2>
//           <Grid2 sx={{ borderTop: "1px solid #E4E4E4" }}>
//             <Button
//               sx={{
//                 background:
//                   "var(--grad-3, linear-gradient(102deg, #369D9C 0%, #28814D 100%))",
//                 color: "#ffffff",
//                 alignItems: "center",
//                 justifyContent: "center",
//                 padding: "6px 22px",
//                 borderRadius: "32px",
//                 mt: "10px",
//                 ml: "16px",
//                 mb: "12px",
//               }}
//             >
//               <Typography
//                 fontSize="14px"
//                 fontWeight="500"
//                 color="var(--White, #FFF)"
//                 textTransform="capitalize"
//               >
//                 Yes
//               </Typography>
//             </Button>
//             <Button
//               sx={{
//                 background: "var(--White, #FFF)",
//                 color: "#ffffff",
//                 alignItems: "center",
//                 justifyContent: "center",
//                 padding: "5px 21px",
//                 border: "1px solid var(--grad-3, #369D9C)",
//                 borderRadius: "32px",
//                 mt: "10px",
//                 ml: "16px",
//                 mb: "12px",
//               }}
//             >
//               <Typography
//                 fontSize="14px"
//                 fontWeight="500"
//                 color="#474747"
//                 textTransform="capitalize"
//               >
//                 No
//               </Typography>
//             </Button>
//             <Button
//               sx={{
//                 background: "var(--White, #FFF)",
//                 color: "#ffffff",
//                 alignItems: "center",
//                 justifyContent: "center",
//                 padding: "5px 21px",
//                 border: "1px solid var(--grad-3, #369D9C)",
//                 borderRadius: "32px",
//                 mt: "10px",
//                 ml: "16px",
//                 mb: "12px",
//               }}
//             >
//               <Typography
//                 fontSize="14px"
//                 fontWeight="500"
//                 color="#474747"
//                 textTransform="capitalize"
//               >
//                 N/A
//               </Typography>
//             </Button>
//           </Grid2>
//         </Paper>
//       </Grid2>

//       {/* 2nd qsn */}
//       <Grid2
//         sx={{
//           flexDirection: "column",
//           display: "flex",
//           border: "1px solid #E4E4E4",
//           borderRadius: "5px",
//           borderTop: "3px solid #369D9C", // Correct top border colo
//           borderBottom: "1px solid #E4E4E4",
//           borderLeft: "1px solid #E4E4E4",
//           borderRight: "1px solid #E4E4E4",
//           gap: "20px",
//         }}
//       >
//         <Paper
//           sx={{
//             //   padding: "15px 15px",
//             display: "flex",
//             flexDirection: "column",
//             gap: "15px",
//           }}
//         >
//           <Grid2
//             sx={{
//               display: "flex",
//               flexDirection: "row",
//               gap: "12px",
//               mt: "16px",
//               ml: "16px",
//             }}
//           >
//             <img src={ac_motors_logo} alt="ac-motors-logo" width="18px" />
//             <Typography fontSize="16px" fontWeight="600" color="#000">
//               Industrial AC Motors
//             </Typography>
//           </Grid2>
//           <Grid2
//             sx={{
//               display: "flex",
//               flexDirection: "row",
//               alignItems: "center", // Vertically center items
//               gap: "12px",
//               ml: "15px",
//             }}
//           >
//             <Box
//               sx={{
//                 width: "37px",
//                 height: "34px",
//                 backgroundColor: "#F7F7F7",
//                 padding: "7px 15px 15px 7px",
//                 borderRadius: "6px",
//                 display: "flex",
//                 alignItems: "center",
//                 justifyContent: "center", // Center text horizontally within the Box
//               }}
//             >
//               <Typography
//                 color="#5B5B5B"
//                 fontSize="14px"
//                 fontWeight="400"
//                 padding="15px 0px 7px 8px"
//               >
//                 Q.1
//               </Typography>
//             </Box>
//             <Typography fontSize="14px" fontWeight="500" color="#000">
//               Do you have all motors with efficiency classification IE3 & IE4?
//             </Typography>
//           </Grid2>
//           <Grid2 sx={{ borderTop: "1px solid #E4E4E4" }}>
//             <Button
//               sx={{
//                 background:
//                   "var(--grad-3, linear-gradient(102deg, #369D9C 0%, #28814D 100%))",
//                 color: "#ffffff",
//                 alignItems: "center",
//                 justifyContent: "center",
//                 padding: "6px 22px",
//                 borderRadius: "32px",
//                 mt: "10px",
//                 ml: "16px",
//                 mb: "12px",
//               }}
//             >
//               <Typography
//                 fontSize="14px"
//                 fontWeight="500"
//                 color="var(--White, #FFF)"
//                 textTransform="capitalize"
//               >
//                 Yes
//               </Typography>
//             </Button>
//             <Button
//               sx={{
//                 background: "var(--White, #FFF)",
//                 color: "#ffffff",
//                 alignItems: "center",
//                 justifyContent: "center",
//                 padding: "5px 21px",
//                 border: "1px solid var(--grad-3, #369D9C)",
//                 borderRadius: "32px",
//                 mt: "10px",
//                 ml: "16px",
//                 mb: "12px",
//               }}
//             >
//               <Typography
//                 fontSize="14px"
//                 fontWeight="500"
//                 color="#474747"
//                 textTransform="capitalize"
//               >
//                 No
//               </Typography>
//             </Button>
//             <Button
//               sx={{
//                 background: "var(--White, #FFF)",
//                 color: "#ffffff",
//                 alignItems: "center",
//                 justifyContent: "center",
//                 padding: "5px 21px",
//                 border: "1px solid var(--grad-3, #369D9C)",
//                 borderRadius: "32px",
//                 mt: "10px",
//                 ml: "16px",
//                 mb: "12px",
//               }}
//             >
//               <Typography
//                 fontSize="14px"
//                 fontWeight="500"
//                 color="#474747"
//                 textTransform="capitalize"
//               >
//                 N/A
//               </Typography>
//             </Button>
//           </Grid2>
//           <Grid2 sx={{ borderTop: "1px solid #E4E4E4", marginTop: "-16px" }}>
//             <Grid2
//               sx={{
//                 display: "flex",
//                 flexDirection: "row",
//                 alignItems: "center", // Vertically center items
//                 gap: "12px",
//                 ml: "15px",
//                 mt: "14px",
//                 mb: "14px",
//               }}
//             >
//               <Box
//                 sx={{
//                   width: "37px",
//                   height: "34px",
//                   backgroundColor: "#F7F7F7",
//                   padding: "7px 15px 15px 7px",
//                   borderRadius: "6px",
//                   display: "flex",
//                   alignItems: "center",
//                   justifyContent: "center", // Center text horizontally within the Box
//                 }}
//               >
//                 <Typography
//                   color="#5B5B5B"
//                   fontSize="14px"
//                   fontWeight="400"
//                   padding="15px 0px 7px 8px"
//                 >
//                   Q.2
//                 </Typography>
//               </Box>
//               <Typography fontSize="14px" fontWeight="500" color="#000">
//                 Do you have all motors with efficiency classification IE3 & IE4?
//               </Typography>
//             </Grid2>

//             <Grid2 sx={{ borderTop: "1px solid #E4E4E4" }}>
//               <Button
//                 sx={{
//                   background:
//                     "var(--grad-3, linear-gradient(102deg, #369D9C 0%, #28814D 100%))",
//                   color: "#ffffff",
//                   alignItems: "center",
//                   justifyContent: "center",
//                   padding: "6px 22px",
//                   borderRadius: "32px",
//                   mt: "10px",
//                   ml: "16px",
//                   mb: "12px",
//                 }}
//               >
//                 <Typography
//                   fontSize="14px"
//                   fontWeight="500"
//                   color="var(--White, #FFF)"
//                   textTransform="capitalize"
//                 >
//                   Yes
//                 </Typography>
//               </Button>
//               <Button
//                 sx={{
//                   background: "var(--White, #FFF)",
//                   color: "#ffffff",
//                   alignItems: "center",
//                   justifyContent: "center",
//                   padding: "5px 21px",
//                   border: "1px solid var(--grad-3, #369D9C)",
//                   borderRadius: "32px",
//                   mt: "10px",
//                   ml: "16px",
//                   mb: "12px",
//                 }}
//               >
//                 <Typography
//                   fontSize="14px"
//                   fontWeight="500"
//                   color="#474747"
//                   textTransform="capitalize"
//                 >
//                   No
//                 </Typography>
//               </Button>
//               <Button
//                 sx={{
//                   background: "var(--White, #FFF)",
//                   color: "#ffffff",
//                   alignItems: "center",
//                   justifyContent: "center",
//                   padding: "5px 21px",
//                   border: "1px solid var(--grad-3, #369D9C)",
//                   borderRadius: "32px",
//                   mt: "10px",
//                   ml: "16px",
//                   mb: "12px",
//                 }}
//               >
//                 <Typography
//                   fontSize="14px"
//                   fontWeight="500"
//                   color="#474747"
//                   textTransform="capitalize"
//                 >
//                   N/A
//                 </Typography>
//               </Button>
//             </Grid2>
//           </Grid2>
//         </Paper>
//       </Grid2>
//       {/* 2nd qsn compelete */}
//     </Grid2>
//   );
// }

// export default SurveyQuestionSection;

// const Question = ({ questionNumber, questionText, logo }) => {
//     return (
//       <Grid2
//         sx={{
//           flexDirection: "column",
//           display: "flex",
//           border: "1px solid #E4E4E4",
//           borderRadius: "5px",
//           borderTop: "3px solid #369D9C",
//           gap: "20px",
//         }}
//       >
//         <Paper
//           sx={{
//             display: "flex",
//             flexDirection: "column",
//             gap: "15px",
//           }}
//         >
//           <Grid2
//             sx={{
//               display: "flex",
//               flexDirection: "row",
//               gap: "12px",
//               mt: "16px",
//               ml: "16px",
//             }}
//           >
//             <img src={logo} alt="logo" width="18px" />
//             <Typography fontSize="16px" fontWeight="600" color="#000">
//               Industrial AC Motors
//             </Typography>
//           </Grid2>
//           <Grid2
//             sx={{
//               display: "flex",
//               flexDirection: "row",
//               alignItems: "center",
//               gap: "12px",
//               ml: "15px",
//             }}
//           >
//             <Box
//               sx={{
//                 width: "37px",
//                 height: "34px",
//                 backgroundColor: "#F7F7F7",
//                 padding: "7px 15px 15px 7px",
//                 borderRadius: "6px",
//                 display: "flex",
//                 alignItems: "center",
//                 justifyContent: "center",
//               }}
//             >
//               <Typography
//                 color="#5B5B5B"
//                 fontSize="14px"
//                 fontWeight="400"
//                 padding="15px 0px 7px 8px"
//               >
//                 Q.{questionNumber}
//               </Typography>
//             </Box>
//             <Typography fontSize="14px" fontWeight="500" color="#000">
//               {questionText}
//             </Typography>
//           </Grid2>
//           <Grid2 sx={{ borderTop: "1px solid #E4E4E4" }}>
//             <Button
//               sx={{
//                 background:
//                   "var(--grad-3, linear-gradient(102deg, #369D9C 0%, #28814D 100%))",
//                 color: "#ffffff",
//                 alignItems: "center",
//                 justifyContent: "center",
//                 padding: "6px 22px",
//                 borderRadius: "32px",
//                 mt: "10px",
//                 ml: "16px",
//                 mb: "12px",
//               }}
//             >
//               <Typography
//                 fontSize="14px"
//                 fontWeight="500"
//                 color="var(--White, #FFF)"
//                 textTransform="capitalize"
//               >
//                 Yes
//               </Typography>
//             </Button>
//             <Button
//               sx={{
//                 background: "var(--White, #FFF)",
//                 color: "#ffffff",
//                 alignItems: "center",
//                 justifyContent: "center",
//                 padding: "5px 21px",
//                 border: "1px solid var(--grad-3, #369D9C)",
//                 borderRadius: "32px",
//                 mt: "10px",
//                 ml: "16px",
//                 mb: "12px",
//               }}
//             >
//               <Typography
//                 fontSize="14px"
//                 fontWeight="500"
//                 color="#474747"
//                 textTransform="capitalize"
//               >
//                 No
//               </Typography>
//             </Button>
//             <Button
//               sx={{
//                 background: "var(--White, #FFF)",
//                 color: "#ffffff",
//                 alignItems: "center",
//                 justifyContent: "center",
//                 padding: "5px 21px",
//                 border: "1px solid var(--grad-3, #369D9C)",
//                 borderRadius: "32px",
//                 mt: "10px",
//                 ml: "16px",
//                 mb: "12px",
//               }}
//             >
//               <Typography
//                 fontSize="14px"
//                 fontWeight="500"
//                 color="#474747"
//                 textTransform="capitalize"
//               >
//                 N/A
//               </Typography>
//             </Button>
//           </Grid2>
//         </Paper>
//       </Grid2>
//     );
//   };

//   // Main Component
//   function SurveyQuestionSection() {
//     // Example questions array with logos
//     const questions = [
//       {
//         number: 1,
//         text: "Do you have all motors with efficiency classification IE3 & IE4?",
//         // logo: ac_motors_logo,
//       },
//       {
//         number: 2,
//         text: "Are your motors compliant with the latest energy regulations?",
//         // logo: another_logo,
//       },
//       {
//         number: 3,
//         text: "Do you have all motors with efficiency classification IE3 & IE4?",
//         // logo: ac_motors_logo,
//       },
//       {
//         number: 4,
//         text: "Are your motors compliant with the latest energy regulations?",
//         // logo: another_logo,
//       },
//       // Add more questions as needed
//     ];

//     return (
//       <Grid2 sx={{ display: "flex", flexDirection: "column", gap: "20px" }}>
//         {questions.map((q) => (
//           <Question
//             key={q.number}
//             questionNumber={q.number}
//             questionText={q.text}
//             logo={q.logo}
//           />
//         ))}
//       </Grid2>
//     );
//   }

//   export default SurveyQuestionSection;

// Question Component

// Question Component

// Question Component

 
 const [surveyStarted, setSurveyStarted] = useState(false);
  const [surveySubmitted, setSurveySubmitted] = useState(false); // New state to track survey submission

  const handleStartSurvey = () => {
    setSurveyStarted(true);
  };

  const handleSubmitSurvey = () => {
    setSurveySubmitted(true);
  };
 

import Grid from "@mui/material/Grid2";
 

      <Grid2 sx={{ display: "flex", flexDirection: "column", gap: "20px" }}>
        {questions.map((q) => (
          <Question
            key={q.number}
            questionNumber={q.number}
            questionText={q.text}
            logo={q.logo}
            heading={q.heading}
          />
        ))}
      </Grid2>
      <Grid2
        sx={{
          display: "flex",
          flexDirection: "row",
          justifyContent: "flex-end", // This aligns the button to the right
          mt:"45px"
        }}
      >
        <Button
          sx={{
            borderRadius: "32px",
            textTransform: "capitalize",
            justifyContent: "center",
            alignItems: "center",
            background:
              "var(--grad-3, linear-gradient(102deg, #369D9C 0%, #28814D 100%))",
            padding: "11px 40px",
          }}
        >
          <Typography color="#fff" fontSize="14px" fontWeight="600">Submit Survey</Typography>
        </Button>
      </Grid2>
 
      <Grid2 sx={{display:"flex", flexDirection:"row",}}>
        <Button
          sx={{
            borderRadius: "32px",
            textTransform: "capitalize",
            justifyContent:"center",
            alignItems:"center",
            background:" var(--grad-3, linear-gradient(102deg, #369D9C 0%, #28814D 100%))",
            padding:"11px 40px"
          }}
        >
        Submit Survey
        </Button>
      </Grid2>
 
left:"0"
 
 margin:"0"
 

            padding: "6px 22px",
 

          key={i}
 

            border: answer === "Yes" ? "none" : "1px solid #369D9C",
 

            color: answer === "Yes" ? "#FFF" : "#474747",
 

            background:
              answer === "Yes"
                ? "linear-gradient(102deg, #369D9C 0%, #28814D 100%)"
                : "#FFF",
 

          <Typography fontSize="14px" fontWeight="500">
            {answer}
          </Typography>
 
hello
 
Have you considered conducting a feasibility study to explore the potential of generating renewable power on-site?
 
Onsite Renewable Energy Generation
 
'../../../../assets/images/solar-panel-1.svg'
 
Has the feasibility of a solar thermal hot water system been assessed, and has the potential reduction in CO2 emissions been estimated?
 
Renewable Power Source - Industrial hot water
 
Have you confirmed that the external lighting systems incorporate strategies to switch on/off based on specific needs or timings?
 
Control of External lights
 
Have you confirmed that the exterior lighting levels have been improved and do not exceed the specified limits?
 
Exterior Light Power Density
 
Have you considered selecting internal lighting systems that offer flexible control options
 
Automated lighting control / motion sensor for internal lighting
 
Have you considered ways to improve interior lighting levels while ensuring they do not exceed the limits
 
Light Power Density - Interior
 
Have you considered incorporating the necessary strategies into the HVAC system design to ensure efficient control and operation of the units?
 
Programmable thermostats and CO2 Sensors for HVAC system
 
Have you confirmed that the energy-efficient cooling equipment to be procured and installed is consistent with the capacities specified in the "Optimal System Sizing - HVAC section?
 
Selection of Cooling Equipment with High Energy Efficiency Ratio (EER)
 
Have you considered incorporating design strategies to utilize Energy Recovery Units (ERUs) in the plant?
 
nstallation of Energy Recovery Units and regulated air intake system
 
Have you evaluated the potential impact of different HVAC systems on energy efficiency and operating costs to inform your selection?
 
Optimal System Sizing - HVAC
 
Envelope Tightness for Air-Conditioned Spaces - Thermal Imaging Technique
 
Has the industrial facility/warehouse been assessed for envelope airtightness, and have measures been taken to identify and address any defects or leakages?
 
Has interior thermal imaging been conducted for air-conditioned/climate-controlled spaces to identify potential building defects?
 

        'If leaks or gaps were identified, have appropriate corrective actions been taken to address them?',
        'Have the tests and reports been conducted in compliance with the specified conditions?'
 

import tightness from '../../../../assets/images/tightness.svg'
 
tightness
 

import tightness from '../../../../assets/images/tightness.svg'
 
Has the development team considered improving the energy efficiency of the buildings envelope?
 
Energy Conservation Techniques and Thermal Insulation (Applicable for both Air-conditioned and Non-Air-Conditioned buildings)
 
Has the development team considered improving the energy efficiency of the buildings envelope?
 
Has the design process considered identifying and evaluating potential waste heat recovery systems based on the waste heat generated during the process?',
        'Are all the sub-meters labeled for easy identification and tracking of energy consumption?
 
Process Energy Sub-Metering
 
Power Quality
 
Has the design process considered identifying and evaluating potential waste heat recovery systems based on the waste heat generated during the process?
 

import 
 
Has the electrical system been designed to incorporate control measures?
 
ehouse
 
Has the electrical system been designed to incorporate control measures
 
Has a high-efficiency condenser suitable for the plant been selected?
 
Refrigerated Storage Area
 
// Example heading
 
// Replace with your logo path
 
// Example heading
 
// Replace with your logo path
 
Chilled Water Distribution System
 
Has the insulation level of the chilled water distribution system been assessed to ensure it is sufficient to minimize energy loss?
 

        'Has the insulation level of the chilled water distribution system been assessed to ensure it is sufficient to minimize energy loss?',
 

        "Has the system been designed to minimize pumping losses by reducing or eliminating bypass/re-circulation?",
 
Have you considered selecting an energy-efficient chiller for all the plant?
 
Industrial Chiller System
 
boiler
 
Have you assessed the insulation level of the steam distribution system to ensure it is sufficient to minimize heat loss to the environment?
 
Steam Distribution System
 
Has a high-efficiency boiler been selected for all the plant process?
 
Industrial Boilers
 

        'Is are all the boiler equipped with a smart control system to optimize operational efficiency?',
 
,
 
Does the fan comply with a Fan Efficiency Grade (FEG) of 85% or higher?
 
Have you involved a specialist in the selection of the fan sizing?
 
Compressed Air System
 
Industrial Process Fans
 
Are bypass valves and valve throttling being eliminated in all retrofitting projects?
 
Have you involved a specialist in the selection of the pump sizing?
 
Energy Compliance
 
Do you provide certification for motor compliance?
 
Are your motors compliant with the latest energy regulations?
 
path/to/logo.png
 

import React from 'react';
import { Typography, Paper, Box, Button } from '@mui/material';
import Grid2 from '@mui/material/Unstable_Grid2';
 

const Question = ({ questionNumber, questionText, logo, heading }) => {
  return (
    <Grid2
      sx={{
        flexDirection: 'column',
        display: 'flex',
        border: '1px solid #E4E4E4',
        borderRadius: '5px',
        borderTop: '3px solid #369D9C',
        gap: '20px',
      }}
    >
      <Paper
        sx={{
          display: 'flex',
          flexDirection: 'column',
          gap: '15px',
        }}
      >
        {/* Heading Section */}
        <Grid2
          sx={{
            display: 'flex',
            flexDirection: 'row',
            gap: '12px',
            mt: '16px',
            ml: '16px',
            alignItems: 'center',
          }}
        >
          {logo && <img src={logo} alt="logo" width="18px" />}
          <Typography fontSize="16px" fontWeight="600" color="#000">
            {heading}
          </Typography>
        </Grid2>

        {/* Questions and Buttons */}
        {questionText.map((q, index) => (
          <React.Fragment key={index}>
            {/* Question Text */}
            <Grid2
              sx={{
                display: 'flex',
                flexDirection: 'row',
                alignItems: 'center',
                gap: '12px',
                ml: '15px',
              }}
            >
              <Box
                sx={{
                  width: '37px',
                  height: '34px',
                  backgroundColor: '#F7F7F7',
                  padding: '7px',
                  borderRadius: '6px',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                }}
              >
                <Typography color="#5B5B5B" fontSize="14px" fontWeight="400">
                  Q.{questionNumber + (index > 0 ? `.${index + 1}` : '')}
                </Typography>
              </Box>
              <Typography fontSize="14px" fontWeight="500" color="#000">
                {q}
              </Typography>
            </Grid2>

            {/* Buttons */}
            <Grid2
              sx={{
                borderTop: '1px solid #E4E4E4',
                borderBottom: '1px solid #E4E4E4',
              }}
            >
              <Grid2
                sx={{
                  display: 'flex',
                  flexDirection: 'row',
                  gap: '8px',
                  mt: '10px',
                  ml: '16px',
                  mb: '12px',
                }}
              >
                {['Yes', 'No', 'N/A'].map((answer, i) => (
                  <Button
                    key={i}
                    sx={{
                      background:
                        answer === 'Yes'
                          ? 'linear-gradient(102deg, #369D9C 0%, #28814D 100%)'
                          : '#FFF',
                      color: answer === 'Yes' ? '#FFF' : '#474747',
                      border: answer === 'Yes' ? 'none' : '1px solid #369D9C',
                      padding: '6px 22px',
                      borderRadius: '32px',
                      textTransform: 'capitalize',
                    }}
                  >
                    <Typography fontSize="14px" fontWeight="500">
                      {answer}
                    </Typography>
                  </Button>
                ))}
              </Grid2>
            </Grid2>
          </React.Fragment>
        ))}
      </Paper>
    </Grid2>
  );
};

// Main Component
function SurveyQuestionSection() {
  // Example questions array with logos and headings
  const questions = [
    {
      number: 1,
      text: [
        'Do you have all motors with efficiency classification IE3 & IE4?',
      ],
      logo: ac_motors_logo, // Replace with your actual logo path
      heading: 'Industrial AC Motors', // Pass the heading here
    },
    {
      number: 2,
      text: [
        'Have you involved a specialist in the selection of the pump sizing?',
        'Are bypass valves and valve throttling being eliminated in all retrofitting projects?',
      ],
      logo: pump2, // Replace with your logo path
      heading: 'Energy Compliance', // Example heading
    },
    {
      number: 2,
      text: [
        'Are your motors compliant with the latest energy regulations?',
        'Do you provide certification for motor compliance?',
      ],
      logo: '', // Replace with your logo path
      heading: 'Energy Compliance', // Example heading
    },
  ];

  return (
    <Grid2 sx={{ display: 'flex', flexDirection: 'column', gap: '20px' }}>
      {questions.map((q) => (
        <Question
          key={q.number}
          questionNumber={q.number}
          questionText={q.text}
          logo={q.logo}
          heading={q.heading} // Pass the heading prop
        />
      ))}
    </Grid2>
  );
}

export default SurveyQuestionSection;
 
Do you provide certification for motor compliance?
 
Are your motors compliant with the latest energy regulations?
 

import pump2 from "../../../../assets/images/pump2.svg"
 

import React from 'react';
import { Typography, Paper, Box, Button } from '@mui/material'; // Import required components
import Grid2 from '@mui/material/Unstable_Grid2'; // Make sure this import is correct if using MUI
 

const Question = ({ questionNumber, questionText, logo }) => {
  return (
    <Grid2
      sx={{
        flexDirection: "column",
        display: "flex",
        border: "1px solid #E4E4E4",
        borderRadius: "5px",
        borderTop: "3px solid #369D9C",
        gap: "20px",
      }}
    >
      <Paper
        sx={{
          display: "flex",
          flexDirection: "column",
          gap: "15px",
        }}
      >
        {/* Heading Section */}
        <Grid2
          sx={{
            display: "flex",
            flexDirection: "row",
            gap: "12px",
            mt: "16px",
            ml: "16px",
          }}
        >
          <img src={logo} alt="logo" width="18px" />
          <Typography fontSize="16px" fontWeight="600" color="#000">
            Industrial AC Motors
          </Typography>
        </Grid2>

        {/* Questions and Buttons */}
        {questionText.map((q, index) => (
          <React.Fragment key={index}>
            {/* Question Text */}
            <Grid2
              sx={{
                display: "flex",
                flexDirection: "row",
                alignItems: "center",
                gap: "12px",
                ml: "15px",
              }}
            >
              <Box
                sx={{
                  width: "37px",
                  height: "34px",
                  backgroundColor: "#F7F7F7",
                  padding: "7px",
                  borderRadius: "6px",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                }}
              >
                <Typography color="#5B5B5B" fontSize="14px" fontWeight="400">
                  Q.{questionNumber + (index > 0 ? `.${index + 1}` : "")}
                </Typography>
              </Box>
              <Typography fontSize="14px" fontWeight="500" color="#000">
                {q}
              </Typography>
            </Grid2>

            {/* Buttons */}
            <Grid2
            sx={{ borderTop: "1px solid #E4E4E4", borderBottom:"1px solid #E4E4E4" }}
            >
              <Grid2
                sx={{
                  display: "flex",
                  flexDirection: "row",
                  gap: "8px",
                  mt: "10px",
                  ml: "16px",
                  mb: "12px",
                }}
              >
                {["Yes", "No", "N/A"].map((answer, i) => (
                  <Button
                    key={i}
                    sx={{
                      background:
                        answer === "Yes"
                          ? "linear-gradient(102deg, #369D9C 0%, #28814D 100%)"
                          : "#FFF",
                      color: answer === "Yes" ? "#FFF" : "#474747",
                      border: answer === "Yes" ? "none" : "1px solid #369D9C",
                      padding: "6px 22px",
                      borderRadius: "32px",
                      textTransform: "capitalize",
                    }}
                  >
                    <Typography fontSize="14px" fontWeight="500">
                      {answer}
                    </Typography>
                  </Button>
                ))}
              </Grid2>
            </Grid2>
          </React.Fragment>
        ))}
      </Paper>
    </Grid2>
  );
};

// Main Component
function SurveyQuestionSection() {
  // Example questions array with logos
  const questions = [
    {
      number: 1,
      text: [
        "Do you have all motors with efficiency classification IE3 & IE4?",
      ],
      logo: ac_motors_logo,
    },
    {
      number: 2,
      text: [
        "Are your motors compliant with the latest energy regulations?",
        "Do you provide certification for motor compliance?",
      ],
      logo: "", // Replace with your logo path
    },
    {
      number: 2,
      text: [
        "Are your motors compliant with the latest energy regulations?",
        "Do you provide certification for motor compliance?",
      ],
      logo: "", // Replace with your logo path
    },
  ];

  return (
    <Grid2 sx={{ display: "flex", flexDirection: "column", gap: "20px" }}>
      {questions.map((q) => (
        <Question
          key={q.number}
          questionNumber={q.number}
          questionText={q.text}
          logo={q.logo}
        />
      ))}
    </Grid2>
  );
}

export default SurveyQuestionSection;
 
{/* Updated to use the heading prop */}
 
Energy Compliance
 

const Question = ({ questionNumber, questionText, logo }) => {
  return (
    <Grid2
      sx={{
        flexDirection: "column",
        display: "flex",
        border: "1px solid #E4E4E4",
        borderRadius: "5px",
        borderTop: "3px solid #369D9C",
        gap: "20px",
      }}
    >
      <Paper
        sx={{
          display: "flex",
          flexDirection: "column",
          gap: "15px",
        }}
      >
        {/* Heading Section */}
        <Grid2
          sx={{
            display: "flex",
            flexDirection: "row",
            gap: "12px",
            mt: "16px",
            ml: "16px",
          }}
        >
          <img src={logo} alt="logo" width="18px" />
          <Typography fontSize="16px" fontWeight="600" color="#000">
            Industrial AC Motors
          </Typography>
        </Grid2>

        {/* Questions and Buttons */}
        {questionText.map((q, index) => (
          <React.Fragment key={index}>
            {/* Question Text */}
            <Grid2
              sx={{
                display: "flex",
                flexDirection: "row",
                alignItems: "center",
                gap: "12px",
                ml: "15px",
              }}
            >
              <Box
                sx={{
                  width: "37px",
                  height: "34px",
                  backgroundColor: "#F7F7F7",
                  padding: "7px",
                  borderRadius: "6px",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                }}
              >
                <Typography color="#5B5B5B" fontSize="14px" fontWeight="400">
                  Q.{questionNumber + (index > 0 ? `.${index + 1}` : "")}
                </Typography>
              </Box>
              <Typography fontSize="14px" fontWeight="500" color="#000">
                {q}
              </Typography>
            </Grid2>

            {/* Buttons */}
            <Grid2
            sx={{ borderTop: "1px solid #E4E4E4", borderBottom:"1px solid #E4E4E4" }}
            >
              <Grid2
                sx={{
                  display: "flex",
                  flexDirection: "row",
                  gap: "8px",
                  mt: "10px",
                  ml: "16px",
                  mb: "12px",
                }}
              >
                {["Yes", "No", "N/A"].map((answer, i) => (
                  <Button
                    key={i}
                    sx={{
                      background:
                        answer === "Yes"
                          ? "linear-gradient(102deg, #369D9C 0%, #28814D 100%)"
                          : "#FFF",
                      color: answer === "Yes" ? "#FFF" : "#474747",
                      border: answer === "Yes" ? "none" : "1px solid #369D9C",
                      padding: "6px 22px",
                      borderRadius: "32px",
                      textTransform: "capitalize",
                    }}
                  >
                    <Typography fontSize="14px" fontWeight="500">
                      {answer}
                    </Typography>
                  </Button>
                ))}
              </Grid2>
            </Grid2>
          </React.Fragment>
        ))}
      </Paper>
    </Grid2>
  );
};

// Main Component
function SurveyQuestionSection() {
  // Example questions array with logos
  const questions = [
    {
      number: 1,
      text: [
        "Do you have all motors with efficiency classification IE3 & IE4?",
      ],
      logo: ac_motors_logo,
    },
    {
      number: 2,
      text: [
        "Are your motors compliant with the latest energy regulations?",
        "Do you provide certification for motor compliance?",
      ],
      logo: "", // Replace with your logo path
    },
    {
      number: 2,
      text: [
        "Are your motors compliant with the latest energy regulations?",
        "Do you provide certification for motor compliance?",
      ],
      logo: "", // Replace with your logo path
    },
  ];

  return (
    <Grid2 sx={{ display: "flex", flexDirection: "column", gap: "20px" }}>
      {questions.map((q) => (
        <Question
          key={q.number}
          questionNumber={q.number}
          questionText={q.text}
          logo={q.logo}
        />
      ))}
    </Grid2>
  );
}

export default SurveyQuestionSection;
 
// Replace with your logo path
 
 {
      number: 1,
      text: [
        "Do you have all motors with efficiency classification IE3 & IE4?",
      ],
      logo: "", // Replace with your logo path
    },
 

              sx={{
                
              }}
 

                border: "1px solid gray",
 

                display: 'flex',
                flexDirection: 'row',
                gap: '8px',
                mt: '10px',
                ml: '16px',
                mb: '12px',
 

                border:"1px solid gray"
 


import React from 'react';
import { Box, Button, Paper, Typography } from '@mui/material';
import Grid2 from '@mui/material/Unstable_Grid2'; // Ensure the correct import path for Grid2
 


// Question Component
const Question = ({ questionNumber, questionText, logo }) => {
  return (
    <Grid2
      sx={{
        flexDirection: 'column',
        display: 'flex',
        border: '1px solid #E4E4E4',
        borderRadius: '5px',
        borderTop: '3px solid #369D9C',
        gap: '20px',
      }}
    >
      <Paper
        sx={{
          display: 'flex',
          flexDirection: 'column',
          gap: '15px',
        }}
      >
        <Grid2
          sx={{
            display: 'flex',
            flexDirection: 'row',
            gap: '12px',
            mt: '16px',
            ml: '16px',
          }}
        >
          <img src={logo} alt="logo" width="18px" />
          <Typography fontSize="16px" fontWeight="600" color="#000">
            Industrial AC Motors
          </Typography>
        </Grid2>

        {questionText.map((q, index) => (
          <Grid2
            key={index}
            sx={{
              display: 'flex',
              flexDirection: 'row',
              alignItems: 'center',
              gap: '12px',
              ml: '15px',
            }}
          >
            <Box
              sx={{
                width: '37px',
                height: '34px',
                backgroundColor: '#F7F7F7',
                padding: '7px',
                borderRadius: '6px',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
              }}
            >
              <Typography color="#5B5B5B" fontSize="14px" fontWeight="400">
                Q.{questionNumber + (index > 0 ? `.${index + 1}` : '')}
              </Typography>
            </Box>
            <Typography fontSize="14px" fontWeight="500" color="#000">
              {q}
            </Typography>
          </Grid2>
        ))}

        <Grid2 sx={{ borderTop: '1px solid #E4E4E4' }}>
          {['Yes', 'No', 'N/A'].map((answer, index) => (
            <Button
              key={index}
              sx={{
                background:
                  answer === 'Yes'
                    ? 'linear-gradient(102deg, #369D9C 0%, #28814D 100%)'
                    : '#FFF',
                color: answer === 'Yes' ? '#FFF' : '#474747',
                border: answer === 'Yes' ? 'none' : '1px solid #369D9C',
                padding: '6px 22px',
                borderRadius: '32px',
                mt: '10px',
                ml: index === 0 ? '16px' : '8px',
                mb: '12px',
                textTransform: 'capitalize',
              }}
            >
              <Typography fontSize="14px" fontWeight="500">
                {answer}
              </Typography>
            </Button>
          ))}
        </Grid2>
      </Paper>
    </Grid2>
  );
};

// Main Component
function SurveyQuestionSection() {
  // Example questions array with logos
  const questions = [
    {
      number: 1,
      text: ['Do you have all motors with efficiency classification IE3 & IE4?'],
      logo: '', // Replace with your logo path
    },
    {
      number: 2,
      text: [
        'Are your motors compliant with the latest energy regulations?',
        'Do you provide certification for motor compliance?',
      ],
      logo: '', // Replace with your logo path
    },
  ];

  return (
    <Grid2 sx={{ display: 'flex', flexDirection: 'column', gap: '20px' }}>
      {questions.map((q) => (
        <Question
          key={q.number}
          questionNumber={q.number}
          questionText={q.text}
          logo={q.logo}
        />
      ))}
    </Grid2>
  );
}

export default SurveyQuestionSection;

 

// Question Component
import React from 'react';
import { Box, Button, Paper, Typography } from '@mui/material'; // Assuming you're using MUI for components
import Grid2 from '@mui/material/Unstable_Grid2'; // Ensure the correct import path for Grid2
 
const Question = ({ questionNumber, questionText, logo }) => {
  return (
    <Grid2
      sx={{
        flexDirection: 'column',
        display: 'flex',
        border: '1px solid #E4E4E4',
        borderRadius: '5px',
        borderTop: '3px solid #369D9C',
        gap: '20px',
      }}
    >
      <Paper
        sx={{
          display: 'flex',
          flexDirection: 'column',
          gap: '15px',
        }}
      >
        <Grid2
          sx={{
            display: 'flex',
            flexDirection: 'row',
            gap: '12px',
            mt: '16px',
            ml: '16px',
          }}
        >
          <img src={logo} alt="logo" width="18px" />
          <Typography fontSize="16px" fontWeight="600" color="#000">
            Industrial AC Motors
          </Typography>
        </Grid2>
        <Grid2
          sx={{
            display: 'flex',
            flexDirection: 'row',
            alignItems: 'center',
            gap: '12px',
            ml: '15px',
          }}
        >
          <Box
            sx={{
              width: '37px',
              height: '34px',
              backgroundColor: '#F7F7F7',
              padding: '7px',
              borderRadius: '6px',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
            }}
          >
            <Typography color="#5B5B5B" fontSize="14px" fontWeight="400">
              Q.{questionNumber}
            </Typography>
          </Box>
          <Typography fontSize="14px" fontWeight="500" color="#000">
            {questionText}
          </Typography>
        </Grid2>
        <Grid2 sx={{ borderTop: '1px solid #E4E4E4' }}>
          {['Yes', 'No', 'N/A'].map((answer, index) => (
            <Button
              key={index}
              sx={{
                background:
                  answer === 'Yes'
                    ? 'linear-gradient(102deg, #369D9C 0%, #28814D 100%)'
                    : '#FFF',
                color: answer === 'Yes' ? '#FFF' : '#474747',
                border:
                  answer === 'Yes' ? 'none' : '1px solid #369D9C',
                padding: '6px 22px',
                borderRadius: '32px',
                mt: '10px',
                ml: index === 0 ? '16px' : '8px',
                mb: '12px',
                textTransform: 'capitalize',
              }}
            >
              <Typography fontSize="14px" fontWeight="500">
                {answer}
              </Typography>
            </Button>
          ))}
        </Grid2>
      </Paper>
    </Grid2>
  );
};

// Main Component
function SurveyQuestionSection() {
  // Example questions array with logos
  const questions = [
    {
      number: 1,
      text: 'Do you have all motors with efficiency classification IE3 & IE4?',
      logo: '', // Replace with your logo path
    },
    {
      number: 2,
      text: 'Are your motors compliant with the latest energy regulations?',
      logo: '', // Replace with your logo path
    },
  ];

  return (
    <Grid2 sx={{ display: 'flex', flexDirection: 'column', gap: '20px' }}>
      {questions.map((q) => (
        <Question
          key={q.number}
          questionNumber={q.number}
          questionText={q.text}
          logo={q.logo}
        />
      ))}
    </Grid2>
  );
}

export default SurveyQuestionSection;

 
{
      number: 3,
      text: 'Do you have all motors with efficiency classification IE3 & IE4?',
      logo: '', // Replace with your logo path
    },
    {
      number: 4,
      text: 'Are your motors compliant with the latest energy regulations?',
      logo: '', // Replace with your logo path
    },
 
  <Grid2 sx={{ borderTop: '1px solid #E4E4E4' }}>
          {['Yes', 'No', 'N/A'].map((answer, index) => (
            <Button
              key={index}
              sx={{
                background:
                  answer === 'Yes'
                    ? 'linear-gradient(102deg, #369D9C 0%, #28814D 100%)'
                    : '#FFF',
                color: answer === 'Yes' ? '#FFF' : '#474747',
                border:
                  answer === 'Yes' ? 'none' : '1px solid #369D9C',
                padding: '6px 22px',
                borderRadius: '32px',
                mt: '10px',
                ml: index === 0 ? '16px' : '8px',
                mb: '12px',
                textTransform: 'capitalize',
              }}
            >
              <Typography fontSize="14px" fontWeight="500">
                {answer}
              </Typography>
            </Button>
          ))}
        </Grid2>
 


import React from 'react';
import { Box, Button, Paper, Typography } from '@mui/material'; // Assuming you're using MUI for components
import Grid2 from '@mui/material/Unstable_Grid2'; // Ensure the correct import path for Grid2
 
const Question = ({ questionNumber, questionText, logo }) => {
    return (
      <Grid2
        sx={{
          flexDirection: "column",
          display: "flex",
          border: "1px solid #E4E4E4",
          borderRadius: "5px",
          borderTop: "3px solid #369D9C",
          gap: "20px",
        }}
      >
        <Paper
          sx={{
            display: "flex",
            flexDirection: "column",
            gap: "15px",
          }}
        >
          <Grid2
            sx={{
              display: "flex",
              flexDirection: "row",
              gap: "12px",
              mt: "16px",
              ml: "16px",
            }}
          >
            <img src={logo} alt="logo" width="18px" />
            <Typography fontSize="16px" fontWeight="600" color="#000">
              Industrial AC Motors
            </Typography>
          </Grid2>
          <Grid2
            sx={{
              display: "flex",
              flexDirection: "row",
              alignItems: "center",
              gap: "12px",
              ml: "15px",
            }}
          >
            <Box
              sx={{
                width: "37px",
                height: "34px",
                backgroundColor: "#F7F7F7",
                padding: "7px 15px 15px 7px",
                borderRadius: "6px",
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
              }}
            >
              <Typography
                color="#5B5B5B"
                fontSize="14px"
                fontWeight="400"
                padding="15px 0px 7px 8px"
              >
                Q.{questionNumber}
              </Typography>
            </Box>
            <Typography fontSize="14px" fontWeight="500" color="#000">
              {questionText}
            </Typography>
          </Grid2>
          <Grid2 sx={{ borderTop: "1px solid #E4E4E4" }}>
            <Button
              sx={{
                background:
                  "var(--grad-3, linear-gradient(102deg, #369D9C 0%, #28814D 100%))",
                color: "#ffffff",
                alignItems: "center",
                justifyContent: "center",
                padding: "6px 22px",
                borderRadius: "32px",
                mt: "10px",
                ml: "16px",
                mb: "12px",
              }}
            >
              <Typography
                fontSize="14px"
                fontWeight="500"
                color="var(--White, #FFF)"
                textTransform="capitalize"
              >
                Yes
              </Typography>
            </Button>
            <Button
              sx={{
                background: "var(--White, #FFF)",
                color: "#ffffff",
                alignItems: "center",
                justifyContent: "center",
                padding: "5px 21px",
                border: "1px solid var(--grad-3, #369D9C)",
                borderRadius: "32px",
                mt: "10px",
                ml: "16px",
                mb: "12px",
              }}
            >
              <Typography
                fontSize="14px"
                fontWeight="500"
                color="#474747"
                textTransform="capitalize"
              >
                No
              </Typography>
            </Button>
            <Button
              sx={{
                background: "var(--White, #FFF)",
                color: "#ffffff",
                alignItems: "center",
                justifyContent: "center",
                padding: "5px 21px",
                border: "1px solid var(--grad-3, #369D9C)",
                borderRadius: "32px",
                mt: "10px",
                ml: "16px",
                mb: "12px",
              }}
            >
              <Typography
                fontSize="14px"
                fontWeight="500"
                color="#474747"
                textTransform="capitalize"
              >
                N/A
              </Typography>
            </Button>
          </Grid2>
        </Paper>
      </Grid2>
    );
  };
  
  // Main Component
  function SurveyQuestionSection() {
    // Example questions array with logos
    const questions = [
      {
        number: 1,
        text: "Do you have all motors with efficiency classification IE3 & IE4?",
        // logo: ac_motors_logo, 
      },
      {
        number: 2,
        text: "Are your motors compliant with the latest energy regulations?",
        // logo: another_logo, 
      },
      {
        number: 3,
        text: "Do you have all motors with efficiency classification IE3 & IE4?",
        // logo: ac_motors_logo, 
      },
      {
        number: 4,
        text: "Are your motors compliant with the latest energy regulations?",
        // logo: another_logo,
      },
      // Add more questions as needed
    ];
  
    return (
      <Grid2 sx={{ display: "flex", flexDirection: "column", gap: "20px" }}>
        {questions.map((q) => (
          <Question
            key={q.number}
            questionNumber={q.number}
            questionText={q.text}
            logo={q.logo}
          />
        ))}
      </Grid2>
    );
  }
  
  export default SurveyQuestionSection;
 
 // Second logo
 
// First logo
 
/ Second logo
 
// First logo
 
const Question = ({ questionNumber, questionText }) => {
    return (
      <Grid2
        sx={{
          flexDirection: "column",
          display: "flex",
          border: "1px solid #E4E4E4",
          borderRadius: "5px",
          borderTop: "3px solid #369D9C",
          gap: "20px",
        }}
      >
        <Paper
          sx={{
            display: "flex",
            flexDirection: "column",
            gap: "15px",
          }}
        >
          <Grid2
            sx={{
              display: "flex",
              flexDirection: "row",
              gap: "12px",
              mt: "16px",
              ml: "16px",
            }}
          >
            <img src={ac_motors_logo} alt="ac-motors-logo" width="18px" />
            <Typography fontSize="16px" fontWeight="600" color="#000">
              Industrial AC Motors
            </Typography>
          </Grid2>
          <Grid2
            sx={{
              display: "flex",
              flexDirection: "row",
              alignItems: "center",
              gap: "12px",
              ml: "15px",
            }}
          >
            <Box
              sx={{
                width: "37px",
                height: "34px",
                backgroundColor: "#F7F7F7",
                padding: "7px 15px 15px 7px",
                borderRadius: "6px",
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
              }}
            >
              <Typography
                color="#5B5B5B"
                fontSize="14px"
                fontWeight="400"
                padding="15px 0px 7px 8px"
              >
                Q.{questionNumber}
              </Typography>
            </Box>
            <Typography fontSize="14px" fontWeight="500" color="#000">
              {questionText}
            </Typography>
          </Grid2>
          <Grid2 sx={{ borderTop: "1px solid #E4E4E4" }}>
            <Button
              sx={{
                background:
                  "var(--grad-3, linear-gradient(102deg, #369D9C 0%, #28814D 100%))",
                color: "#ffffff",
                alignItems: "center",
                justifyContent: "center",
                padding: "6px 22px",
                borderRadius: "32px",
                mt: "10px",
                ml: "16px",
                mb: "12px",
              }}
            >
              <Typography
                fontSize="14px"
                fontWeight="500"
                color="var(--White, #FFF)"
                textTransform="capitalize"
              >
                Yes
              </Typography>
            </Button>
            <Button
              sx={{
                background: "var(--White, #FFF)",
                color: "#ffffff",
                alignItems: "center",
                justifyContent: "center",
                padding: "5px 21px",
                border: "1px solid var(--grad-3, #369D9C)",
                borderRadius: "32px",
                mt: "10px",
                ml: "16px",
                mb: "12px",
              }}
            >
              <Typography
                fontSize="14px"
                fontWeight="500"
                color="#474747"
                textTransform="capitalize"
              >
                No
              </Typography>
            </Button>
            <Button
              sx={{
                background: "var(--White, #FFF)",
                color: "#ffffff",
                alignItems: "center",
                justifyContent: "center",
                padding: "5px 21px",
                border: "1px solid var(--grad-3, #369D9C)",
                borderRadius: "32px",
                mt: "10px",
                ml: "16px",
                mb: "12px",
              }}
            >
              <Typography
                fontSize="14px"
                fontWeight="500"
                color="#474747"
                textTransform="capitalize"
              >
                N/A
              </Typography>
            </Button>
          </Grid2>
        </Paper>
      </Grid2>
    );
  };
  
  // Main Component
  function SurveyQuestionSection() {
    // Example questions array
    const questions = [
      {
        number: 1,
        text: "Do you have all motors with efficiency classification IE3 & IE4?",
      },
      {
        number: 2,
        text: "Are your motors compliant with the latest energy regulations?",
      },
      {
        number: 1,
        text: "Do you have all motors with efficiency classification IE3 & IE4?",
      },
      {
        number: 2,
        text: "Are your motors compliant with the latest energy regulations?",
      },
      // Add more questions as needed
    ];
  
    return (
      <Grid2 sx={{ display: "flex", flexDirection: "column", gap: "20px" }}>
        {questions.map((q) => (
          <Question
            key={q.number}
            questionNumber={q.number}
            questionText={q.text}
          />
        ))}
      </Grid2>
    );
  }
  
  export default SurveyQuestionSection;
  
 

onClick={() => handleAnswer(1, 'Yes')}
 

const QuestionComponent = () => {
    // State to store answers
    const [answers, setAnswers] = useState({});
  
    // Handle button clicks to save responses
    const handleAnswer = (questionId, answer) => {
      // Update state with the answer
      setAnswers((prevAnswers) => ({
        ...prevAnswers,
        [questionId]: answer,
      }));
  
      // Log the answer to the console
      console.log(`Question ${questionId} answered: ${answer}`);
    };
  
    return (
      <Grid
        sx={{
          flexDirection: 'column',
          display: 'flex',
          border: '1px solid #E4E4E4',
          borderRadius: '5px',
          borderTop: '3px solid #369D9C',
          gap: '20px',
        }}
      >
        <Paper
          sx={{
            display: 'flex',
            flexDirection: 'column',
            gap: '15px',
          }}
        >
          {/* Question Section */}
          <Grid
            sx={{
              display: 'flex',
              flexDirection: 'row',
              gap: '12px',
              mt: '16px',
              ml: '16px',
            }}
          >
            <img src={ac_motors_logo} alt="ac-motors-logo" width="18px" />
            <Typography fontSize="16px" fontWeight="600" color="#000">
              Industrial AC Motors
            </Typography>
          </Grid>
          
          <Grid
            sx={{
              display: 'flex',
              flexDirection: 'row',
              alignItems: 'center',
              gap: '12px',
              ml: '15px',
            }}
          >
            <Box
              sx={{
                width: '37px',
                height: '34px',
                backgroundColor: '#F7F7F7',
                padding: '7px 15px 15px 7px',
                borderRadius: '6px',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
              }}
            >
              <Typography color="#5B5B5B" fontSize="14px" fontWeight="400">
                Q.1
              </Typography>
            </Box>
            <Typography fontSize="14px" fontWeight="500" color="#000">
              Do you have all motors with efficiency classification IE3 & IE4?
            </Typography>
          </Grid>
  
          {/* Answer Buttons */}
          <Grid sx={{ borderTop: '1px solid #E4E4E4' }}>
            <Button
              sx={{
                background:
                  'var(--grad-3, linear-gradient(102deg, #369D9C 0%, #28814D 100%))',
                color: '#ffffff',
                padding: '6px 22px',
                borderRadius: '32px',
                mt: '10px',
                ml: '16px',
                mb: '12px',
              }}
              onClick={() => handleAnswer(1, 'Yes')}
            >
              <Typography fontSize="14px" fontWeight="500" textTransform="capitalize">
                Yes
              </Typography>
            </Button>
            <Button
              sx={{
                background: 'var(--White, #FFF)',
                color: '#474747',
                padding: '5px 21px',
                border: '1px solid #369D9C',
                borderRadius: '32px',
                mt: '10px',
                ml: '16px',
                mb: '12px',
              }}
              onClick={() => handleAnswer(1, 'No')}
            >
              <Typography fontSize="14px" fontWeight="500" textTransform="capitalize">
                No
              </Typography>
            </Button>
            <Button
              sx={{
                background: 'var(--White, #FFF)',
                color: '#474747',
                padding: '5px 21px',
                border: '1px solid #369D9C',
                borderRadius: '32px',
                mt: '10px',
                ml: '16px',
                mb: '12px',
              }}
              onClick={() => handleAnswer(1, 'N/A')}
            >
              <Typography fontSize="14px" fontWeight="500" textTransform="capitalize">
                N/A
              </Typography>
            </Button>
          </Grid>
        </Paper>
      </Grid>
    );
  };
  
  export default QuestionComponent;
 

                mt:"10px"
 
 <Button
              sx={{
                background:
                  "var(--grad-3, linear-gradient(102deg, #369D9C 0%, #28814D 100%))",
                color: "#ffffff",
                alignItems: "center",
                justifyContent: "center",
                padding: "6px 22px",
                borderRadius: "32px",
                mt: "10px",
                ml: "16px",
                mb: "12px",
              }}
            >
              <Typography
                fontSize="14px"
                fontWeight="500"
                color="var(--White, #FFF)"
                textTransform="capitalize"
              >
                Yes
              </Typography>
            </Button>
            <Button
              sx={{
                background: "var(--White, #FFF)",
                color: "#ffffff",
                alignItems: "center",
                justifyContent: "center",
                padding: "5px 21px",
                border: "1px solid var(--grad-3, #369D9C)",
                borderRadius: "32px",
                mt: "10px",
                ml: "16px",
                mb: "12px",
              }}
            >
              <Typography
                fontSize="14px"
                fontWeight="500"
                color="#474747"
                textTransform="capitalize"
              >
                No
              </Typography>
            </Button>
            <Button
              sx={{
                background: "var(--White, #FFF)",
                color: "#ffffff",
                alignItems: "center",
                justifyContent: "center",
                padding: "5px 21px",
                border: "1px solid var(--grad-3, #369D9C)",
                borderRadius: "32px",
                mt: "10px",
                ml: "16px",
                mb: "12px",
              }}
            >
              <Typography
                fontSize="14px"
                fontWeight="500"
                color="#474747"
                textTransform="capitalize"
              >
                N/A
              </Typography>
            </Button>
 

        height:"200vh"
 
No
 
<Button
            sx={{
              background:
                "var(--grad-3, linear-gradient(102deg, #369D9C 0%, #28814D 100%))",
              color: "#ffffff",
              alignItems: "center",
              justifyContent: "center",
              padding: "6px 22px",
              borderRadius: "32px",
              mt: "10px",
              ml: "16px",
              mb: "12px",
            }}
          >
            <Typography
              fontSize="14px"
              fontWeight="500"
              color="var(--White, #FFF)"
              textTransform="capitalize"
            >
              Yes
            </Typography>
          </Button>
 
6
 
var(--White, #FFF)
 
var(--grad-3, linear-gradient(102deg, #369D9C 0%, #28814D 100%))
 
 <Button
            sx={{
              background: "var(--White, #FFF)",
              alignItems: "center",
              justifyContent: "center",
              padding: "6px 22px",
              borderRadius: "32px",
              border: "1px solid var(--grad-3, #369D9C)",
              mt: "10px",
              ml: "16px",
              mb: "12px",
            }}
          >
            <Typography
              fontSize="14px"
              fontWeight="500"
              color="#474747"
              textTransform="capitalize"
            >
              No
            </Typography>
          </Button>
          <Button
            sx={{
              background: "var(--White, #FFF)",
              alignItems: "center",
              justifyContent: "center",
              padding: "6px 22px",
              borderRadius: "32px",
              border: "1px solid var(--grad-3, #369D9C)",
              mt: "10px",
              ml: "16px",
              mb: "12px",
            }}
          >
            <Typography
              fontSize="14px"
              fontWeight="500"
              color="#474747"
              textTransform="capitalize"
            >
            N/A
            </Typography>
          </Button>
 

              No
 
 <Button
            sx={{
              background:
                "var(--grad-3, linear-gradient(102deg, #369D9C 0%, #28814D 100%))",
              color: "#ffffff",
              alignItems: "center",
              justifyContent: "center",
              padding: "6px 22px",
              borderRadius: "32px",
              mt: "10px",
              ml: "16px",
              mb: "12px",
            }}
          >
            <Typography
              fontSize="14px"
              fontWeight="500"
              color="var(--White, #FFF)"
              textTransform="capitalize"
            >
              N/A
            </Typography>
          </Button>
 
var(--White, #FFF)
 

              color: "#474747",
 
 background:
                "var(--grad-3, linear-gradient(102deg, #369D9C 0%, #28814D 100%))",
 

              Yes
 

              Yes
 
mt:"16px",
 
padding:"15px 15px"
 

            padding:"0px 0px 0px 15px"
 
0px 0px 0px 
 

        //   padding: "15px 15px",
 
10px 26px
 
Start Survey
 
  onClick={handleStartSurvey}
 
 <Grid2 sx={{ display: "flex", flexDirection: "row", gap: "12px", }}>
          <Box sx={{width:"37px", height:"34px", backgroundColor:"#F7F7F7", padding:"7px 15px 15px 7px", borderRadius:"6px"}}>
          <Typography color="#5B5B5B" fontSize="14px" fontWeight="400" sx={{backgroundColor:""}}>Q.1</Typography>
          </Box>
          <Typography fontSize="16px" fontWeight="500" color="#000">
          Do you have all motors with efficiency classification IE3 & IE4 ?
          </Typography>
        </Grid2>
 
 Industrial AC Motors
 
<img src={ac_motors_logo} alt="ac-motors-logo" />
 
<h2>Decarbonization Survey Question</h2>
 
 padding: "16px" // Optional padding for better spacing
 

        sx={{
          padding: "16px", // Optional padding for the Paper component
          textAlign: "center"
        }}
 
import { Grid2, Paper } from "@mui/material";
import React from "react";

function DecarbonizationSurveyQsn() {
  return (
    <div>
      <Grid2
        sx={{
          flexDirection: "column",
          display: "flex",
          border:"1px solid #E4E4E4",
          borderRadius:"5px",
          borderTop:"1 px solid #369D9C"
        }}
      >
        <Paper>
          <h2>Decarbonization Survey Question</h2>
        </Paper>
      </Grid2>
    </div>
  );
}

export default DecarbonizationSurveyQsn;

 

          padding: "8px 20px 8px 20px",
 
<Grid2 width="100%">
        <>hello2</>
    </Grid2>
 
import { Button, Grid2, Paper, Typography } from "@mui/material";
import customer_Logo from "../../../assets/images/CustomerSurveyLogo.svg";
import { useState } from "react";
import { Link } from "react-router-dom";
import DecarbonizationSurveyQsn from "./surveypages/DecarbonizationSurveyQsn";

function Survey() {
  // Yeh state survey ke start hone ko track karegi
  const [surveyStarted, setSurveyStarted] = useState(false);

  // Button click hone par survey start hoga
  const handleStartSurvey = () => {
    setSurveyStarted(true);
  };

  // Paper component ke liye styling
  const paperStyle = {
    height: "420px",
    backgroundColor: "#F6FFF9",
    maxWidth: "100%",
    width: "830px",
    borderRadius: "12.65px",
    display: "flex",
    textAlign: "center",
    border: "0.777px solid var(--G-2, #369D9C)",
    flexDirection: "column",
    gap: "20px",
    position: "relative",
    alignItems: "center",
    justifyContent: "center",
    marginTop: "35px",
  };

  return (
    <div>
      <Grid2 container justifyContent="center">
        <Paper style={paperStyle}>
          {/* Agar survey start nahi hua hai, to introduction dikhayenge */}
          {!surveyStarted ? (
            <>
              <Grid2
                sx={{
                  width: "190px",
                  height: "190px",
                  display: "flex",
                  flexDirection: "column",
                  gap: "5px",
                  alignItems: "center",
                  justifyContent: "center",
                  mb: "35px",
                }}
              >
                <img
                  src={customer_Logo}
                  alt="customer_logo"
                  height="200px"
                  width="200px"
                />
              </Grid2>
              <Grid2 sx={{ width: "100%", position: "absolute" }}>
                <Typography
                  variant="h1"
                  fontSize="18px"
                  fontWeight="600"
                  mt="110px"
                >
                  Benefits of the Decarbonization Survey
                </Typography>
              </Grid2>
              <Grid2 sx={{ width: "85%" }}>
                <Typography
                  variant="h1"
                  fontSize="10.5px"
                  fontWeight="400"
                  fontStyle="normal"
                  lineHeight="220%"
                  color="var(--Grey-1, #717171)"
                  mt="6px"
                >
                  Our Decarbonization Survey identifies high emission sources
                  and offers tailored reduction strategies. Improve your
                  environmental impact, enhance compliance, boost efficiency,
                  save costs, and strengthen your brand's sustainability and
                  reputation.
                </Typography>
                <Button
                  sx={{
                    background:
                      "var(--grad-3, linear-gradient(102deg, #369D9C 0%, #28814D 100%))",
                    color: "#ffffff",
                    alignItems: "center",
                    justifyContent: "center",
                    padding: "10px 26px",
                    borderRadius: "32px",
                    mt: "10px",
                  }}
                  onClick={handleStartSurvey} // Survey start karne ka function call karega
                >
                  <Typography fontSize="10px" textTransform="capitalize">
                    Start Survey
                  </Typography>
                </Button>
              </Grid2>
            </>
          ) : (
            <DecarbonizationSurveyQsn></DecarbonizationSurveyQsn>
          )}
        </Paper>
      </Grid2>
    </div>
  );
}

export default Survey;

 

      Yaa A
 
import { Button, Grid2, Paper, Typography } from "@mui/material";
import customer_Logo from "../../../assets/images/CustomerSurveyLogo.svg";
import { useState } from "react";
import { Link } from "react-router-dom";
import DecarbonizationSurveyQsn from "./surveypages/DecarbonizationSurveyQsn";

function Survey() {
  // Yeh state survey ke start hone ko track karegi
  const [surveyStarted, setSurveyStarted] = useState(false);

  // Button click hone par survey start hoga
  const handleStartSurvey = () => {
    setSurveyStarted(true);
  };

  // Paper component ke liye styling
  const paperStyle = {
    height: "420px",
    backgroundColor: "#F6FFF9",
    maxWidth: "100%",
    width: "830px",
    borderRadius: "12.65px",
    display: "flex",
    textAlign: "center",
    border: "0.777px solid var(--G-2, #369D9C)",
    flexDirection: "column",
    gap: "20px",
    position: "relative",
    alignItems: "center",
    justifyContent: "center",
    marginTop: "35px",
  };

  return (
    <div>
      <Grid2 container justifyContent="center">
        <Paper style={paperStyle}>
          {/* Agar survey start nahi hua hai, to introduction dikhayenge */}
          {!surveyStarted ? (
            <>
              <Grid2
                sx={{
                  width: "190px",
                  height: "190px",
                  display: "flex",
                  flexDirection: "column",
                  gap: "5px",
                  alignItems: "center",
                  justifyContent: "center",
                  mb: "35px",
                }}
              >
                <img
                  src={customer_Logo}
                  alt="customer_logo"
                  height="200px"
                  width="200px"
                />
              </Grid2>
              <Grid2 sx={{ width: "100%", position: "absolute" }}>
                <Typography
                  variant="h1"
                  fontSize="18px"
                  fontWeight="600"
                  mt="110px"
                >
                  Benefits of the Decarbonization Survey
                </Typography>
              </Grid2>
              <Grid2 sx={{ width: "85%" }}>
                <Typography
                  variant="h1"
                  fontSize="10.5px"
                  fontWeight="400"
                  fontStyle="normal"
                  lineHeight="220%"
                  color="var(--Grey-1, #717171)"
                  mt="6px"
                >
                  Our Decarbonization Survey identifies high emission sources
                  and offers tailored reduction strategies. Improve your
                  environmental impact, enhance compliance, boost efficiency,
                  save costs, and strengthen your brand's sustainability and
                  reputation.
                </Typography>
                <Button
                  sx={{
                    background:
                      "var(--grad-3, linear-gradient(102deg, #369D9C 0%, #28814D 100%))",
                    color: "#ffffff",
                    alignItems: "center",
                    justifyContent: "center",
                    padding: "10px 26px",
                    borderRadius: "32px",
                    mt: "10px",
                  }}
                  onClick={handleStartSurvey} // Survey start karne ka function call karega
                >
                  <Typography fontSize="10px" textTransform="capitalize">
                    Start Survey
                  </Typography>
                </Button>
              </Grid2>
            </>
          ) : (
            <DecarbonizationSurveyQsn></DecarbonizationSurveyQsn>
          )}
        </Paper>
      </Grid2>
    </div>
  );
}

export default Survey;

 

            // Survey start hone ke baad dikhane wala content
            <Typography variant="h4">Hello, Start Survey</Typography>
 
Bismillah
 

function Survey() {
  const [surveyStarted, setSurveyStarted] = useState(false);
  const handleStartSurvey = () => {
    setSurveyStarted(true);
  };
  const paperStyle = {
    height: "420px",
    backgroundColor: " #F6FFF9",
    maxWidth: "100%",
    width: "830px",
    borderRadius: "12.65px",
    display: "flex",
    textAlign: "center",
    border: "0.777px solid var(--G-2, #369D9C)",
    flexDirection: "column",
    gap: "20px",
    position: "relative",
    alignItems: "center",
    justifyContent: "center",
    gap: "10.21px",
    marginTop: "35px",
    position: "reletive",
  };

  return (
    <div>
      <Grid2 container justifyContent="center">
        <Paper style={paperStyle}>
          <Grid2
            sx={{
              width: "190px",
              height: "190px",
              display: "flex",
              flexDirection: "column",
              gap: "5px",
              alignItems: "center",
              justifyContent: "center",
              mb: "35px",
            }}
          >
            <img
              src={customer_Logo}
              alt="men_logo"
              height="200px"
              width="200px"
            ></img>
          </Grid2>
          <Grid2 sx={{ width: "100%", position: "absolute" }}>
            <Typography
              variant="h1"
              fontSize="18px"
              fontWeight="600"
              mt="110px"
            >
              Benefits of the Decarbonization Survey
            </Typography>
          </Grid2>

          <Grid2 sx={{ width: "85%" }}>
            <Typography
              variant="h1"
              fontSize="10.5px"
              fontWeight="400"
              fontStyle="normal"
              lineHeight="220%"
              color="var(--Grey-1, #717171)"
              mt="6px"
            >
              Our Decarbonization Survey identifies high emission sources and
              offers tailored reduction strategies. Improve your environmental
              impact, enhance compliance, boost efficiency, save costs, and
              strengthen your brand's sustainability and reputation.
            </Typography>
            <Link to="/survay-question">
              <Button
                sx={{
                  background:
                    "var(--grad-3, linear-gradient(102deg, #369D9C 0%, #28814D 100%))",
                  color: "#ffffff",
                  alignItems: "center",
                  justifyContent: "center",
                  padding: "10px 26px",
                  borderRadius: "32px",
                  mt: "10px",
                }}
              >
                <Typography fontSize="10px" textTransform="capitalize">
                  Start Survey
                </Typography>
              </Button>
            </Link>
          </Grid2>
        </Paper>
      </Grid2>
    </div>
  );
}

export default Survey;

 
linear-gradient(102deg, #369d9c 0%, #28814d 100%)
 

                display:"flex"
 
5
 

              position
 

              sx={{
                marginBottom:"25px"
              }}
 
Benefits of the Decarbonization Survey
 

    position: "relative",
    // alignItems: "center",/
    // justifyContent: "center",
 

    alignItems: "center",
    justifyContent: "center",
 

    // padding: "56px",
 
hello
 

    background:"#F6FFF9;",
 

    background: "#fff",
 

      </Wrapper>
 

      <Wrapper>
 

    // border: "1px solid var(--stroke-21, rgba(217, 217, 217, 0.4))",
 

            <div
              style={{
                width: "80%",
                height: "16vh",
                borderRadius: "50%",
                margin: "0 auto",
                position: "absolute",
                bottom: "-20px",
                left: "10%",
                background: "#598483",
                filter: "blur(20px)",
                opacity: 0.7,
                zIndex: -1,
              }}
            ></div>
 

            <Grid2
              container
              direction="column"
              alignItems="center"
              justifyContent="center"
              gap={2}
              style={{ marginTop: "12px" }}
            >
              {" "}
              <svg width="80" height="95" viewBox="0 0 113 113" fill="none">
                <circle
                  cx="56.5"
                  cy="56.5"
                  r="56"
                  fill="url(#paint0_linear_939_5057)"
                />
                <path
                  d="M34.0957 56.3002L49.0854 71.29L78.9071 41.4683"
                  stroke="white"
                  strokeWidth="8.83606"
                />
                <defs>
                  <linearGradient
                    id="paint0_linear_939_5057"
                    x1="0.5"
                    y1="0.5"
                    x2="130.171"
                    y2="27.4392"
                    gradientUnits="userSpaceOnUse"
                  >
                    <stop stopColor="#51ADAC" />
                    <stop offset="1" stopColor="#4FA874" />
                  </linearGradient>
                </defs>
              </svg>
              <Typography
                style={{
                  color: "#000000",
                  fontFamily: "Inter",
                  fontSize: "20px",
                  fontWeight: 500,
                  lineHeight: "36px",
                  textAlign: "center",
                  letterSpacing: "-0.02em",
                  whiteSpace: "nowrap",
                  overflow: "hidden",
                  textOverflow: "ellipsis",
                }}
              >
                Your account has been created successfully
              </Typography>
              <Link to="/generate-reports">
                <Button
                  sx={{
                    width: "210px",
                    borderRadius: "32px",
                    justifyContent: "center",
                    alignItems: "center",
                    fontWeight: "500",
                    fontSize: "22px",
                    color: "#51ADAC",
                    height: "48px",
                    textTransform: "capitalize",
                    lineHeight: "33px",
                    padding: "10px 20px 10px 20px", // Adjust padding if needed
                    border: "1px solid #369D9C",
                    marginTop: "8px",
                  }}
                >
                  Continue
                </Button>
              </Link>
            </Grid2>
 

            <Grid2 style={{ position: "absolute", top: "23px", right: "25px" }}>
              <Link to="/login">
                <svg width="30" height="30" viewBox="0 0 32 32" fill="none">
                  <g id="X">
                    <path
                      id="Vector"
                      d="M25.7081 24.2925C25.801 24.3854 25.8747 24.4957 25.9249 24.6171C25.9752 24.7385 26.0011 24.8686 26.0011 25C26.0011 25.1314 25.9752 25.2615 25.9249 25.3829C25.8747 25.5043 25.801 25.6146 25.7081 25.7075C25.6151 25.8004 25.5048 25.8741 25.3835 25.9244C25.2621 25.9747 25.132 26.0006 25.0006 26.0006C24.8692 26.0006 24.7391 25.9747 24.6177 25.9244C24.4963 25.8741 24.386 25.8004 24.2931 25.7075L16.0006 17.4138L7.70806 25.7075C7.52042 25.8951 7.26592 26.0006 7.00056 26.0006C6.73519 26.0006 6.4807 25.8951 6.29306 25.7075C6.10542 25.5199 6 25.2654 6 25C6 24.7346 6.10542 24.4801 6.29306 24.2925L14.5868 16L6.29306 7.70751C6.10542 7.51987 6 7.26537 6 7.00001C6 6.73464 6.10542 6.48015 6.29306 6.29251C6.4807 6.10487 6.73519 5.99945 7.00056 5.99945C7.26592 5.99945 7.52042 6.10487 7.70806 6.29251L16.0006 14.5863L24.2931 6.29251C24.4807 6.10487 24.7352 5.99945 25.0006 5.99945C25.2659 5.99945 25.5204 6.10487 25.7081 6.29251C25.8957 6.48015 26.0011 6.73464 26.0011 7.00001C26.0011 7.26537 25.8957 7.51987 25.7081 7.70751L17.4143 16L25.7081 24.2925Z"
                      fill="black"
                    />
                  </g>
                </svg>
              </Link>
            </Grid2>
 

import { Link } from "react-router-dom";
import Button from "@mui/material/Button";
 
 Typography
 
import Wrapper from "../Wrapper/Wrapper";
 
CreateAccountSuccessfully
 
className={paperStyle}
 

  const paperStyle = {
    width:"900px",
    height:"500px"
  };
 

    height: "485px",
    width: "480px",
    borderRadius: "20px",
    display: "flex",
    flexDirection: "column",
    padding: "38px 47px",
    gap: "26px",
    position: "relative", // Ensure the blur effect is correctly positioned
 

    // boxShadow: "0px 50px 50px -38px rgba(89, 132, 131, 0.65)",
 

    // border: "1px solid rgba(217, 217, 217, 0.4)",
 
 Typography 
 
 Button, 
 

      <Grid2></Grid2>
 
const Survey = () => {
  return <>Survey Page</>;
};

export default Survey;

 

        alert("File selected: " + file.name);
 

        <div>
 
</div>
 

      <div className="login-container-2">
   
       
      </div>
 
 <div
          style={{
            width: "80%",
            height: "16vh",
            borderRadius: "50%",
            margin: "0 auto",
            position: "absolute",
            bottom: "-10px", // Adjusted to be more visible
            left: "10%",
            background: "#598483",
            filter: "blur(10px)", // Adjusted blur to be less extreme
            opacity: 0.5, // Reduced opacity for better visibility
            zIndex: 0.9, // Changed to a positive value
          }}
        ></div>
 
<div className="login-container-2">
 

    backgroundColor: 'red', // Temporary color for testing
 

        <div
  style={{
    width: "80%",
    height: "16vh",
    borderRadius: "50%",
    margin: "0 auto",
    position: "absolute",
    bottom: "-10px", // Adjusted to be more visible
    left: "10%",
    background: "#598483",
    filter: "blur(10px)", // Adjusted blur to be less extreme
    opacity: 0.5, // Reduced opacity for better visibility
    zIndex: 0.9, // Changed to a positive value
  }}
></div>

 
 <div
            style={{
              width: "80%",
              height: "16vh",
              borderRadius: "50%",
              margin: "0 auto",
              position: "absolute",
              bottom: "-12px",
              left: "10%",
              background: "#598483",
              filter: "blur(15px)", 
              opacity: 0.8, 
              zIndex: -3,
            }}
          ></div>
 
.login-container-2 {
  position: relative;
  margin: 15vh auto;
  border: 1px solid var(--stroke-21, rgba(217, 217, 217, 0.4));
  background: #fff;
  /* box-shadow: 0px 40px 56px -50px rgba(89, 140, 135, 5); */
  width: 350px;
  padding: 35px;
  gap: 20px;
  display: flex;
  border-radius: 20px;
  flex-direction: column;
  height: auto;
  align-items: center;
  justify-content: center;
  text-align: center;
  overflow: hidden;
}
.login-container-2 div {
  display: flex;
  justify-content: center;
  flex-direction: column;
  gap: 22px;
}

.login-container-2 div h1 {
  font-size: 1.2rem;
  font-weight: 700;
  color: #00191d;
  text-align: center;
}

.login-container-2 div button {
  margin: 1.5vh 0;
  display: flex;
  padding: 1vh 2vw;
  justify-content: center;
  align-items: center;
  border-radius: 100px;
  background: var(--G-2, linear-gradient(102deg, #369d9c 0%, #28814d 100%));
  color: #ffffff;
  font-size: 1.1rem;
  height: 40px;
}

.input_login-2 {
  border-radius: 5px;
  background: #fff;
  height: 8vh;
}

.ge3s_logo-2 {
  width: 28%;
  margin: 0 auto;
}

.login-container-2 .password-container {
  position: relative;
  display: flex;
  align-items: center;
}

.login-container-2 .toggle-password {
  position: absolute;
  right: 10px;
  cursor: pointer;
}

.login-button-active {
  background: linear-gradient(102deg, #369d9c 0%, #28814d 100%);
  color: #ffffff;
  border: none;
  padding: 12px !important;
}

.login-button-disabled {
  background: linear-gradient(102deg, #e7e7e7 0%, #e7e7e7 100%) !important;
  color: #838383;
  cursor: not-allowed;
  border: none;
  padding: 12px !important;
}

.login-footer {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-top: 1.5vh;
}

.forgot-password {
  color: #3cb477 !important;
  cursor: pointer;
  font-size: 1rem;
  margin-top: 0;
}

 
 // Adjusted position to fit within the container
 
 // Adjusted zIndex to ensure proper layering
 
// Reduced opacity
 
// Reduced blur for a lighter effect
 

  box-shadow: "0px 50px 50px -38px rgba(89, 132, 131, 0.65)";
 

  border: "1px solid rgba(217, 217, 217, 0.4)";
 


.login-container-2::before {
  content: "";
  position: absolute;
  top: -25px;
  left: -25px;
  right: -25px;
  bottom: -25px;
  border-radius: 651px;
  background: #598483;
  opacity: 0.8;
  filter: blur(25px);
  z-index: -1;
}

 

    // boxShadow: "0px 50px 50px -38px rgba(89, 132, 131, 0.65)",
 

            <div
              style={{
                width: "80%",
                height: "16vh",
                borderRadius: "60%",
                margin: "0 auto",
                position: "absolute",
                bottom: "-20px",
                left: "10%",
                background: "#598483",
                filter: "blur(15px)", 
                opacity: 0.6, 
                zIndex: -3,
              }}
            ></div>
 
<div
          style={{
            width: "80%",
            height: "16vh",
            borderRadius: "50%",
            margin: "0 auto",
            position: "absolute",
            bottom: "-12px",
            left: "10%",
            background: "#598483",
            filter: "blur(20px)",
            opacity: 0.8,
            zIndex: 0,
          }}
        ></div>
 
.login-container-2 {
  position: relative;
  margin: 15vh auto;
  border: 1px solid var(--stroke-21, rgba(217, 217, 217, 0.4));
  background: #fff;
  box-shadow: 0px 40px 56px -50px rgba(89, 140, 135, 5);
  /* box-shadow: "0px 50px 50px -38px rgba(89, 132, 131, 0.65)"; */
  width: 350px;
  padding: 35px;
  gap: 20px;
  display: flex;
  border-radius: 20px;
  flex-direction: column;
  height: auto;
  align-items: center;
  justify-content: center;
  text-align: center;
  overflow: hidden;
}

.login-container-2::before {
  content: "";
  position: absolute;
  top: -25px;
  left: -25px;
  right: -25px;
  bottom: -25px;
  border-radius: 651px;
  background: #598483;
  opacity: 0.8;
  filter: blur(25px);
  z-index: -1;
}
 

.login-container-2::before {
  content: "";
  position: absolute;
  top: -25px;
  left: -25px;
  right: -25px;
  bottom: -25px;
  border-radius: 651px;
  background: #598483;
  opacity: 0.8;
  filter: blur(25px);
  z-index: -1;
}
 
// Further reduced opacity
 
// Reduced blur amount
 
 <div
            style={{
              width: "80%",
              height: "16vh",
              borderRadius: "50%",
              margin: "0 auto",
              position: "absolute",
              bottom: "-20px",
              left: "10%",
              background: "#598483",
              filter: "blur(20px)",
              opacity: 0.8,
              zIndex: -3,
            }}
          ></div>
 

            <div
              style={{
                width: "80%",
                height: "16vh",
                borderRadius: "50%",
                margin: "0 auto",
                position: "absolute",
                bottom: "-20px",
                left: "10%",
                background: "#598483",
                filter: "blur(20px)",
                opacity: 0.7,
                zIndex: -9,
              }}
            ></div>
 
.login-container-2 {
  position: relative;
  margin: 15vh auto;
  border: 1px solid var(--stroke-21, rgba(217, 217, 217, 0.4));
  background: #fff;
  box-shadow: 0px 40px 56px -38px rgba(89, 132, 131, 0.65);
  /* box-shadow: "0px 50px 50px -38px rgba(89, 132, 131, 0.65)"; */
  width: 350px;
  padding: 35px;
  gap: 20px;
  display: flex;
  border-radius: 20px;
  flex-direction: column;
  height: auto;
  align-items: center;
  justify-content: center;
  text-align: center;
  overflow: hidden;
}

.login-container-2::before {
  content: "";
  position: absolute;
  top: -25px;
  left: -25px;
  right: -25px;
  bottom: -25px;
  border-radius: 651px;
  background: #598483;
  opacity: 0.8;
  filter: blur(25px);
  z-index: -1;
}

 
.login-container-2 {
  position: relative;
  margin: 15vh auto;
  border: 1px solid var(--stroke-21, rgba(217, 217, 217, 0.4));
  background: #fff;
  box-shadow: 0px 40px 56px -38px rgba(89, 132, 131, 0.65);
  /* box-shadow: "0px 50px 50px -38px rgba(89, 132, 131, 0.65)"; */
  width: 350px;
  padding: 35px;
  gap: 20px;
  display: flex;
  border-radius: 20px;
  flex-direction: column;
  height: auto;
  align-items: center;
  justify-content: center;
  text-align: center;
  overflow: hidden;
}
 

.login-container-2::before {
  content: "";
  position: absolute;
  top: -25px;
  left: -25px;
  right: -25px;
  bottom: -25px;
  border-radius: 651px;
  background: #598483;
  opacity: 0.8;
  filter: blur(25px);
  z-index: -1;
}
 
absolute
 

  position: absolute;
 
.login-container-2 {
  position: relative;
  margin: 15vh auto;
  border: 1px solid var(--stroke-21, rgba(217, 217, 217, 0.4));
  background: #fff;
  /* box-shadow: "0px 50px 50px -38px rgba(89, 132, 131, 0.65)"; */
  width: 350px;
  padding: 35px;
  gap: 20px;
  display: flex;
  border-radius: 20px;
  flex-direction: column;
  height: auto;
  align-items: center;
  justify-content: center;
  text-align: center;
  overflow: hidden;
}

.login-container-2::before {
  content: "";
  position: absolute;
  top: -25px;
  left: -25px;
  right: -25px;
  bottom: -25px;
  border-radius: 651px;
  background: #598483;
  opacity: 0.3;
  filter: blur(25px);
  z-index: -1;
}
 

  posi
 

  box-shadow: 0px 50px 50px -38px rgba(89, 132, 131, 0.65);
 
.login-container-2 {
  position: relative;
  margin: 15vh auto;
  border: 1px solid var(--stroke-21, rgba(217, 217, 217, 0.4));
  background: #fff;
  box-shadow: 0px 50px 50px -38px rgba(89, 132, 131, 0.65);
  /* box-shadow: "0px 50px 50px -38px rgba(89, 132, 131, 0.65)"; */
  width: 350px;
  padding: 35px;
  gap: 20px;
  display: flex;
  border-radius: 20px;
  flex-direction: column;
  height: auto;
  align-items: center;
  justify-content: center;
  text-align: center;
  overflow: hidden;
}
 

            <div
              style={{
                width: "80%",
                height: "16vh",
                borderRadius: "50%",
                margin: "0 auto",
                position: "absolute",
                bottom: "-20px",
                left: "10%",
                background: "#598483",
                filter: "blur(20px)",
                opacity: 0.8,
                zIndex: -1,
              }}
            ></div>
 

  const paperStyle = {
    height: "210px",
    padding: "60px",
    background: "#fff",
    maxWidth: "100%",
    width: "350px",
    border: "1px solid var(--stroke-21, rgba(217, 217, 217, 0.4))",
    borderRadius: "16px",
    // boxShadow: "6px 89px 56px -38px rgba(89, 132, 131, 0.65)",
    boxShadow: "0px 50px 50px -38px rgba(89, 132, 131, 0.65)",
    display: "flex",
    textAlign: "center",
    flexDirection: "column",
    gap: "20px",
    position: "relative",
    alignItems: "center",
    justifyContent: "center",
  };
 
import Wrapper from "../Wrapper/Wrapper";
import { Grid2, Paper, Typography } from "@mui/material";
import { Link } from "react-router-dom";
import Button from "@mui/material/Button";
function CreateAccountSuccessfully() {
  const paperStyle = {
    height: "210px",
    padding: "60px",
    background: "#fff",
    maxWidth: "100%",
    width: "350px",
    border: "1px solid var(--stroke-21, rgba(217, 217, 217, 0.4))",
    borderRadius: "16px",
    // boxShadow: "6px 89px 56px -38px rgba(89, 132, 131, 0.65)",
    boxShadow: "0px 50px 50px -38px rgba(89, 132, 131, 0.65)",
    display: "flex",
    textAlign: "center",
    flexDirection: "column",
    gap: "20px",
    position: "relative",
    alignItems: "center",
    justifyContent: "center",
  };

  return (
    <div>
      <Wrapper>
        <Grid2 container justifyContent="center">
          <Paper style={paperStyle}>
            <Grid2 style={{ position: "absolute", top: "23px", right: "25px" }}>
              <Link to="/login">
                <svg width="30" height="30" viewBox="0 0 32 32" fill="none">
                  <g id="X">
                    <path
                      id="Vector"
                      d="M25.7081 24.2925C25.801 24.3854 25.8747 24.4957 25.9249 24.6171C25.9752 24.7385 26.0011 24.8686 26.0011 25C26.0011 25.1314 25.9752 25.2615 25.9249 25.3829C25.8747 25.5043 25.801 25.6146 25.7081 25.7075C25.6151 25.8004 25.5048 25.8741 25.3835 25.9244C25.2621 25.9747 25.132 26.0006 25.0006 26.0006C24.8692 26.0006 24.7391 25.9747 24.6177 25.9244C24.4963 25.8741 24.386 25.8004 24.2931 25.7075L16.0006 17.4138L7.70806 25.7075C7.52042 25.8951 7.26592 26.0006 7.00056 26.0006C6.73519 26.0006 6.4807 25.8951 6.29306 25.7075C6.10542 25.5199 6 25.2654 6 25C6 24.7346 6.10542 24.4801 6.29306 24.2925L14.5868 16L6.29306 7.70751C6.10542 7.51987 6 7.26537 6 7.00001C6 6.73464 6.10542 6.48015 6.29306 6.29251C6.4807 6.10487 6.73519 5.99945 7.00056 5.99945C7.26592 5.99945 7.52042 6.10487 7.70806 6.29251L16.0006 14.5863L24.2931 6.29251C24.4807 6.10487 24.7352 5.99945 25.0006 5.99945C25.2659 5.99945 25.5204 6.10487 25.7081 6.29251C25.8957 6.48015 26.0011 6.73464 26.0011 7.00001C26.0011 7.26537 25.8957 7.51987 25.7081 7.70751L17.4143 16L25.7081 24.2925Z"
                      fill="black"
                    />
                  </g>
                </svg>
              </Link>
            </Grid2>
            <Grid2
              container
              direction="column"
              alignItems="center"
              justifyContent="center"
              gap={2}
              style={{ marginTop: "12px" }}
            >
              {" "}
              <svg width="80" height="95" viewBox="0 0 113 113" fill="none">
                <circle
                  cx="56.5"
                  cy="56.5"
                  r="56"
                  fill="url(#paint0_linear_939_5057)"
                />
                <path
                  d="M34.0957 56.3002L49.0854 71.29L78.9071 41.4683"
                  stroke="white"
                  strokeWidth="8.83606"
                />
                <defs>
                  <linearGradient
                    id="paint0_linear_939_5057"
                    x1="0.5"
                    y1="0.5"
                    x2="130.171"
                    y2="27.4392"
                    gradientUnits="userSpaceOnUse"
                  >
                    <stop stopColor="#51ADAC" />
                    <stop offset="1" stopColor="#4FA874" />
                  </linearGradient>
                </defs>
              </svg>
              <Typography
                style={{
                  color: "#000000",
                  fontFamily: "Inter",
                  fontSize: "20px",
                  fontWeight: 500,
                  lineHeight: "36px",
                  textAlign: "center",
                  letterSpacing: "-0.02em",
                  whiteSpace: "nowrap",
                  overflow: "hidden",
                  textOverflow: "ellipsis",
                }}
              >
                Your account has been created successfully
              </Typography>
              <Link to="/generate-reports">
                <Button
                  sx={{
                    width: "210px",
                    borderRadius: "32px",
                    justifyContent: "center",
                    alignItems: "center",
                    fontWeight: "500",
                    fontSize: "22px",
                    color: "#51ADAC",
                    height: "48px",
                    textTransform: "capitalize",
                    lineHeight: "33px",
                    padding: "10px 20px 10px 20px", // Adjust padding if needed
                    border: "1px solid #369D9C",
                    marginTop: "8px",
                  }}
                >
                  Continue
                </Button>
              </Link>
            </Grid2>
            <div
              style={{
                width: "80%",
                height: "16vh",
                borderRadius: "50%",
                margin: "0 auto",
                position: "absolute",
                bottom: "-20px",
                left: "10%",
                background: "#598483",
                filter: "blur(20px)",
                opacity: 0.8,
                zIndex: -1,
              }}
            ></div>
          </Paper>
        </Grid2>
      </Wrapper>
    </div>
  );
}

export default CreateAccountSuccessfully;

 
// Add ellipsis if the text overflows
 
 // Hide overflow content
 
// Keep text on one line
 
// Adjust letter spacing as specified
 
// Center align the text
 
// Set line height as per Figma design
 
// Changed to match the Figma font weight
 
// Adjusted to match the Figma font size
 
// Set the font family to Inter
 
// Ensure the correct color value as per design
 
import React from "react";
import Wrapper from "../Wrapper/Wrapper";
import { Button, Grid2, Paper, Typography } from "@mui/material";
import logo from "../../assets/images/ge3s_logo.png";
import TextField from "@mui/material/TextField";
import Radio from "@mui/material/Radio";
import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { Visibility } from "@mui/icons-material";
import { VisibilityOff } from "@mui/icons-material";
import InputAdornment from "@mui/material/InputAdornment";
import IconButton from "@mui/material/IconButton";

function AccountCreationIntro() {
  const navigate = useNavigate();
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [isTermsAccepted, setIsTermsAccepted] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const handleClickShowPassword = () => setShowPassword(!showPassword);
  const handleClickShowConfirmPassword = () =>
    setShowConfirmPassword(!showConfirmPassword);
  const handleMouseDownPassword = (event) => event.preventDefault();
  const handleMouseDownConfirmPassword = (event) => event.preventDefault();
  const isFormValid = () => {
    return (
      email.trim() !== "" &&
      password.trim() !== "" &&
      confirmPassword.trim() !== "" &&
      password === confirmPassword &&
      isTermsAccepted
    );
  };
  const paperStyle = {
    height: "485px",
    width: "480px",
    border: "1px solid rgba(217, 217, 217, 0.4)",
    borderRadius: "20px",
    // boxShadow: "6px 89px 56px -38px rgba(89, 132, 131, 0.65)",
    boxShadow: "0px 50px 50px -38px rgba(89, 132, 131, 0.65)",
    display: "flex",
    flexDirection: "column",
    padding: "38px 47px",
    gap: "26px",
  };
  return (
    <div>
      <Wrapper>
        <Grid2>
          <Paper style={paperStyle}>
            <Grid2
              sx={{ display: "flex", flexDirection: "column", gap: "16px" }}
            >
              <Grid2 item>
                <img src={logo} height="57px" width="60px" alt="logo" />
              </Grid2>
              <Grid2 item>
                <Typography
                  variant="p"
                  fontSize="26px"
                  letterSpacing="-1"
                  width="416px"
                  fontWeight="600"
                  lineHeight="48px"
                >
                  Start creating your account
                </Typography>
              </Grid2>
            </Grid2>
            <Grid2
              sx={{ display: "flex", flexDirection: "column", gap: "4px" }}
            >
              <Typography
                variant="p"
                fontWeight="400"
                fontSize="14px"
                lineHeight="24px"
                color="#717171"
              >
                Verified Email Address
              </Typography>
              <TextField
                placeholder="email"
                size="small"
                required
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                padding="10px 16px 10px 16px"
                border="1px solid #D9D9D9"
                sx={{
                  height: "42px", // Adjust this value as needed
                }}
              ></TextField>
            </Grid2>
            <Grid2
              sx={{ display: "flex", flexDirection: "column", gap: "26px" }}
            >
              <TextField
                placeholder="Password"
                size="small"
                required
                name="password"
                type={showPassword ? "text" : "password"}
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                InputProps={{
                  endAdornment: (
                    <InputAdornment position="end">
                      <IconButton
                        aria-label="toggle password visibility"
                        onClick={handleClickShowPassword}
                        onMouseDown={handleMouseDownPassword}
                        edge="end"
                      >
                        {showPassword ? <VisibilityOff /> : <Visibility />}
                      </IconButton>
                    </InputAdornment>
                  ),
                }}
                sx={{
                  height: "42px", // Adjust this value as needed
                }}
              ></TextField>
              <TextField
                placeholder="Re-Password"
                size="small"
                name="re-password"
                required
                value={confirmPassword} // Fixed value here
                onChange={(e) => setConfirmPassword(e.target.value)}
                type={showConfirmPassword ? "text" : "password"}
                InputProps={{
                  endAdornment: (
                    <InputAdornment position="end">
                      <IconButton
                        aria-label="toggle password visibility"
                        onClick={handleClickShowConfirmPassword}
                        onMouseDown={handleMouseDownConfirmPassword}
                        edge="end"
                      >
                        {showConfirmPassword ? (
                          <VisibilityOff />
                        ) : (
                          <Visibility />
                        )}
                      </IconButton>
                    </InputAdornment>
                  ),
                }}
                sx={{
                  height: "42px",
                }}
              ></TextField>
            </Grid2>
            <Grid2
              sx={{
                display: "flex",
                flexDirection: "row",
                alignItems: "center",
                gap: "2px",
                marginTop: "-16px",
                marginLeft: "-10px",
              }}
            >
              <Radio
                value="agree"
                required
                name="terms-radio"
                checked={isTermsAccepted}
                onChange={(e) => setIsTermsAccepted(e.target.checked)}
                sx={{
                  color: "#3CB457",
                  "&.Mui-checked": {
                    color: "#4FA874",
                  },
                }}
              />
              <Typography variant="p" fontWeight="400" fontSize="18px">
                I agree to the{" "}
              </Typography>
              <Typography
                variant="p"
                fontWeight="500"
                fontSize="18px"
                color="#3CB457"
              >
                Terms and Conditions.
              </Typography>
            </Grid2>
            <Grid2>
              <Button
                onClick={() => navigate("/create-account-successfully")}
                disabled={!isFormValid()}
                sx={{
                  width: "100%",
                  fontSize: "16px",
                  borderRadius: "32px",
                  justifyContent: "center",
                  alignItems: "center",
                  fontWeight: "600",
                  lineHeight: "12px",
                  padding: "20px 62px 20px 62px",
                  backgroundColor: "#E7E7E7",
                  // color: "#838383",
                  height: "42px",
                  textTransform: "capitalize",
                  background: isFormValid()
                    ? "linear-gradient(102deg, #369d9c 0%, #28814d 100%)"
                    : "linear-gradient(102deg, #e7e7e7 0%, #e7e7e7 100%)",
                  color: isFormValid ? "#ffffff" : "#838383",
                  border: isFormValid
                    ? "1px solid rgba(217, 217, 217, 0.4)"
                    : "none",
                  cursor: isFormValid ? "pointer" : "not-allowed",
                  "&:hover": {
                    background: isFormValid
                      ? "linear-gradient(102deg, #28814d 0%, #369d9c 100%)"
                      : "linear-gradient(102deg, #e7e7e7 0%, #e7e7e7 100%)",
                  },
                }}
              >
                Create account
              </Button>
            </Grid2>
          </Paper>
        </Grid2>
      </Wrapper>
    </div>
  );
}

export default AccountCreationIntro;

 
import React from "react";
import Wrapper from "../Wrapper/Wrapper";
import { Button, Grid2, Paper, Typography } from "@mui/material";
import logo from "../../assets/images/ge3s_logo.png";
import TextField from "@mui/material/TextField";
import Radio from "@mui/material/Radio";
import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { Visibility } from "@mui/icons-material";
import { VisibilityOff } from "@mui/icons-material";
import InputAdornment from "@mui/material/InputAdornment";
import IconButton from "@mui/material/IconButton";

function AccountCreationIntro() {
  const navigate = useNavigate();
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [isTermsAccepted, setIsTermsAccepted] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const handleClickShowPassword = () => setShowPassword(!showPassword);
  const handleClickShowConfirmPassword = () =>
    setShowConfirmPassword(!showConfirmPassword);
  const handleMouseDownPassword = (event) => event.preventDefault();
  const handleMouseDownConfirmPassword = (event) => event.preventDefault();
  const isFormValid = () => {
    return (
      email.trim() !== "" &&
      password.trim() !== "" &&
      confirmPassword.trim() !== "" &&
      password === confirmPassword &&
      isTermsAccepted
    );
  };
  const paperStyle = {
    height: "485px",
    width: "480px",
    border: "1px solid rgba(217, 217, 217, 0.4)",
    borderRadius: "20px",
    // boxShadow: "6px 89px 56px -38px rgba(89, 132, 131, 0.65)",
    boxShadow: "0px 50px 50px -38px rgba(89, 132, 131, 0.65)",
    display: "flex",
    flexDirection: "column",
    padding: "38px 47px",
    gap: "26px",
  };
  return (
    <div>
      <Wrapper>
        <Grid2>
          <Paper style={paperStyle}>
            <Grid2
              sx={{ display: "flex", flexDirection: "column", gap: "16px" }}
            >
              <Grid2 item>
                <img src={logo} height="57px" width="60px" alt="logo" />
              </Grid2>
              <Grid2 item>
                <Typography
                  variant="p"
                  fontSize="26px"
                  letterSpacing="-1"
                  width="416px"
                  fontWeight="600"
                  lineHeight="48px"
                >
                  Start creating your account
                </Typography>
              </Grid2>
            </Grid2>
            <Grid2
              sx={{ display: "flex", flexDirection: "column", gap: "4px" }}
            >
              <Typography
                variant="p"
                fontWeight="400"
                fontSize="14px"
                lineHeight="24px"
                color="#717171"
              >
                Verified Email Address
              </Typography>
              <TextField
                placeholder="email"
                size="small"
                required
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                padding="10px 16px 10px 16px"
                border="1px solid #D9D9D9"
                sx={{
                  height: "42px", // Adjust this value as needed
                }}
              ></TextField>
            </Grid2>
            <Grid2
              sx={{ display: "flex", flexDirection: "column", gap: "26px" }}
            >
              <TextField
                placeholder="Password"
                size="small"
                required
                name="password"
                type={showPassword ? "text" : "password"}
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                InputProps={{
                  endAdornment: (
                    <InputAdornment position="end">
                      <IconButton
                        aria-label="toggle password visibility"
                        onClick={handleClickShowPassword}
                        onMouseDown={handleMouseDownPassword}
                        edge="end"
                      >
                        {showPassword ? <VisibilityOff /> : <Visibility />}
                      </IconButton>
                    </InputAdornment>
                  ),
                }}
                sx={{
                  height: "42px", // Adjust this value as needed
                }}
              ></TextField>
              <TextField
                placeholder="Re-Password"
                size="small"
                name="re-password"
                required
                value={confirmPassword} // Fixed value here
                onChange={(e) => setConfirmPassword(e.target.value)}
                type={showConfirmPassword ? "text" : "password"}
                InputProps={{
                  endAdornment: (
                    <InputAdornment position="end">
                      <IconButton
                        aria-label="toggle password visibility"
                        onClick={handleClickShowConfirmPassword}
                        onMouseDown={handleMouseDownConfirmPassword}
                        edge="end"
                      >
                        {showConfirmPassword ? (
                          <VisibilityOff />
                        ) : (
                          <Visibility />
                        )}
                      </IconButton>
                    </InputAdornment>
                  ),
                }}
                sx={{
                  height: "42px",
                }}
              ></TextField>
            </Grid2>
            <Grid2
              sx={{
                display: "flex",
                flexDirection: "row",
                alignItems: "center",
                gap: "2px",
                marginTop: "-16px",
                marginLeft: "-10px",
              }}
            >
              <Radio
                value="agree"
                required
                name="terms-radio"
                checked={isTermsAccepted}
                onChange={(e) => setIsTermsAccepted(e.target.checked)}
                sx={{
                  color: "#3CB457",
                  "&.Mui-checked": {
                    color: "#4FA874",
                  },
                }}
              />
              <Typography variant="p" fontWeight="400" fontSize="18px">
                I agree to the{" "}
              </Typography>
              <Typography
                variant="p"
                fontWeight="500"
                fontSize="18px"
                color="#3CB457"
              >
                Terms and Conditions.
              </Typography>
            </Grid2>
            <Grid2>
              <Button
                onClick={() => navigate("/create-account-successfully")}
                disabled={!isFormValid()}
                sx={{
                  width: "100%",
                  fontSize: "16px",
                  borderRadius: "32px",
                  justifyContent: "center",
                  alignItems: "center",
                  fontWeight: "600",
                  lineHeight: "12px",
                  padding: "20px 62px 20px 62px",
                  backgroundColor: "#E7E7E7",
                  // color: "#838383",
                  height: "42px",
                  textTransform: "capitalize",
                  background: isFormValid()
                    ? "linear-gradient(102deg, #369d9c 0%, #28814d 100%)"
                    : "linear-gradient(102deg, #e7e7e7 0%, #e7e7e7 100%)",
                  color: isFormValid ? "#ffffff" : "#838383",
                  border: isFormValid
                    ? "1px solid rgba(217, 217, 217, 0.4)"
                    : "none",
                  cursor: isFormValid ? "pointer" : "not-allowed",
                  "&:hover": {
                    background: isFormValid
                      ? "linear-gradient(102deg, #28814d 0%, #369d9c 100%)"
                      : "linear-gradient(102deg, #e7e7e7 0%, #e7e7e7 100%)",
                  },
                }}
              >
                Create account
              </Button>
            </Grid2>
          </Paper>
        </Grid2>
      </Wrapper>
    </div>
  );
}

export default AccountCreationIntro;

 
import Wrapper from "../Wrapper/Wrapper";
import { Grid2, Paper, Typography } from "@mui/material";
import { Link } from "react-router-dom";
import Button from "@mui/material/Button";
function CreateAccountSuccessfully() {
  const paperStyle = {
    height: "210px",
    padding: "60px",
    background: "#fff",
    maxWidth: "100%",
    width: "350px",
   border: "1px solid rgba(217, 217, 217, 0.4)",
    borderRadius: "16px",
    // boxShadow: "6px 89px 56px -38px rgba(89, 132, 131, 0.65)",
    boxShadow: "0px 50px 50px -38px rgba(89, 132, 131, 0.65)",
    display: "flex",
    textAlign: "center",
    flexDirection: "column",
    gap: "20px",
    position: "relative",
    alignItems: "center",
    justifyContent: "center",
  };

  return (
    <div>
      <Wrapper>
        <Grid2 container justifyContent="center">
          <Paper style={paperStyle}>
            <Grid2 style={{ position: "absolute", top: "23px", right: "25px" }}>
              <Link to="/login">
                <svg width="30" height="30" viewBox="0 0 32 32" fill="none">
                  <g id="X">
                    <path
                      id="Vector"
                      d="M25.7081 24.2925C25.801 24.3854 25.8747 24.4957 25.9249 24.6171C25.9752 24.7385 26.0011 24.8686 26.0011 25C26.0011 25.1314 25.9752 25.2615 25.9249 25.3829C25.8747 25.5043 25.801 25.6146 25.7081 25.7075C25.6151 25.8004 25.5048 25.8741 25.3835 25.9244C25.2621 25.9747 25.132 26.0006 25.0006 26.0006C24.8692 26.0006 24.7391 25.9747 24.6177 25.9244C24.4963 25.8741 24.386 25.8004 24.2931 25.7075L16.0006 17.4138L7.70806 25.7075C7.52042 25.8951 7.26592 26.0006 7.00056 26.0006C6.73519 26.0006 6.4807 25.8951 6.29306 25.7075C6.10542 25.5199 6 25.2654 6 25C6 24.7346 6.10542 24.4801 6.29306 24.2925L14.5868 16L6.29306 7.70751C6.10542 7.51987 6 7.26537 6 7.00001C6 6.73464 6.10542 6.48015 6.29306 6.29251C6.4807 6.10487 6.73519 5.99945 7.00056 5.99945C7.26592 5.99945 7.52042 6.10487 7.70806 6.29251L16.0006 14.5863L24.2931 6.29251C24.4807 6.10487 24.7352 5.99945 25.0006 5.99945C25.2659 5.99945 25.5204 6.10487 25.7081 6.29251C25.8957 6.48015 26.0011 6.73464 26.0011 7.00001C26.0011 7.26537 25.8957 7.51987 25.7081 7.70751L17.4143 16L25.7081 24.2925Z"
                      fill="black"
                    />
                  </g>
                </svg>
              </Link>
            </Grid2>
            <Grid2
              container
              direction="column"
              alignItems="center"
              justifyContent="center"
              gap={2}
              style={{ marginTop: "12px" }}
            >
              {" "}
              <svg width="80" height="95" viewBox="0 0 113 113" fill="none">
                <circle
                  cx="56.5"
                  cy="56.5"
                  r="56"
                  fill="url(#paint0_linear_939_5057)"
                />
                <path
                  d="M34.0957 56.3002L49.0854 71.29L78.9071 41.4683"
                  stroke="white"
                  strokeWidth="8.83606"
                />
                <defs>
                  <linearGradient
                    id="paint0_linear_939_5057"
                    x1="0.5"
                    y1="0.5"
                    x2="130.171"
                    y2="27.4392"
                    gradientUnits="userSpaceOnUse"
                  >
                    <stop stopColor="#51ADAC" />
                    <stop offset="1" stopColor="#4FA874" />
                  </linearGradient>
                </defs>
              </svg>
              <Typography
                style={{
                  color: "#000000", // Ensure the correct color value as per design
                  fontFamily: "Inter", // Set the font family to Inter
                  fontSize: "20px", // Adjusted to match the Figma font size
                  fontWeight: 500, // Changed to match the Figma font weight
                  lineHeight: "36px", // Set line height as per Figma design
                  textAlign: "center", // Center align the text
                  letterSpacing: "-0.02em", // Adjust letter spacing as specified
                  whiteSpace: "nowrap", // Keep text on one line
                  overflow: "hidden", // Hide overflow content
                  textOverflow: "ellipsis", // Add ellipsis if the text overflows
                }}
              >
                Your account has been created successfully
              </Typography>
              <Link to="/generate-reports">
                <Button
                  sx={{
                    width: "210px",
                    borderRadius: "32px",
                    justifyContent: "center",
                    alignItems: "center",
                    fontWeight: "500",
                    fontSize: "22px",
                    color: "#51ADAC",
                    height: "48px",
                    textTransform: "capitalize",
                    lineHeight: "33px",
                    padding: "10px 20px 10px 20px", // Adjust padding if needed
                    border: "1px solid #369D9C",
                    marginTop: "8px",
                  }}
                >
                  Continue
                </Button>
              </Link>
            </Grid2>
            <div
            style={{
              width: "80%",
              height: "16vh",
              borderRadius: "50%",
              margin: "0 auto",
              position: "absolute",
              bottom: "-20px",
              left: "10%",
              background: "#598483",
              filter: "blur(20px)",
              opacity: 0.8,
              zIndex: -1,
            }}
          ></div>
          </Paper>
        </Grid2>
      </Wrapper>
    </div>
  );
}

export default CreateAccountSuccessfully;

 
import Wrapper from "../Wrapper/Wrapper";
import { Grid2, Paper, Typography } from "@mui/material";
import { Link } from "react-router-dom";
import Button from "@mui/material/Button";
function CreateAccountSuccessfully() {
  const paperStyle = {
    height: "210px",
    padding: "60px",
    background: "#fff",
    maxWidth: "100%",
    width: "350px",
   border: "1px solid rgba(217, 217, 217, 0.4)",
    borderRadius: "16px",
    // boxShadow: "6px 89px 56px -38px rgba(89, 132, 131, 0.65)",
    boxShadow: "0px 50px 50px -38px rgba(89, 132, 131, 0.65)",
    display: "flex",
    textAlign: "center",
    flexDirection: "column",
    gap: "20px",
    position: "relative",
    alignItems: "center",
    justifyContent: "center",
  };

  return (
    <div>
      <Wrapper>
        <Grid2 container justifyContent="center">
          <Paper style={paperStyle}>
            <Grid2 style={{ position: "absolute", top: "23px", right: "25px" }}>
              <Link to="/login">
                <svg width="30" height="30" viewBox="0 0 32 32" fill="none">
                  <g id="X">
                    <path
                      id="Vector"
                      d="M25.7081 24.2925C25.801 24.3854 25.8747 24.4957 25.9249 24.6171C25.9752 24.7385 26.0011 24.8686 26.0011 25C26.0011 25.1314 25.9752 25.2615 25.9249 25.3829C25.8747 25.5043 25.801 25.6146 25.7081 25.7075C25.6151 25.8004 25.5048 25.8741 25.3835 25.9244C25.2621 25.9747 25.132 26.0006 25.0006 26.0006C24.8692 26.0006 24.7391 25.9747 24.6177 25.9244C24.4963 25.8741 24.386 25.8004 24.2931 25.7075L16.0006 17.4138L7.70806 25.7075C7.52042 25.8951 7.26592 26.0006 7.00056 26.0006C6.73519 26.0006 6.4807 25.8951 6.29306 25.7075C6.10542 25.5199 6 25.2654 6 25C6 24.7346 6.10542 24.4801 6.29306 24.2925L14.5868 16L6.29306 7.70751C6.10542 7.51987 6 7.26537 6 7.00001C6 6.73464 6.10542 6.48015 6.29306 6.29251C6.4807 6.10487 6.73519 5.99945 7.00056 5.99945C7.26592 5.99945 7.52042 6.10487 7.70806 6.29251L16.0006 14.5863L24.2931 6.29251C24.4807 6.10487 24.7352 5.99945 25.0006 5.99945C25.2659 5.99945 25.5204 6.10487 25.7081 6.29251C25.8957 6.48015 26.0011 6.73464 26.0011 7.00001C26.0011 7.26537 25.8957 7.51987 25.7081 7.70751L17.4143 16L25.7081 24.2925Z"
                      fill="black"
                    />
                  </g>
                </svg>
              </Link>
            </Grid2>
            <Grid2
              container
              direction="column"
              alignItems="center"
              justifyContent="center"
              gap={2}
              style={{ marginTop: "12px" }}
            >
              {" "}
              <svg width="80" height="95" viewBox="0 0 113 113" fill="none">
                <circle
                  cx="56.5"
                  cy="56.5"
                  r="56"
                  fill="url(#paint0_linear_939_5057)"
                />
                <path
                  d="M34.0957 56.3002L49.0854 71.29L78.9071 41.4683"
                  stroke="white"
                  strokeWidth="8.83606"
                />
                <defs>
                  <linearGradient
                    id="paint0_linear_939_5057"
                    x1="0.5"
                    y1="0.5"
                    x2="130.171"
                    y2="27.4392"
                    gradientUnits="userSpaceOnUse"
                  >
                    <stop stopColor="#51ADAC" />
                    <stop offset="1" stopColor="#4FA874" />
                  </linearGradient>
                </defs>
              </svg>
              <Typography
                style={{
                  color: "#000000", // Ensure the correct color value as per design
                  fontFamily: "Inter", // Set the font family to Inter
                  fontSize: "20px", // Adjusted to match the Figma font size
                  fontWeight: 500, // Changed to match the Figma font weight
                  lineHeight: "36px", // Set line height as per Figma design
                  textAlign: "center", // Center align the text
                  letterSpacing: "-0.02em", // Adjust letter spacing as specified
                  whiteSpace: "nowrap", // Keep text on one line
                  overflow: "hidden", // Hide overflow content
                  textOverflow: "ellipsis", // Add ellipsis if the text overflows
                }}
              >
                Your account has been created successfully
              </Typography>
              <Link to="/generate-reports">
                <Button
                  sx={{
                    width: "210px",
                    borderRadius: "32px",
                    justifyContent: "center",
                    alignItems: "center",
                    fontWeight: "500",
                    fontSize: "22px",
                    color: "#51ADAC",
                    height: "48px",
                    textTransform: "capitalize",
                    lineHeight: "33px",
                    padding: "10px 20px 10px 20px", // Adjust padding if needed
                    border: "1px solid #369D9C",
                    marginTop: "8px",
                  }}
                >
                  Continue
                </Button>
              </Link>
            </Grid2>
            <div
            style={{
              width: "80%",
              height: "16vh",
              borderRadius: "50%",
              margin: "0 auto",
              position: "absolute",
              bottom: "-20px",
              left: "10%",
              background: "#598483",
              filter: "blur(20px)",
              opacity: 0.8,
              zIndex: -1,
            }}
          ></div>
          </Paper>
        </Grid2>
      </Wrapper>
    </div>
  );
}

export default CreateAccountSuccessfully;

 
 border: "1px solid var(--stroke-21, rgba(217, 217, 217, 0.4))",
 
import React from "react";
import Wrapper from "../Wrapper/Wrapper";
import { Button, Grid2, Paper, Typography } from "@mui/material";
import logo from "../../assets/images/ge3s_logo.png";
import TextField from "@mui/material/TextField";
import Radio from "@mui/material/Radio";
import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { Visibility } from "@mui/icons-material";
import { VisibilityOff } from "@mui/icons-material";
import InputAdornment from "@mui/material/InputAdornment";
import IconButton from "@mui/material/IconButton";

function AccountCreationIntro() {
  const navigate = useNavigate();
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [isTermsAccepted, setIsTermsAccepted] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const handleClickShowPassword = () => setShowPassword(!showPassword);
  const handleClickShowConfirmPassword = () =>
    setShowConfirmPassword(!showConfirmPassword);
  const handleMouseDownPassword = (event) => event.preventDefault();
  const handleMouseDownConfirmPassword = (event) => event.preventDefault();
  const isFormValid = () => {
    return (
      email.trim() !== "" &&
      password.trim() !== "" &&
      confirmPassword.trim() !== "" &&
      password === confirmPassword &&
      isTermsAccepted
    );
  };
  const paperStyle = {
    height: "485px",
    width: "480px",
    border: "1px solid rgba(217, 217, 217, 0.4)",
    borderRadius: "20px",
    // boxShadow: "6px 89px 56px -38px rgba(89, 132, 131, 0.65)",
    boxShadow: "0px 50px 50px -38px rgba(89, 132, 131, 0.65)",
    display: "flex",
    flexDirection: "column",
    padding: "38px 47px",
    gap: "26px",
  };
  return (
    <div>
      <Wrapper>
        <Grid2>
          <Paper style={paperStyle}>
            <Grid2
              sx={{ display: "flex", flexDirection: "column", gap: "16px" }}
            >
              <Grid2 item>
                <img src={logo} height="57px" width="60px" alt="logo" />
              </Grid2>
              <Grid2 item>
                <Typography
                  variant="p"
                  fontSize="26px"
                  letterSpacing="-1"
                  width="416px"
                  fontWeight="600"
                  lineHeight="48px"
                >
                  Start creating your account
                </Typography>
              </Grid2>
            </Grid2>
            <Grid2
              sx={{ display: "flex", flexDirection: "column", gap: "4px" }}
            >
              <Typography
                variant="p"
                fontWeight="400"
                fontSize="14px"
                lineHeight="24px"
                color="#717171"
              >
                Verified Email Address
              </Typography>
              <TextField
                placeholder="email"
                size="small"
                required
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                padding="10px 16px 10px 16px"
                border="1px solid #D9D9D9"
                sx={{
                  height: "42px", // Adjust this value as needed
                }}
              ></TextField>
            </Grid2>
            <Grid2
              sx={{ display: "flex", flexDirection: "column", gap: "26px" }}
            >
              <TextField
                placeholder="Password"
                size="small"
                required
                name="password"
                type={showPassword ? "text" : "password"}
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                InputProps={{
                  endAdornment: (
                    <InputAdornment position="end">
                      <IconButton
                        aria-label="toggle password visibility"
                        onClick={handleClickShowPassword}
                        onMouseDown={handleMouseDownPassword}
                        edge="end"
                      >
                        {showPassword ? <VisibilityOff /> : <Visibility />}
                      </IconButton>
                    </InputAdornment>
                  ),
                }}
                sx={{
                  height: "42px", // Adjust this value as needed
                }}
              ></TextField>
              <TextField
                placeholder="Re-Password"
                size="small"
                name="re-password"
                required
                value={confirmPassword} // Fixed value here
                onChange={(e) => setConfirmPassword(e.target.value)}
                type={showConfirmPassword ? "text" : "password"}
                InputProps={{
                  endAdornment: (
                    <InputAdornment position="end">
                      <IconButton
                        aria-label="toggle password visibility"
                        onClick={handleClickShowConfirmPassword}
                        onMouseDown={handleMouseDownConfirmPassword}
                        edge="end"
                      >
                        {showConfirmPassword ? (
                          <VisibilityOff />
                        ) : (
                          <Visibility />
                        )}
                      </IconButton>
                    </InputAdornment>
                  ),
                }}
                sx={{
                  height: "42px",
                }}
              ></TextField>
            </Grid2>
            <Grid2
              sx={{
                display: "flex",
                flexDirection: "row",
                alignItems: "center",
                gap: "2px",
                marginTop: "-16px",
                marginLeft: "-10px",
              }}
            >
              <Radio
                value="agree"
                required
                name="terms-radio"
                checked={isTermsAccepted}
                onChange={(e) => setIsTermsAccepted(e.target.checked)}
                sx={{
                  color: "#3CB457",
                  "&.Mui-checked": {
                    color: "#4FA874",
                  },
                }}
              />
              <Typography variant="p" fontWeight="400" fontSize="18px">
                I agree to the{" "}
              </Typography>
              <Typography
                variant="p"
                fontWeight="500"
                fontSize="18px"
                color="#3CB457"
              >
                Terms and Conditions.
              </Typography>
            </Grid2>
            <Grid2>
              <Button
                onClick={() => navigate("/create-account-successfully")}
                disabled={!isFormValid()}
                sx={{
                  width: "100%",
                  fontSize: "16px",
                  borderRadius: "32px",
                  justifyContent: "center",
                  alignItems: "center",
                  fontWeight: "600",
                  lineHeight: "12px",
                  padding: "20px 62px 20px 62px",
                  backgroundColor: "#E7E7E7",
                  // color: "#838383",
                  height: "42px",
                  textTransform: "capitalize",
                  background: isFormValid()
                    ? "linear-gradient(102deg, #369d9c 0%, #28814d 100%)"
                    : "linear-gradient(102deg, #e7e7e7 0%, #e7e7e7 100%)",
                  color: isFormValid ? "#ffffff" : "#838383",
                  border: isFormValid
                    ? "1px solid rgba(217, 217, 217, 0.4)"
                    : "none",
                  cursor: isFormValid ? "pointer" : "not-allowed",
                  "&:hover": {
                    background: isFormValid
                      ? "linear-gradient(102deg, #28814d 0%, #369d9c 100%)"
                      : "linear-gradient(102deg, #e7e7e7 0%, #e7e7e7 100%)",
                  },
                }}
              >
                Create account
              </Button>
            </Grid2>
          </Paper>
        </Grid2>
      </Wrapper>
    </div>
  );
}

export default AccountCreationIntro;

 
// Display uploaded image or default profile
 
// Ensure relative positioning to allow absolute child positioning
 
 const paperStyle = {
    padding: "2.45rem 3.5375rem",
    height: "440px",
    width: "430px",
    border: "1px solid rgba(217, 217, 217, 0.4)",
    // border: 1px solid rgba(217, 217, 217, 0.4);
    borderRadius: "28px",
    // boxShadow: "0px 50px 50px -38px rgba(89, 132, 131, 0.65)",
    // box-shadow: 0px 50px 50px -38px rgba(89, 132, 131, 0.65);
    display: "flex",
    flexDirection: "column",
    gap: "32px",
  };
 
 <div
          style={{
            width: "80%",
            height: "16vh",
            borderRadius: "50%",
            margin: "0 auto",
            position: "absolute",
            bottom: "-20px",
            left: "10%",
            background: "#598483",
            filter: "blur(20px)",
            opacity: 0.8,
            zIndex: -1,
          }}
        ></div>
 

      <Grid2 container justifyContent="center">
 

      <Grid2 container justifyContent="center">
 

    position:"reletive"
 

  // border: 1px solid var(--stroke-21, rgba(217, 217, 217, 0.4));
  // background: #fff;
  // box-shadow: 0px 50px 50px -38px rgba(89, 132, 131, 0.65);
 
1px solid rgba(217, 217, 217, 0.4)
 

  MenuItem,
 

  Box,
 

  MenuItem,
 

  Grid2,
 

  Box,
 

  DialogTitle,
 

  DialogActions,
 

import down_arrow from "../../../../assets/images/down_arrow.svg";
import trash_logo from "../../../../assets/images/TrashS.svg";
 

import ProsessEmissonVenting from "./ProsessEmissonVenting";
 

  // Initialize fields with one empty row
  const [fields, setFields] = useState([{ fuel: "", quantity: "", unit: "" }]);
  const handleChange = (index, event) => {
    const { name, value } = event.target;
    const updatedFields = [...fields];
    updatedFields[index][name] = value;
    setFields(updatedFields);

    // Check if the current row is complete
    const isRowComplete =
      updatedFields[index].fuel &&
      updatedFields[index].quantity &&
      updatedFields[index].unit;

    // If the current row is complete and it’s the last row, add a new row
    if (isRowComplete && index === fields.length - 1) {
      setFields([...updatedFields, { fuel: "", quantity: "", unit: "" }]);
    }
  };

  const handleDelete = (index) => {
    const updatedFields = fields.filter((_, i) => i !== index);

    // Add a new empty row if there are no rows left
    if (updatedFields.length === 0) {
      updatedFields.push({ fuel: "", quantity: "", unit: "" });
    }

    setFields(updatedFields);
  };
 

            {/* <Grid2
              container
              spacing={2}
              sx={{
                border:
                  "1px solid var(--stroke-21, rgba(217, 217, 217, 0.40));",
                flexDirection: "column",
                display: "flex",
                padding: "18px",
                borderRadius: "8px",
              }}
            >
              {fields.map((field, index) => (
                <Grid2 item xs={12} key={index}>
                  <Box
                    sx={{
                      display: "flex",
                      alignItems: "flex-start",
                      gap: "20px",
                      flexWrap: "wrap",
                    }}
                  >
                    <Box
                      sx={{
                        display: "flex",
                        flexDirection: "column",
                        gap: "4px",
                        alignItems: "flex-start",
                      }}
                    >
                      <Typography
                        variant="body2"
                        fontSize="12px"
                        fontWeight="400"
                        lineHeight="19.6px"
                      >
                        Type of Process Emission
                      </Typography>
                      <TextField
                        select
                        name="fuel"
                        value={field.fuel}
                        onChange={(e) => handleChange(index, e)}
                        sx={{
                          width: "252px",
                          borderRadius: "5px",
                          border: "1px solid #D9D9D966",
                          position: "reletive",
                          "& .MuiSelect-icon": {
                            display: "none",
                          },
                          "& .MuiInputBase-input": {
                            padding: "10px 14px",
                            height: "8px",
                          },
                        }}
                        SelectProps={{
                          displayEmpty: true,
                        }}
                      >
                        <MenuItem value="" disabled>
                          <Grid2
                            flexDirection="row"
                            display="flex"
                            justifyContent="space-between"
                            alignItems="center"
                          >
                            <Typography
                              fontSize="13px"
                              fontWeight="500"
                              lineHeight="22.4px"
                              color="#B0B0B0"
                            >
                              Waste Gas Disposal
                            </Typography>
                            <img
                              src={down_arrow}
                              width="12px"
                              height="7px"
                              alt="Logo"
                              style={{
                                position: "absolute",
                                marginLeft: "210px",
                              }}
                            />
                          </Grid2>
                        </MenuItem>
                        <MenuItem value="Fuel">Process and Vented</MenuItem>
                        <MenuItem value="Fuel2">Fugitive</MenuItem>
                        <MenuItem value="Fuel3">Waste Gas Disposal</MenuItem>
                      </TextField>
                    </Box>

                    {field.fuel && (
                      <>
                        <Box
                          sx={{
                            display: "flex",
                            flexDirection: "column",
                            gap: "4px",
                            alignItems: "flex-start",
                          }}
                        >
                          <Typography
                            variant="body2"
                            fontSize="12px"
                            fontWeight="400"
                            lineHeight="19.6px"
                          >
                            Category of Waste gas disposal
                          </Typography>
                          <TextField
                            name="quantity"
                            value={field.quantity}
                            placeholder="Quantity"
                            onChange={(e) => handleChange(index, e)}
                            sx={{
                              width: "252px",
                              position: "relative",
                              borderRadius: "5px",
                              border: "1px solid #D9D9D966",
                              "& .MuiInputBase-input": {
                                padding: "10px 14px",
                                height: "auto",
                              },
                            }}
                          />
                        </Box>

                        <Box
                          sx={{
                            display: "flex",
                            flexDirection: "column",
                            gap: "4px",
                            alignItems: "flex-start",
                          }}
                        >
                          <Typography
                            variant="body2"
                            fontSize="12px"
                            fontWeight="400"
                            lineHeight="19.6px"
                          >
                            Category for Flaring
                          </Typography>
                          <TextField
                            select
                            name="unit"
                            value={field.unit}
                            onChange={(e) => handleChange(index, e)}
                            sx={{
                              width: "252px",
                              borderRadius: "5px",
                              border: "1px solid #D9D9D966",
                              "& .MuiSelect-icon": {
                                display: "none",
                              },
                              "& .MuiInputBase-input": {
                                padding: "10px 14px 10px 14px",
                                height: "8px",
                              },
                            }}
                            SelectProps={{
                              displayEmpty: true,
                            }}
                          >
                            <MenuItem value="" disabled>
                              <Grid2
                                flexDirection="row"
                                display="flex"
                                justifyContent="space-between"
                                alignItems="center"
                              >
                                <Typography
                                  fontSize="13px"
                                  fontWeight="500"
                                  lineHeight="22.4px"
                                  color="#B0B0B0"
                                >
                                  Flaring
                                </Typography>
                                <img
                                  src={down_arrow}
                                  width="12px"
                                  height="7px"
                                  alt="Logo"
                                  style={{
                                    position: "absolute",
                                    marginLeft: "210px",
                                  }}
                                />
                              </Grid2>
                            </MenuItem>
                            <MenuItem value="Unit1">Flaring</MenuItem>
                            <MenuItem value="Unit1">
                              Sweet Gas Processing
                            </MenuItem>
                            <MenuItem value="Unit1">
                              Conventional Oil Production
                            </MenuItem>
                          </TextField>
                        </Box>
                      </>
                    )}
                    {field.quantity || field.unit ? (
                      <Box
                        sx={{
                          display: "flex",
                          alignItems: "center",
                          justifyContent: "center",
                          flexDirection: "column",
                          gap: "8px",
                          cursor: "pointer",
                        }}
                      >
                        <img
                          onClick={() => handleDelete(index)}
                          src={trash_logo}
                          alt="Delete"
                          style={{
                            width: "20px",
                            height: "55px",
                            marginTop: "6px",
                            marginRight: "15px",
                          }}
                        />
                      </Box>
                    ) : null}
                  </Box>
                </Grid2>
              ))}

              <Grid2
                sx={{
                  display: "flex",
                  flexDirection: "column",
                  gap: "4px",
                  alignItems: "flex-start",
                }}
              >
                <Typography
                  variant="body2"
                  fontSize="12px"
                  fontWeight="400"
                  lineHeight="19.6px"
                >
                  Quantity of gas production (m3)
                </Typography>
                <TextField
                  placeholder="Quantity of Gas"
                  type="number"
                  sx={{
                    width: "252px",
                    borderRadius: "5px",
                    border: "1px solid #D9D9D966",
                    "& .MuiInputBase-input": {
                      padding: "10px 14px",
                      height: "auto",
                    },
                  }}
                ></TextField>
              </Grid2>
            </Grid2> */}
 

  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
 

import React, { useState } from "react";
 

import emisson_logo from "../../../../assets/images/emisson_logo.svg"
 

import x_logo from "../../../../assets/images/X_logo.svg"
import ProsessEmissonVenting from "./ProsessEmissonVenting";
import Gas2PopupEmission from "./Gas2PopupEmission";
 

import x_logo from from '../../../../'
 

import x_logo from "../../../../assets/images/";
 

import emisson_logo from "../../../../assets/images/";
 

import trash_logo from "../../../../assets/images/";
 

import down_arrow from "../../../../assets/images/";
 
const [gas2Fields, setGas2Fields] = useState([
    { fuel: "", quantity: "", unit: "" },
  ]);
 
  const [fields, setFields] = useState([{ fuel: "", quantity: "", unit: "" }]);

 

  const handleGas2Change = (index, event) => {
    const newFields = [...gas2Fields];
    newFields[index][event.target.name] = event.target.value;
    setGas2Fields(newFields);
  };
  const handleDeleteGas2 = (index) => {
    const newFields = gas2Fields.filter((_, i) => i !== index);
    setGas2Fields(newFields);
  };

 

            {/* <Grid2
              container
              spacing={2}
              sx={{
                border:
                  "1px solid var(--stroke-21, rgba(217, 217, 217, 0.40));",
                flexDirection: "column",
                display: "flex",
                padding: "18px",
                borderRadius: "8px",
              }}
            >
              {gas2Fields.map((field, index) => (
                <Grid2 item xs={12} key={index}>
                  <Box
                    sx={{
                      display: "flex",
                      alignItems: "flex-start",
                      gap: "20px",
                      flexWrap: "wrap",
                    }}
                  >
                    <Box
                      sx={{
                        display: "flex",
                        flexDirection: "column",
                        gap: "4px",
                        alignItems: "flex-start",
                      }}
                    >
                      <Typography
                        variant="body2"
                        fontSize="12px"
                        fontWeight="400"
                        lineHeight="19.6px"
                      >
                        Type of Process Emission
                      </Typography>
                      <TextField
                        select
                        name="fuel"
                        value={field.fuel}
                        onChange={(e) => handleGas2Change(index, e)}
                        sx={{
                          width: "252px",
                          borderRadius: "5px",
                          border: "1px solid #D9D9D966",
                          position: "relative",
                          "& .MuiSelect-icon": {
                            display: "none",
                          },
                          "& .MuiInputBase-input": {
                            padding: "10px 14px",
                            height: "8px",
                          },
                        }}
                        SelectProps={{
                          displayEmpty: true,
                        }}
                      >
                        <MenuItem value="" disabled>
                          <Grid2
                            flexDirection="row"
                            display="flex"
                            justifyContent="space-between"
                            alignItems="center"
                          >
                            <Typography
                              fontSize="13px"
                              fontWeight="500"
                              lineHeight="22.4px"
                              color="#B0B0B0"
                            >
                              Waste Gas Disposal
                            </Typography>
                            <img
                              src={down_arrow}
                              width="12px"
                              height="7px"
                              alt="Logo"
                              style={{
                                position: "absolute",
                                marginLeft: "210px",
                              }}
                            />
                          </Grid2>
                        </MenuItem>
                        <MenuItem value="Fuel">Process and Vented</MenuItem>
                        <MenuItem value="Fuel2">Fugitive</MenuItem>
                        <MenuItem value="Fuel3">Waste Gas Disposal</MenuItem>
                      </TextField>
                    </Box>

                    {field.fuel && (
                      <>
                        <Box
                          sx={{
                            display: "flex",
                            flexDirection: "column",
                            gap: "4px",
                            alignItems: "flex-start",
                          }}
                        >
                          <Typography
                            variant="body2"
                            fontSize="12px"
                            fontWeight="400"
                            lineHeight="19.6px"
                          >
                            Category of Waste gas disposal
                          </Typography>
                          <TextField
                            name="quantity"
                            value={field.quantity}
                            placeholder="Quantity"
                            onChange={(e) => handleGas2Change(index, e)}
                            sx={{
                              width: "252px",
                              borderRadius: "5px",
                              border: "1px solid #D9D9D966",
                              position: "reletive",
                              "& .MuiInputBase-input": {
                                padding: "10px 14px",
                                height: "auto",
                              },
                            }}
                          />
                        </Box>

                        <Box
                          sx={{
                            display: "flex",
                            flexDirection: "column",
                            gap: "4px",
                            alignItems: "flex-start",
                          }}
                        >
                          <Typography
                            variant="body2"
                            fontSize="12px"
                            fontWeight="400"
                            lineHeight="19.6px"
                          >
                            Category for Flaring
                          </Typography>
                          <TextField
                            select
                            name="unit"
                            value={field.unit}
                            onChange={(e) => handleGas2Change(index, e)}
                            sx={{
                              width: "252px",
                              borderRadius: "5px",
                              border: "1px solid #D9D9D966",
                              "& .MuiSelect-icon": {
                                display: "none",
                              },
                              "& .MuiInputBase-input": {
                                padding: "10px 14px 10px 14px",
                                height: "8px",
                              },
                            }}
                            SelectProps={{
                              displayEmpty: true,
                            }}
                          >
                            <MenuItem value="" disabled>
                              <Grid2
                                flexDirection="row"
                                display="flex"
                                justifyContent="space-between"
                                alignItems="center"
                              >
                                <Typography
                                  fontSize="13px"
                                  fontWeight="500"
                                  lineHeight="22.4px"
                                  color="#B0B0B0"
                                >
                                  Flaring
                                </Typography>
                                <img
                                  src={down_arrow}
                                  width="12px"
                                  height="7px"
                                  alt="Logo"
                                  style={{
                                    position: "absolute",
                                    marginLeft: "210px",
                                  }}
                                />
                              </Grid2>
                            </MenuItem>
                            <MenuItem value="Unit1">Flaring</MenuItem>
                            <MenuItem value="Unit2">
                              Sweet Gas Processing
                            </MenuItem>
                            <MenuItem value="Unit3">
                              Conventional Oil Production
                            </MenuItem>
                          </TextField>
                        </Box>
                      </>
                    )}
                    {field.quantity || field.unit ? (
                      <Box
                        sx={{
                          display: "flex",
                          alignItems: "center",
                          justifyContent: "center",
                          flexDirection: "column",
                          gap: "8px",
                          cursor: "pointer",
                        }}
                      >
                        <img
                          onClick={() => handleDeleteGas2(index)}
                          src={trash_logo}
                          alt="Delete"
                          style={{
                            width: "20px",
                            height: "55px",
                            marginTop: "6px",
                            marginRight: "15px",
                          }}
                        />
                      </Box>
                    ) : null}
                  </Box>
                </Grid2>
              ))}

              <Grid2
                sx={{
                  display: "flex",
                  flexDirection: "column",
                  gap: "4px",
                  alignItems: "flex-start",
                }}
              >
                <Typography
                  variant="body2"
                  fontSize="12px"
                  fontWeight="400"
                  lineHeight="19.6px"
                >
                  Quantity of gas production (m3)
                </Typography>
                <TextField
                  placeholder="Quantity of Gas"
                  type="number"
                  sx={{
                    width: "252px",
                    borderRadius: "5px",
                    border: "1px solid #D9D9D966",
                    "& .MuiInputBase-input": {
                      padding: "10px 14px",
                      height: "auto",
                    },
                  }}
                />
              </Grid2>
            </Grid2> */}
 

import emisson_logo from "../../../../assets/";
 

import trash_logo from "../../../../assets/";
 

import React, { useState } from "react";
 
 const handleGas2Change = (index, event) => {
    const newFields = [...gas2Fields];
    newFields[index][event.target.name] = event.target.value;
    setGas2Fields(newFields);
  };
  const handleDeleteGas2 = (index) => {
    const newFields = gas2Fields.filter((_, i) => i !== index);
    setGas2Fields(newFields);
  };
 

  const [gas2Fields, setGas2Fields] = useState([
    { fuel: "", quantity: "", unit: "" },
  ]);
 
"../../../../assets/images/X_logo.svg
 
../../../../assets/images/emisson_logo.svg
 
../../../../assets/images/TrashS.svg
 
../../../../assets/images/down_arrow.svg
 

    border: 1px solid rgba(217, 217, 217, 0.4);
 
border: "1px solid rgba(217, 217, 217, 0.4)",
 

                sx={{alignItems:"center"}}
 
Grid
 
import React, { useState } from "react";
import {
  Avatar,
  Button,
  Grid,
  Paper,
  TextField,
  Typography,
} from "@mui/material";
import Wrapper from "../Wrapper/Wrapper";
import upload from "../../assets/images/Upload.svg";
import logo from "../../assets/images/ge3s_logo.png";
import profile from "../../assets/images/profile.svg"; // Ensure this path is correct
import { useNavigate } from "react-router-dom";

function AccountCreationHeader() {
  // State to store the uploaded image URL
  const [uploadedImage, setUploadedImage] = useState(null);
  const [name, setName] = useState("");
  const navigate = useNavigate();

  // Handles image upload and sets the uploaded image URL to display in Avatar
  const handleButtonClick = () => {
    const fileInput = document.createElement("input");
    fileInput.type = "file";
    fileInput.accept = "image/*"; // Accept only image files
    fileInput.onchange = (event) => {
      const file = event.target.files[0];
      if (file) {
        const imageUrl = URL.createObjectURL(file); // Create URL for the selected image
        setUploadedImage(imageUrl); // Set the image URL to display in Avatar
        alert("File selected: " + file.name);
      }
    };
    fileInput.click();
  };

  // Input condition check
  const isFormValid = name.trim().length >= 5;

  const paperStyle = {
    padding: "2.45rem 3.5375rem",
    height: "440px",
    width: "430px",
    border: "1px solid rgba(217, 217, 217, 0.4)",
    borderRadius: "28px",
    boxShadow: "6px 89px 56px -38px rgba(89, 132, 131, 0.65)",
    display: "flex",
    flexDirection: "column",
    gap: "32px",
  };

  return (
    <Wrapper>
      <Grid container justifyContent="center">
        <Paper style={paperStyle}>
          {/* Header Grid */}
          <Grid
            align="center"
            sx={{ display: "flex", flexDirection: "column", gap: "16px" }}
          >
            <Grid item>
              <Avatar src={logo} style={{ height: "55px", width: "58px" }} />
            </Grid>
            <Grid item>
              <Typography
                variant="h2"
                style={{
                  fontSize: "1.5rem",
                  fontWeight: "600",
                  lineHeight: "3rem",
                  width: "380px",
                  height: "48px",
                  color: "rgba(0, 25, 29, 1)",
                  letterSpacing: "-1",
                  fontFamily: "Inter, sans-serif",
                }}
              >
                Start creating your account
              </Typography>
            </Grid>
          </Grid>
          {/* Profile section grid */}
          <Grid sx={{ display: "flex", flexDirection: "column", gap: "22px" }}>
            <Avatar
              src={uploadedImage || profile} // Display uploaded image or default profile
              style={{ height: "80px", width: "80px", objectFit: "cover" }}
            />
            <Button
              onClick={handleButtonClick}
              style={{
                border: "1px solid rgba(217, 217, 217, 0.4)",
                width: "165px",
                height: "40px",
                gap: "10px",
                display: "flex",
                flexDirection: "row",
                lineHeight: "16.63px",
                justifyContent: "center",
                alignItems: "center",
              }}
            >
              <img src={upload} alt="upload icon" />
              <Typography
                sx={{ textTransform: "capitalize", color: "#717171" }}
              >
                Upload Photo
              </Typography>
            </Button>
            <TextField
              placeholder="Full Name"
              size="small"
              value={name}
              onChange={(e) => setName(e.target.value)}
            ></TextField>
          </Grid2>
          {/* Submit button Grid2 */}
          <Grid2>
            <Button
              onClick={() => navigate("/account-Intro")}
              disabled={!isFormValid}
              sx={{
                width: "100%",
                fontSize: "14px",
                borderRadius: "32px",
                justifyContent: "center",
                alignItems: "center",
                fontWeight: "600",
                lineHeight: "16px",
                height: "40px",
                mt: "10px",
                textTransform: "capitalize",
                background: isFormValid
                  ? "linear-gradient(102deg, #369d9c 0%, #28814d 100%)"
                  : "linear-gradient(102deg, #e7e7e7 0%, #e7e7e7 100%)",
                color: isFormValid ? "#ffffff" : "#838383",
                border: isFormValid
                  ? "1px solid rgba(217, 217, 217, 0.4)"
                  : "none",
                cursor: isFormValid ? "pointer" : "not-allowed",
                "&:hover": {
                  background: isFormValid
                    ? "linear-gradient(102deg, #28814d 0%, #369d9c 100%)"
                    : "linear-gradient(102deg, #e7e7e7 0%, #e7e7e7 100%)",
                },
              }}
            >
              Create account
            </Button>
          </Grid>
        </Paper>
      </Grid>
    </Wrapper>
  );
}

export default AccountCreationHeader;

 
import React, { useState } from "react";
import {
  Avatar,
  Button,
  Grid2,
  Paper,
  TextField,
  Typography,
} from "@mui/material";
import Wrapper from "../Wrapper/Wrapper";
import upload from "../../assets/images/Upload.svg";
import logo from "../../assets/images/ge3s_logo.png";
import profile from "../../assets/images/profile.svg"; // Ensure this path is correct
import { useNavigate } from "react-router-dom";

function AccountCreationHeader() {
  const [name, setName] = useState("");
  const navigate = useNavigate();
  const isFormValid = name.trim().length >= 5;

  // State to store the uploaded image URL
  const [uploadedImage, setUploadedImage] = useState(null);
  const [name, setName] = useState("");
  const navigate = useNavigate();

  // Handles image upload and sets the uploaded image URL to display in Avatar
  const handleButtonClick = () => {
    const fileInput = document.createElement("input");
    fileInput.type = "file";
    fileInput.accept = "image/*"; // Accept only image files
    fileInput.onchange = (event) => {
      const file = event.target.files[0];
      if (file) {
        const imageUrl = URL.createObjectURL(file); // Create URL for the selected image
        setUploadedImage(imageUrl); // Set the image URL to display in Avatar
        alert("File selected: " + file.name);
      }
    };
    fileInput.click();
  };

  // Input condition check
  const isFormValid = name.trim().length >= 5;

  const paperStyle = {
    padding: "2.45rem 3.5375rem",
    height: "440px",
    width: "430px",
    border: "1px solid rgba(217, 217, 217, 0.4)",
    borderRadius: "28px",
    boxShadow: "6px 89px 56px -38px rgba(89, 132, 131, 0.65)",
    display: "flex",
    flexDirection: "column",
    gap: "32px",
  };

  return (
    <Wrapper>
      <Grid2 container justifyContent="center">
        <Paper style={paperStyle}>
          {/* Header Grid2 */}
          <Grid2
            align="center"
            sx={{ display: "flex", flexDirection: "column", gap: "16px" }}
          >
            <Grid2 item>
              <Avatar src={logo} style={{ height: "55px", width: "58px" }} />
            </Grid2>
            <Grid2 item>
              <Typography
                variant="h2"
                style={{
                  fontSize: "1.5rem",
                  fontWeight: "600",
                  lineHeight: "3rem",
                  width: "380px",
                  height: "48px",
                  color: "rgba(0, 25, 29, 1)",
                  letterSpacing: "-1",
                  fontFamily: "Inter, sans-serif",
                }}
              >
                Start creating your account
              </Typography>
            </Grid2>
          </Grid2>
          {/* Profile section Grid2 */}
          <Grid2 sx={{ display: "flex", flexDirection: "column", gap: "22px" }}>
            <Avatar
              src={uploadedImage || profile} // Display uploaded image or default profile
              style={{ height: "80px", width: "80px", objectFit: "cover" }}
            />
            <Button
              onClick={handleButtonClick}
              style={{
                border: "1px solid rgba(217, 217, 217, 0.4)",
                width: "165px",
                height: "40px",
                gap: "10px",
                display: "flex",
                flexDirection: "row",
                lineHeight: "16.63px",
                justifyContent: "center",
                alignItems: "center",
              }}
            >
              <img src={upload} alt="upload icon" />
              <Typography
                sx={{ textTransform: "capitalize", color: "#717171" }}
              >
                Upload Photo
              </Typography>
            </Button>
            <TextField
              placeholder="Full Name"
              size="small"
              value={name}
              onChange={(e) => setName(e.target.value)}
            />
          </Grid2>
          {/* Submit button Grid2 */}
          <Grid2>
            <Button
              onClick={() => navigate("/account-Intro")}
              disabled={!isFormValid}
              sx={{
                width: "100%",
                fontSize: "14px",
                borderRadius: "32px",
                justifyContent: "center",
                alignItems: "center",
                fontWeight: "600",
                lineHeight: "16px",
                height: "40px",
                mt: "10px",
                textTransform: "capitalize",
                background: isFormValid
                  ? "linear-gradient(102deg, #369d9c 0%, #28814d 100%)"
                  : "linear-gradient(102deg, #e7e7e7 0%, #e7e7e7 100%)",
                color: isFormValid ? "#ffffff" : "#838383",
                border: isFormValid
                  ? "1px solid rgba(217, 217, 217, 0.4)"
                  : "none",
                cursor: isFormValid ? "pointer" : "not-allowed",
                "&:hover": {
                  background: isFormValid
                    ? "linear-gradient(102deg, #28814d 0%, #369d9c 100%)"
                    : "linear-gradient(102deg, #e7e7e7 0%, #e7e7e7 100%)",
                },
              }}
            >
              Create account
            </Button>
          </Grid2>
        </Paper>
      </Grid2>
    </Wrapper>
  );
}

export default AccountCreationHeader;

 
height: "485px",
    width: "480px",
    border: "1px solid rgba(217, 217, 217, 0.4)",
    borderRadius: "20px",
    boxShadow: "6px 89px 56px -38px rgba(89, 132, 131, 0.65)",
    display: "flex",
    flexDirection: "column",
    padding: "38px 47px 38px 47px",
    gap: "26px",
 
const paperStyle = {
    height: "485px",
    width: "480px",
    border: "1px solid rgba(217, 217, 217, 0.4)",
    borderRadius: "20px",
    boxShadow: "6px 89px 56px -38px rgba(89, 132, 131, 0.65)",
    display: "flex",
    flexDirection: "column",
    padding: "38px 47px 38px 47px",
    gap: "26px",
  };
 
/* Place behind the main content */
 
/* Blur effect */
 
 /* Border opacity */
 
 /* Border color */
 
/* Large border radius */
 
/* Adjust to cover the border area */
 
/* Adjust to cover the border area */
 
/* Adjust to cover the border area */
 
/* Adjust to cover the border area */
 
/* Ensure the pseudo-element doesn’t overflow */
 
/* Center text */
 
/* Center items vertically */
 
 /* Center items horizontally */
 
/* Height */
 
/* Gap between elements */
 
 /* Width */
 
/* Background color */
 
/* .login-container-2 {
  position: relative;
  margin: 15vh auto;
  border-radius: 20px;
  border: 1px solid var(--stroke-21, rgba(217, 217, 217, 0.4));
  background: var(--White, #fff);
  box-shadow: 6px 89px 56px -38px rgba(89, 132, 131, 0.65);
  width: 30vw;
  padding: 35px;
  gap: 24px;
  display: flex;
  flex-direction: column;
  height: auto;
} */
 

  padding: 60px; /* Padding */
 

  border-radius: 16px; /* Maintain the main border-radius */
 
210px; /* Height */
 
.login-container-2 {
  position: relative;
  margin: 15vh auto;
  border-radius: 20px;
  border: 1px solid var(--stroke-21, rgba(217, 217, 217, 0.4));
  background: var(--White, #fff);
  box-shadow: 6px 89px 56px -38px rgba(89, 132, 131, 0.65);
  width: 30vw;
  padding: 35px;
  gap: 24px;
  display: flex;
  flex-direction: column;
  height: auto;
}
 
.login-container-2 {
  position: relative;
  margin: 15vh auto;
  border-radius: 20px;
  border: 1px solid var(--stroke-21, rgba(217, 217, 217, 0.4));
  background: var(--White, #fff);
  box-shadow: 6px 89px 56px -38px rgba(89, 132, 131, 0.65);
  width: 30vw;
  padding: 35px;
  gap: 24px;
  display: flex;
  flex-direction: column;
  height: auto;
}
 
210px; /* Updated height */
 
.login-container-2 {
  position: relative;
  margin: 15vh auto;
  border-radius: 20px;
  border: 1px solid var(--stroke-21, rgba(217, 217, 217, 0.4));
  background: var(--White, #fff);
  box-shadow: 6px 89px 56px -38px rgba(89, 132, 131, 0.65);
  width: 30vw;
  padding: 35px;
  gap: 24px;
  display: flex;
  flex-direction: column;
  height: auto;
}
 
.login-container-2 {
  position: relative;
  margin: 15vh auto;
  border-radius: 20px;
  border: 1px solid var(--stroke-21, rgba(217, 217, 217, 0.4));
  background: var(--White, #fff);
  box-shadow: 6px 89px 56px -38px rgba(89, 132, 131, 0.65);
  width: 30vw;
  padding: 35px;
  gap: 24px;
  display: flex;
  flex-direction: column;
  height: auto;
}
 
 // Centers child elements vertically
 
// Centers child elements horizontally
 
        // Allows for absolutely positioned children relative to this element
 
// Sets a gap of 20px between child elements
 
 // Aligns children elements vertically
 
// Centers text horizontally within the element
 
 // Sets the display to flex for layout
 
// Adds a shadow effect
 
// Rounds the corners of the element with a 16px radius
 
/ Creates a light grey border with 40% opacity
 
// Sets the width of the element to 350px
 
// Ensures the element doesn't exceed the width of its container
 
 // Sets padding of 60px on all sides
 
 // Sets the height of the element to 210px
 
 const paperStyle = {
    height: "210px",
    padding: "60px 60px 60px 60px", // Updated padding
    maxWidth: "100%",
    width: "350px",
    border: "1px solid rgba(217, 217, 217, 0.4)",
    borderRadius: "16px",
    boxShadow: "6px 89px 56px -38px rgba(89, 132, 131, 0.65)",
    display: "flex",
    textAlign: "center",
    flexDirection: "column",
    gap: "20px",
    position: "relative",
    alignItems: "center",
    justifyContent: "center",
  };
 
 // Sets a gap of 32px between flex items
 
 // Aligns flex children vertically in a column
 
 // Sets the display to flex, allowing for flexible box layouts
 
// Applies a shadow effect with specified offsets and color
 
// Rounds the corners of the element with a 28px radius
 
// Creates a light grey border with 40% opacity
 
// Sets the width of the element to 430px
 
  // Sets the height of the element to 440px
 
// Sets top/bottom padding to 2.45rem and left/right padding to 3.5375rem
 
const paperStyle = {
    padding: "2.45rem 3.5375rem",
    height: "440px",
    width: "430px",
    border: "1px solid rgba(217, 217, 217, 0.4)",
    borderRadius: "28px",
    boxShadow: "6px 89px 56px -38px rgba(89, 132, 131, 0.65)",
    display: "flex",
    flexDirection: "column",
    gap: "32px",
  };
 
padding: "2.45rem 3.5375rem",
    height: "440px",
    width: "430px",
    border: "1px solid rgba(217, 217, 217, 0.4)",
    borderRadius: "28px",
    boxShadow: "6px 89px 56px -38px rgba(89, 132, 131, 0.65)",
    display: "flex",
    flexDirection: "column",
    gap: "32px",
 
box-shadow: 
 
6px 89px 56px -38px rgba(89, 132, 131, 0.65)
 

    boxShadow: "6px 89px 56px -38px rgba(89, 132, 131, 0.65)",
 
Grid
 
// import React from "react";
// import {
//   Avatar,
//   Button,
//   Grid2,
//   Paper,
//   TextField,
//   Typography,
// } from "@mui/material";
// import Wrapper from "../Wrapper/Wrapper";
// import upload from "../../assets/images/Upload.svg";
// import logo from "../../assets/images/ge3s_logo.png";
// import profile from "../../assets/images/profile.svg";
// import { useState } from "react";
// import { useNavigate } from "react-router-dom";

// function AccountCreationHeader() {
//   // Opens a file picker and shows the selected file name.
//   const handleButtonClick = () => {
//     const fileInput = document.createElement("input");
//     fileInput.type = "file";
//     fileInput.onchange = (event) => {
//       const file = event.target.files[0];
//       if (file) {
//         alert("File selected: " + file.name);
//       }
//     };
//     fileInput.click();
//   };
//   const [name, setName] = useState("");
//   const navigate = useNavigate();
//   // input condition check
//   const isFormValid = name.trim().length >= 5;

//   const paperStyle = {
//     padding: "2.45rem 3.5375rem",
//     height: "440px", // Roughly 60% of the viewport height (adjust as needed)
//     width: "430px", // Roughly 40% of the viewport width (adjust as needed)
//     border: "1px solid rgba(217, 217, 217, 0.4)",
//     borderRadius: "28px",
//     boxShadow: "6px 89px 56px -38px rgba(89, 132, 131, 0.65)",
//     display: "flex",
//     flexDirection: "column",
//     gap: "32px",
//   };
//   return (
//     <Wrapper>
//       <Grid2>
//         <Paper style={paperStyle}>
//           {/* Header Grid */}
//           <Grid2
//             align="center"
//             sx={{ display: "flex", flexDirection: "column", gap: "16px" }}
//           >
//             <Grid2 item>
//               <Avatar
//                 src={logo}
//                 style={{ height: "55px", width: "58px" }}
//               ></Avatar>
//             </Grid2>
//             <Grid2 item>
//               <Typography
//                 variant="h2"
//                 style={{
//                   fontSize: "1.5rem",
//                   fontWeight: "600",
//                   lineHeight: "3rem",
//                   width: "380px",
//                   height: "48px",
//                   color: "rgba(0, 25, 29, 1)",
//                   letter: "-1",
//                   fontFamily: "Inter, sans-serif",
//                 }}
//               >
//                 Start creating your account
//               </Typography>
//             </Grid2>
//           </Grid2>
//           {/* profile section grid */}
//           <Grid2 sx={{ display: "flex", flexDirection: "column", gap: "22px" }}>
//             <Avatar
//               src={profile}
//               style={{ height: "80px", width: "80px" }}
//             ></Avatar>
//             <Button
//               onClick={handleButtonClick}
//               style={{
//                 border: "1px solid ",
//                 width: "165px",
//                 height: "40px",
//                 gap: "10px",
//                 display: "flex",
//                 flexDirection: "row",
//                 lineHeight: "16.63px",
//                 border: "1px solid rgba(217, 217, 217, 0.4)",
//                 justifyContent: "center",
//                 alignItems: "center",
//               }}
//             >
//               <img src={upload}></img>
//               <Typography
//                 sx={{ textTransform: "capitalize", color: "#717171" }}
//               >
//                 Upload Photo
//               </Typography>
//             </Button>
//             <TextField
//               placeholder="Full Name"
//               size="small"
//               value={name}
//               onChange={(e) => setName(e.target.value)}
//             ></TextField>
//           </Grid2>
//           {/* Submit buttun grid */}
//           <Grid2>
//             <Button
//               onClick={() => navigate("/account-Intro")}
//               disabled={!isFormValid}
//               sx={{
//                 width: "100%",
//                 fontSize: "14px",
//                 borderRadius: "32px",
//                 justifyContent: "center",
//                 alignItems: "center",
//                 fontWeight: "600",
//                 lineHeight: "16px",
//                 height: "40px",
//                 mt: "10px",
//                 textTransform: "capitalize",
//                 background: isFormValid
//                   ? "linear-gradient(102deg, #369d9c 0%, #28814d 100%)"
//                   : "linear-gradient(102deg, #e7e7e7 0%, #e7e7e7 100%)",
//                 color: isFormValid ? "#ffffff" : "#838383",
//                 border: isFormValid
//                   ? "1px solid rgba(217, 217, 217, 0.4)"
//                   : "none",
//                 cursor: isFormValid ? "pointer" : "not-allowed",
//                 "&:hover": {
//                   background: isFormValid
//                     ? "linear-gradient(102deg, #28814d 0%, #369d9c 100%)"
//                     : "linear-gradient(102deg, #e7e7e7 0%, #e7e7e7 100%)",
//                 },
//               }}
//             >
//               Create account
//             </Button>
//           </Grid2>
//         </Paper>
//       </Grid2>
//     </Wrapper>
//   );
// }

// export default AccountCreationHeader;


 

import Profi
 
import React from "react";
import {
  Avatar,
  Button,
  Grid2,
  Paper,
  TextField,
  Typography,
} from "@mui/material";
import Wrapper from "../Wrapper/Wrapper";
import upload from "../../assets/images/Upload.svg";
import logo from "../../assets/images/ge3s_logo.png";
import profile from "../../assets/images/profile.svg";
import { useState } from "react";
import { useNavigate } from "react-router-dom";

function AccountCreationHeader() {
  // Opens a file picker and shows the selected file name.
  const handleButtonClick = () => {
    const fileInput = document.createElement("input");
    fileInput.type = "file";
    fileInput.onchange = (event) => {
      const file = event.target.files[0];
      if (file) {
        alert("File selected: " + file.name);
      }
    };
    fileInput.click();
  };
  const [name, setName] = useState("");
  const navigate = useNavigate();
  // input condition check
  const isFormValid = name.trim().length >= 5;

  const paperStyle = {
    padding: "2.45rem 3.5375rem",
    height: "440px", // Roughly 60% of the viewport height (adjust as needed)
    width: "430px", // Roughly 40% of the viewport width (adjust as needed)
    border: "1px solid rgba(217, 217, 217, 0.4)",
    borderRadius: "28px",
    boxShadow: "6px 89px 56px -38px rgba(89, 132, 131, 0.65)",
    display: "flex",
    flexDirection: "column",
    gap: "32px",
  };
  return (
    <Wrapper>
      <Grid2>
        <Paper style={paperStyle}>
          {/* Header Grid */}
          <Grid2
            align="center"
            sx={{ display: "flex", flexDirection: "column", gap: "16px" }}
          >
            <Grid2 item>
              <Avatar
                src={logo}
                style={{ height: "55px", width: "58px" }}
              ></Avatar>
            </Grid2>
            <Grid2 item>
              <Typography
                variant="h2"
                style={{
                  fontSize: "1.5rem",
                  fontWeight: "600",
                  lineHeight: "3rem",
                  width: "380px",
                  height: "48px",
                  color: "rgba(0, 25, 29, 1)",
                  letter: "-1",
                  fontFamily: "Inter, sans-serif",
                }}
              >
                Start creating your account
              </Typography>
            </Grid2>
          </Grid2>
          {/* profile section grid */}
          <Grid2 sx={{ display: "flex", flexDirection: "column", gap: "22px" }}>
            <Avatar
              src={profile}
              style={{ height: "80px", width: "80px" }}
            ></Avatar>
            <Button
              onClick={handleButtonClick}
              style={{
                border: "1px solid ",
                width: "165px",
                height: "40px",
                gap: "10px",
                display: "flex",
                flexDirection: "row",
                lineHeight: "16.63px",
                border: "1px solid rgba(217, 217, 217, 0.4)",
                justifyContent: "center",
                alignItems: "center",
              }}
            >
              <img src={upload}></img>
              <Typography
                sx={{ textTransform: "capitalize", color: "#717171" }}
              >
                Upload Photo
              </Typography>
            </Button>
            <TextField
              placeholder="Full Name"
              size="small"
              value={name}
              onChange={(e) => setName(e.target.value)}
            ></TextField>
          </Grid2>
          {/* Submit buttun grid */}
          <Grid2>
            <Button
              onClick={() => navigate("/account-Intro")}
              disabled={!isFormValid}
              sx={{
                width: "100%",
                fontSize: "14px",
                borderRadius: "32px",
                justifyContent: "center",
                alignItems: "center",
                fontWeight: "600",
                lineHeight: "16px",
                height: "40px",
                mt: "10px",
                textTransform: "capitalize",
                background: isFormValid
                  ? "linear-gradient(102deg, #369d9c 0%, #28814d 100%)"
                  : "linear-gradient(102deg, #e7e7e7 0%, #e7e7e7 100%)",
                color: isFormValid ? "#ffffff" : "#838383",
                border: isFormValid
                  ? "1px solid rgba(217, 217, 217, 0.4)"
                  : "none",
                cursor: isFormValid ? "pointer" : "not-allowed",
                "&:hover": {
                  background: isFormValid
                    ? "linear-gradient(102deg, #28814d 0%, #369d9c 100%)"
                    : "linear-gradient(102deg, #e7e7e7 0%, #e7e7e7 100%)",
                },
              }}
            >
              Create account
            </Button>
          </Grid2>
        </Paper>
      </Grid2>
    </Wrapper>
  );
}

export default AccountCreationHeader;

 

                        position="reletive"
 

                        position="reletive"
 

                              marginLeft: "18px", // Adjust margin as needed
 

                            left="0"
 
 <Box
                    sx={{
                      display: "flex",
                      flexDirection: "column", // Arrange label and input in a column
                      gap: "4px", // Space between label and input
                      alignItems: "flex-start", // Ensure alignment is consistent
                    }}
                  >
                    <Typography
                      variant="body2"
                      fontSize="12px"
                      fontWeight="400"
                      lineHeight="19.6px"
                    >
                      Fuel Type
                    </Typography>
                    <TextField
                      select
                      name="fuel"
                      value={field.fuel}
                      onChange={(e) => handleChange(index, e)}
                      sx={{
                        width: "332.5px",
                        borderRadius: "5px",
                        border: "1px solid #D9D9D966",
                        "& .MuiSelect-icon": {
                          display: "none",
                        },
                        "& .MuiInputBase-input": {
                          padding: "10px 14px 10px 14px", // Add consistent padding
                          height: "8px",
                        },
                      }}
                      SelectProps={{
                        displayEmpty: true,
                      }}
                    >
                      <MenuItem value="" disabled>
                        <Grid2
                          flexDirection="row"
                          display="flex"
                          justifyContent="space-between"
                          alignItems="center"
                        >
                          <Typography
                            fontSize="13px"
                            fontWeight="500"
                            lineHeight="22.4px"
                            color="#B0B0B0"
                          >
                            Select Type
                          </Typography>
                          <img
                            src={down_arrow}
                            width="12px"
                            height="7px"
                            alt="Logo"
                            style={{
                              marginLeft: "18px", // Adjust margin as needed
                            }}
                          />
                        </Grid2>
                      </MenuItem>
                      <MenuItem value="Fuel">Gasoline/Petrol</MenuItem>
                      <MenuItem value="Fuel2">LPG</MenuItem>
                      <MenuItem value="Fuel3">CNG</MenuItem>
                    </TextField>
                  </Box>
 
 <Box
                    sx={{
                      display: "flex",
                      flexDirection: "column", // Arrange label and input in a column
                      gap: "4px", // Space between label and input
                      alignItems: "flex-start", // Ensure alignment is consistent
                    }}
                  >
                    <Typography
                      variant="body2"
                      fontSize="12px"
                      fontWeight="400"
                      lineHeight="19.6px"
                    >
                      Fuel Type
                    </Typography>
                    <TextField
                      select
                      name="fuel"
                      value={field.fuel}
                      onChange={(e) => handleChange(index, e)}
                      sx={{
                        width: "332.5px",
                        borderRadius: "5px",
                        border: "1px solid #D9D9D966",
                        "& .MuiSelect-icon": {
                          display: "none",
                        },
                        "& .MuiInputBase-input": {
                          padding: "10px 14px 10px 14px", // Add consistent padding
                          height: "8px",
                        },
                      }}
                      SelectProps={{
                        displayEmpty: true,
                      }}
                    >
                      <MenuItem value="" disabled>
                        <Grid2
                          flexDirection="row"
                          display="flex"
                          justifyContent="space-between"
                          alignItems="center"
                        >
                          <Typography
                            fontSize="13px"
                            fontWeight="500"
                            lineHeight="22.4px"
                            color="#B0B0B0"
                          >
                            Select Type
                          </Typography>
                          <img
                            src={down_arrow}
                            width="12px"
                            height="7px"
                            alt="Logo"
                            style={{
                              marginLeft: "20px", // Adjust margin as needed
                            }}
                          />
                        </Grid2>
                      </MenuItem>
                      <MenuItem value="Fuel">Gasoline/Petrol</MenuItem>
                      <MenuItem value="Fuel2">LPG</MenuItem>
                      <MenuItem value="Fuel3">CNG</MenuItem>
                    </TextField>
                  </Box>
 
 <Box
                    sx={{
                      display: "flex",
                      flexDirection: "column", // Arrange label and input in a column
                      gap: "4px", // Space between label and input
                      alignItems: "flex-start", // Ensure alignment is consistent
                    }}
                  >
                    <Typography
                      variant="body2"
                      fontSize="12px"
                      fontWeight="400"
                      lineHeight="19.6px"
                    >
                      Fuel Type
                    </Typography>
                    <TextField
                      select
                      name="fuel"
                      value={field.fuel}
                      onChange={(e) => handleChange(index, e)}
                      sx={{
                        width: "332.5px",
                        borderRadius: "5px",
                        border: "1px solid #D9D9D966",
                        "& .MuiSelect-icon": {
                          display: "none",
                        },
                        "& .MuiInputBase-input": {
                          padding: "10px 14px 10px 14px", // Add consistent padding
                          height: "8px",
                        },
                      }}
                      SelectProps={{
                        displayEmpty: true,
                      }}
                    >
                      <MenuItem value="" disabled>
                        <Grid2
                          flexDirection="row"
                          display="flex"
                          justifyContent="space-between"
                          alignItems="center"
                        >
                          <Typography
                            fontSize="13px"
                            fontWeight="500"
                            lineHeight="22.4px"
                            color="#B0B0B0"
                          >
                            Select Type
                          </Typography>
                          <img
                            src={down_arrow}
                            width="12px"
                            height="7px"
                            alt="Logo"
                            style={{
                              marginLeft: "20px", // Adjust margin as needed
                            }}
                          />
                        </Grid2>
                      </MenuItem>
                      <MenuItem value="Fuel">Gasoline/Petrol</MenuItem>
                      <MenuItem value="Fuel2">LPG</MenuItem>
                      <MenuItem value="Fuel3">CNG</MenuItem>
                    </TextField>
                  </Box>
 
<Box
                    sx={{
                      display: "flex",
                      flexDirection: "column", // Arrange label and input in a column
                      gap: "4px", // Space between label and input
                      alignItems: "flex-start", // Ensure alignment is consistent
                    }}
                  >
                    <Typography
                      variant="body2"
                      fontSize="12px"
                      fontWeight="400"
                      lineHeight="19.6px"
                    >
                      Fuel Type
                    </Typography>
                    <TextField
                      select
                      name="fuel"
                      value={field.fuel}
                      onChange={(e) => handleChange(index, e)}
                      sx={{
                        width: "332.5px",
                        borderRadius: "5px",
                        border: "1px solid #D9D9D966",
                        "& .MuiSelect-icon": {
                          display: "none",
                        },
                        "& .MuiInputBase-input": {
                          padding: "10px 14px 10px 14px", // Add consistent padding
                          height: "8px",
                        },
                      }}
                      SelectProps={{
                        displayEmpty: true,
                      }}
                    >
                      <MenuItem value="" disabled>
                        <Grid2
                          flexDirection="row"
                          display="flex"
                          justifyContent="space-between"
                          alignItems="center"
                        >
                          <Typography
                            fontSize="13px"
                            fontWeight="500"
                            lineHeight="22.4px"
                            color="#B0B0B0"
                          >
                            Select Type
                          </Typography>
                          <img
                            src={down_arrow}
                            width="12px"
                            height="7px"
                            alt="Logo"
                            style={{
                              marginLeft: "8px", // Adjust margin as needed
                            }}
                          />
                        </Grid2>
                      </MenuItem>
                      <MenuItem value="Fuel">Gasoline/Petrol</MenuItem>
                      <MenuItem value="Fuel2">LPG</MenuItem>
                      <MenuItem value="Fuel3">CNG</MenuItem>
                    </TextField>
                  </Box>
 
alignItems: "flex-start", // Ensure alignment is consistent
 
<TextField
                      select
                      name="fuel"
                      value={field.fuel}
                      onChange={(e) => handleChange(index, e)}
                      sx={{
                        width: "332.5px",
                        borderRadius: "5px",
                        border: "1px solid #D9D9D966",
                        "& .MuiSelect-icon": {
                          display: "none",
                        },
                        "& .MuiInputBase-input": {
                          padding: "10px 14px 10px 14px", // Add consistent padding
                          height: "8px",
                        },
                      }}
                      SelectProps={{
                        displayEmpty: true,
                      }}
                    >
                      <MenuItem value="" disabled>
                        <Grid2
                          flexDirection="row"
                          display="flex"
                          justifyContent="space-between"
                          alignItems="center"
                        >
                          <Typography
                            fontSize="13px"
                            fontWeight="500"
                            lineHeight="22.4px"
                            color="#B0B0B0"
                          >
                            Select Type
                          </Typography>
                          <img
                            src={down_arrow}
                            width="12px"
                            height="7px"
                            alt="Logo"
                          />
                        </Grid2>
                      </MenuItem>
                      <MenuItem value="Fuel">Gasoline/Petrol</MenuItem>
                      <MenuItem value="Fuel2">LPG</MenuItem>
                      <MenuItem value="Fuel3">CNG</MenuItem>
                    </TextField>
 
<TextField
                      select
                      name="fuel"
                      value={field.fuel}
                      onChange={(e) => handleChange(index, e)}
                      sx={{
                        width: "332.5px",
                        borderRadius: "5px",
                        border: "1px solid #D9D9D966",
                        "& .MuiSelect-icon": {
                          display: "none",
                        },
                        "& .MuiInputBase-input": {
                          padding: "10px 14px 10px 14px", // Add consistent padding
                          height: "8px",
                        },
                      }}
                      SelectProps={{
                        displayEmpty: true,
                      }}
                    >
                      <MenuItem value="" disabled>
                        <Grid2
                          flexDirection="row"
                          display="flex"
                          justifyContent="space-between"
                          alignItems="center"
                        >
                          <Typography
                            fontSize="13px"
                            fontWeight="500"
                            lineHeight="22.4px"
                            color="#B0B0B0"
                          >
                            Select Type
                          </Typography>
                          <img
                            src={down_arrow}
                            width="12px"
                            height="7px"
                            alt="Logo"
                          />
                        </Grid2>
                      </MenuItem>
                      <MenuItem value="Fuel">Gasoline/Petrol</MenuItem>
                      <MenuItem value="Fuel2">LPG</MenuItem>
                      <MenuItem value="Fuel3">CNG</MenuItem>
                    </TextField>
 
<TextField
                      select
                      name="fuel"
                      value={field.fuel}
                      onChange={(e) => handleChange(index, e)}
                      sx={{
                        width: "332.5px",
                        borderRadius: "5px",
                        border: "1px solid #D9D9D966",
                        "& .MuiSelect-icon": {
                          display: "none",
                        },
                        "& .MuiInputBase-input": {
                          padding: "10px 14px 10px 14px", // Add consistent padding
                          height: "8px",
                        },
                      }}
                      SelectProps={{
                        displayEmpty: true,
                      }}
                    >
                      <MenuItem value="" disabled>
                        <Grid2
                          flexDirection="row"
                          display="flex"
                          justifyContent="space-between"
                          alignItems="center"
                        >
                          <Typography
                            fontSize="13px"
                            fontWeight="500"
                            lineHeight="22.4px"
                            color="#B0B0B0"
                          >
                            Select Type
                          </Typography>
                          <img
                            src={down_arrow}
                            width="12px"
                            height="7px"
                            alt="Logo"
                          />
                        </Grid2>
                      </MenuItem>
                      <MenuItem value="Fuel">Gasoline/Petrol</MenuItem>
                      <MenuItem value="Fuel2">LPG</MenuItem>
                      <MenuItem value="Fuel3">CNG</MenuItem>
                    </TextField>
 

                            marginLeft="20px"
 

            <Grid2
              container
              spacing={2}
              sx={{
                border:
                  "1px solid var(--stroke-21, rgba(217, 217, 217, 0.40));",
                flexDirection: "column",
                display: "flex",
                padding: "18px",
                borderRadius: "8px",
              }}
            >
              {fields.map((field, index) => (
                <Grid2 item xs={12} key={index}>
                  <Box
                    sx={{
                      display: "flex",
                      alignItems: "flex-start",
                      gap: "20px",
                      flexWrap: "wrap",
                    }}
                  >
                    <Box
                      sx={{
                        display: "flex",
                        flexDirection: "column",
                        gap: "4px",
                        alignItems: "flex-start",
                      }}
                    >
                      <Typography
                        variant="body2"
                        fontSize="12px"
                        fontWeight="400"
                        lineHeight="19.6px"
                      >
                        Type of Process Emission
                      </Typography>
                      <TextField
                        select
                        name="fuel"
                        value={field.fuel}
                        onChange={(e) => handleChange(index, e)}
                        sx={{
                          width: "252px",
                          borderRadius: "5px",
                          border: "1px solid #D9D9D966",
                          "& .MuiSelect-icon": {
                            display: "none",
                          },
                          "& .MuiInputBase-input": {
                            padding: "10px 14px",
                            height: "8px",
                          },
                        }}
                        SelectProps={{
                          displayEmpty: true,
                        }}
                      >
                        <MenuItem value="" disabled>
                          <Grid2
                            flexDirection="row"
                            display="flex"
                            justifyContent="space-between"
                            alignItems="center"
                          >
                            <Typography
                              fontSize="13px"
                              fontWeight="500"
                              lineHeight="22.4px"
                              color="#B0B0B0"
                            >
                              Waste Gas Disposal
                            </Typography>
                            <img
                              src={down_arrow}
                              width="12px"
                              height="7px"
                              alt="Logo"
                            />
                          </Grid2>
                        </MenuItem>
                        <MenuItem value="Fuel">Process and Vented</MenuItem>
                        <MenuItem value="Fuel2">Fugitive</MenuItem>
                        <MenuItem value="Fuel3">Waste Gas Disposal</MenuItem>
                      </TextField>
                    </Box>

                    {field.fuel && (
                      <>
                        <Box
                          sx={{
                            display: "flex",
                            flexDirection: "column",
                            gap: "4px",
                            alignItems: "flex-start",
                          }}
                        >
                          <Typography
                            variant="body2"
                            fontSize="12px"
                            fontWeight="400"
                            lineHeight="19.6px"
                          >
                            Category of Waste gas disposal
                          </Typography>
                          <TextField
                            name="quantity"
                            value={field.quantity}
                            placeholder="Quantity"
                            onChange={(e) => handleChange(index, e)}
                            sx={{
                              width: "252px",
                              borderRadius: "5px",
                              border: "1px solid #D9D9D966",
                              "& .MuiInputBase-input": {
                                padding: "10px 14px",
                                height: "auto",
                              },
                            }}
                          />
                        </Box>

                        <Box
                          sx={{
                            display: "flex",
                            flexDirection: "column",
                            gap: "4px",
                            alignItems: "flex-start",
                          }}
                        >
                          <Typography
                            variant="body2"
                            fontSize="12px"
                            fontWeight="400"
                            lineHeight="19.6px"
                          >
                            Category for Flaring
                          </Typography>
                          <TextField
                            select
                            name="unit"
                            value={field.unit}
                            onChange={(e) => handleChange(index, e)}
                            sx={{
                              width: "252px",
                              borderRadius: "5px",
                              border: "1px solid #D9D9D966",
                              "& .MuiSelect-icon": {
                                display: "none",
                              },
                              "& .MuiInputBase-input": {
                                padding: "10px 14px 10px 14px",
                                height: "8px",
                              },
                            }}
                            SelectProps={{
                              displayEmpty: true,
                            }}
                          >
                            <MenuItem value="" disabled>
                              <Grid2
                                flexDirection="row"
                                display="flex"
                                justifyContent="space-between"
                                alignItems="center"
                              >
                                <Typography
                                  fontSize="13px"
                                  fontWeight="500"
                                  lineHeight="22.4px"
                                  color="#B0B0B0"
                                >
                                  Flaring
                                </Typography>
                                <img
                                  src={down_arrow}
                                  width="12px"
                                  height="7px"
                                  alt="Logo"
                                />
                              </Grid2>
                            </MenuItem>
                            <MenuItem value="Unit1">Flaring</MenuItem>
                            <MenuItem value="Unit2">
                              Sweet Gas Processing
                            </MenuItem>
                            <MenuItem value="Unit3">
                              Conventional Oil Production
                            </MenuItem>
                          </TextField>
                        </Box>
                      </>
                    )}
                    {field.quantity || field.unit ? (
                      <Box
                        sx={{
                          display: "flex",
                          alignItems: "center",
                          justifyContent: "center",
                          flexDirection: "column",
                          gap: "8px",
                          cursor: "pointer",
                        }}
                      >
                        <img
                          onClick={() => handleDelete(index)}
                          src={trash_logo}
                          alt="Delete"
                          style={{
                            width: "20px",
                            height: "55px",
                            marginTop: "6px",
                            marginRight: "15px",
                          }}
                        />
                      </Box>
                    ) : null}
                  </Box>
                </Grid2>
              ))}

              <Grid2
                sx={{
                  display: "flex",
                  flexDirection: "column",
                  gap: "4px",
                  alignItems: "flex-start",
                }}
              >
                <Typography
                  variant="body2"
                  fontSize="12px"
                  fontWeight="400"
                  lineHeight="19.6px"
                >
                  Quantity of gas production (m3)
                </Typography>
                <TextField
                  placeholder="Quantity of Gas"
                  type="number"
                  sx={{
                    width: "252px",
                    borderRadius: "5px",
                    border: "1px solid #D9D9D966",
                    "& .MuiInputBase-input": {
                      padding: "10px 14px",
                      height: "auto",
                    },
                  }}
                />
              </Grid2>
            </Grid2>
 
<Grid2
              container
              spacing={2}
              sx={{
                border:
                  "1px solid var(--stroke-21, rgba(217, 217, 217, 0.40));",
                flexDirection: "column",
                display: "flex",
                padding: "18px",
                borderRadius: "8px",
              }}
            >
              {fields.map((field, index) => (
                <Grid2 item xs={12} key={index}>
                  <Box
                    sx={{
                      display: "flex",
                      alignItems: "flex-start",
                      gap: "20px",
                      flexWrap: "wrap",
                    }}
                  >
                    <Box
                      sx={{
                        display: "flex",
                        flexDirection: "column",
                        gap: "4px",
                        alignItems: "flex-start",
                      }}
                    >
                      <Typography
                        variant="body2"
                        fontSize="12px"
                        fontWeight="400"
                        lineHeight="19.6px"
                      >
                        Type of Process Emission
                      </Typography>
                      <TextField
                        select
                        name="fuel"
                        value={field.fuel}
                        onChange={(e) => handleChange(index, e)}
                        sx={{
                          width: "252px",
                          borderRadius: "5px",
                          border: "1px solid #D9D9D966",
                          "& .MuiSelect-icon": {
                            display: "none",
                          },
                          "& .MuiInputBase-input": {
                            padding: "10px 14px",
                            height: "8px",
                          },
                        }}
                        SelectProps={{
                          displayEmpty: true,
                        }}
                      >
                        <MenuItem value="" disabled>
                          <Grid2
                            flexDirection="row"
                            display="flex"
                            justifyContent="space-between"
                            alignItems="center"
                          >
                            <Typography
                              fontSize="13px"
                              fontWeight="500"
                              lineHeight="22.4px"
                              color="#B0B0B0"
                            >
                              Waste Gas Disposal
                            </Typography>
                            <img
                              src={down_arrow}
                              width="12px"
                              height="7px"
                              alt="Logo"
                            />
                          </Grid2>
                        </MenuItem>
                        <MenuItem value="Fuel">Process and Vented</MenuItem>
                        <MenuItem value="Fuel2">Fugitive</MenuItem>
                        <MenuItem value="Fuel3">Waste Gas Disposal</MenuItem>
                      </TextField>
                    </Box>

                    {field.fuel && (
                      <>
                        <Box
                          sx={{
                            display: "flex",
                            flexDirection: "column",
                            gap: "4px",
                            alignItems: "flex-start",
                          }}
                        >
                          <Typography
                            variant="body2"
                            fontSize="12px"
                            fontWeight="400"
                            lineHeight="19.6px"
                          >
                            Category of Waste gas disposal
                          </Typography>
                          <TextField
                            name="quantity"
                            value={field.quantity}
                            placeholder="Quantity"
                            onChange={(e) => handleChange(index, e)}
                            sx={{
                              width: "252px",
                              borderRadius: "5px",
                              border: "1px solid #D9D9D966",
                              "& .MuiInputBase-input": {
                                padding: "10px 14px",
                                height: "auto",
                              },
                            }}
                          />
                        </Box>

                        <Box
                          sx={{
                            display: "flex",
                            flexDirection: "column",
                            gap: "4px",
                            alignItems: "flex-start",
                          }}
                        >
                          <Typography
                            variant="body2"
                            fontSize="12px"
                            fontWeight="400"
                            lineHeight="19.6px"
                          >
                            Category for Flaring
                          </Typography>
                          <TextField
                            select
                            name="unit"
                            value={field.unit}
                            onChange={(e) => handleChange(index, e)}
                            sx={{
                              width: "252px",
                              borderRadius: "5px",
                              border: "1px solid #D9D9D966",
                              "& .MuiSelect-icon": {
                                display: "none",
                              },
                              "& .MuiInputBase-input": {
                                padding: "10px 14px 10px 14px",
                                height: "8px",
                              },
                            }}
                            SelectProps={{
                              displayEmpty: true,
                            }}
                          >
                            <MenuItem value="" disabled>
                              <Grid2
                                flexDirection="row"
                                display="flex"
                                justifyContent="space-between"
                                alignItems="center"
                              >
                                <Typography
                                  fontSize="13px"
                                  fontWeight="500"
                                  lineHeight="22.4px"
                                  color="#B0B0B0"
                                >
                                  Flaring
                                </Typography>
                                <img
                                  src={down_arrow}
                                  width="12px"
                                  height="7px"
                                  alt="Logo"
                                />
                              </Grid2>
                            </MenuItem>
                            <MenuItem value="Unit1">Flaring</MenuItem>
                            <MenuItem value="Unit2">
                              Sweet Gas Processing
                            </MenuItem>
                            <MenuItem value="Unit3">
                              Conventional Oil Production
                            </MenuItem>
                          </TextField>
                        </Box>
                      </>
                    )}
                    {field.quantity || field.unit ? (
                      <Box
                        sx={{
                          display: "flex",
                          alignItems: "center",
                          justifyContent: "center",
                          flexDirection: "column",
                          gap: "8px",
                          cursor: "pointer",
                        }}
                      >
                        <img
                          onClick={() => handleDelete(index)}
                          src={trash_logo}
                          alt="Delete"
                          style={{
                            width: "20px",
                            height: "55px",
                            marginTop: "6px",
                            marginRight: "15px",
                          }}
                        />
                      </Box>
                    ) : null}
                  </Box>
                </Grid2>
              ))}

              <Grid2
                sx={{
                  display: "flex",
                  flexDirection: "column",
                  gap: "4px",
                  alignItems: "flex-start",
                }}
              >
                <Typography
                  variant="body2"
                  fontSize="12px"
                  fontWeight="400"
                  lineHeight="19.6px"
                >
                  Quantity of gas production (m3)
                </Typography>
                <TextField
                  placeholder="Quantity of Gas"
                  type="number"
                  sx={{
                    width: "252px",
                    borderRadius: "5px",
                    border: "1px solid #D9D9D966",
                    "& .MuiInputBase-input": {
                      padding: "10px 14px",
                      height: "auto",
                    },
                  }}
                />
              </Grid2>
            </Grid2>
 

  const handleGasProductionChange = (event) => {
    setGasProduction(event.target.value);
  };
 
  const [gasProduction, setGasProduction] = useState(""); // New state for gas production quantity

 
<Grid2
              container
              spacing={2}
              sx={{
                border:
                  "1px solid var(--stroke-21, rgba(217, 217, 217, 0.40));",
                flexDirection: "column",
                display: "flex",
                padding: "18px",
                borderRadius: "8px",
              }}
            >
              {fields.map((field, index) => (
                <Grid2 item xs={12} key={index}>
                  <Box
                    sx={{
                      display: "flex",
                      alignItems: "flex-start",
                      gap: "20px",
                      flexWrap: "wrap",
                    }}
                  >
                    <Box
                      sx={{
                        display: "flex",
                        flexDirection: "column",
                        gap: "4px",
                        alignItems: "flex-start",
                      }}
                    >
                      <Typography
                        variant="body2"
                        fontSize="12px"
                        fontWeight="400"
                        lineHeight="19.6px"
                      >
                        Type of Process Emission
                      </Typography>
                      <TextField
                        select
                        name="fuel"
                        value={field.fuel}
                        onChange={(e) => handleChange(index, e)}
                        sx={{
                          width: "252px",
                          borderRadius: "5px",
                          border: "1px solid #D9D9D966",
                          "& .MuiSelect-icon": {
                            display: "none",
                          },
                          "& .MuiInputBase-input": {
                            padding: "10px 14px",
                            height: "8px",
                          },
                        }}
                        SelectProps={{
                          displayEmpty: true,
                        }}
                      >
                        <MenuItem value="" disabled>
                          <Grid2
                            flexDirection="row"
                            display="flex"
                            justifyContent="space-between"
                            alignItems="center"
                          >
                            <Typography
                              fontSize="13px"
                              fontWeight="500"
                              lineHeight="22.4px"
                              color="#B0B0B0"
                            >
                              Waste Gas Disposal
                            </Typography>
                            <img
                              src={down_arrow}
                              width="12px"
                              height="7px"
                              alt="Logo"
                            />
                          </Grid2>
                        </MenuItem>
                        <MenuItem value="Fuel">Process and Vented</MenuItem>
                        <MenuItem value="Fuel2">Fugitive</MenuItem>
                        <MenuItem value="Fuel3">Waste Gas Disposal</MenuItem>
                      </TextField>
                    </Box>

                    {field.fuel && (
                      <>
                        <Box
                          sx={{
                            display: "flex",
                            flexDirection: "column",
                            gap: "4px",
                            alignItems: "flex-start",
                          }}
                        >
                          <Typography
                            variant="body2"
                            fontSize="12px"
                            fontWeight="400"
                            lineHeight="19.6px"
                          >
                            Category of Waste gas disposal
                          </Typography>
                          <TextField
                            name="quantity"
                            value={field.quantity}
                            placeholder="Quantity"
                            onChange={(e) => handleChange(index, e)}
                            sx={{
                              width: "252px",
                              borderRadius: "5px",
                              border: "1px solid #D9D9D966",
                              "& .MuiInputBase-input": {
                                padding: "10px 14px",
                                height: "auto",
                              },
                            }}
                          />
                        </Box>

                        <Box
                          sx={{
                            display: "flex",
                            flexDirection: "column",
                            gap: "4px",
                            alignItems: "flex-start",
                          }}
                        >
                          <Typography
                            variant="body2"
                            fontSize="12px"
                            fontWeight="400"
                            lineHeight="19.6px"
                          >
                            Category for Flaring
                          </Typography>
                          <TextField
                            select
                            name="unit"
                            value={field.unit}
                            onChange={(e) => handleChange(index, e)}
                            sx={{
                              width: "252px",
                              borderRadius: "5px",
                              border: "1px solid #D9D9D966",
                              "& .MuiSelect-icon": {
                                display: "none",
                              },
                              "& .MuiInputBase-input": {
                                padding: "10px 14px 10px 14px",
                                height: "8px",
                              },
                            }}
                            SelectProps={{
                              displayEmpty: true,
                            }}
                          >
                            <MenuItem value="" disabled>
                              <Grid2
                                flexDirection="row"
                                display="flex"
                                justifyContent="space-between"
                                alignItems="center"
                              >
                                <Typography
                                  fontSize="13px"
                                  fontWeight="500"
                                  lineHeight="22.4px"
                                  color="#B0B0B0"
                                >
                                  Flaring
                                </Typography>
                                <img
                                  src={down_arrow}
                                  width="12px"
                                  height="7px"
                                  alt="Logo"
                                />
                              </Grid2>
                            </MenuItem>
                            <MenuItem value="Unit1">Flaring</MenuItem>
                            <MenuItem value="Unit1">
                              Sweet Gas Processing
                            </MenuItem>
                            <MenuItem value="Unit1">
                              Conventional Oil Production
                            </MenuItem>
                          </TextField>
                        </Box>
                      </>
                    )}
                    {field.quantity || field.unit ? (
                      <Box
                        sx={{
                          display: "flex",
                          alignItems: "center",
                          justifyContent: "center",
                          flexDirection: "column",
                          gap: "8px",
                          cursor: "pointer",
                        }}
                      >
                        <img
                          onClick={() => handleDelete(index)}
                          src={trash_logo}
                          alt="Delete"
                          style={{
                            width: "20px",
                            height: "55px",
                            marginTop: "6px",
                            marginRight: "15px",
                          }}
                        />
                      </Box>
                    ) : null}
                  </Box>
                </Grid2>
              ))}

              <Grid2
                sx={{
                  display: "flex",
                  flexDirection: "column",
                  gap: "4px",
                  alignItems: "flex-start",
                }}
              >
                <Typography
                  variant="body2"
                  fontSize="12px"
                  fontWeight="400"
                  lineHeight="19.6px"
                >
                  Quantity of gas production (m3)
                </Typography>
                <TextField
                  placeholder="Quantity of Gas"
                  type="number"
                  sx={{
                    width: "252px",
                    borderRadius: "5px",
                    border: "1px solid #D9D9D966",
                    "& .MuiInputBase-input": {
                      padding: "10px 14px",
                      height: "auto",
                    },
                  }}
                ></TextField>
              </Grid2>
            </Grid2>
 

  // Initialize fields with one empty row
  const [fields, setFields] = useState([{ fuel: "", quantity: "", unit: "" }]);
  const [gasProductionFields, setGasProductionFields] = useState([{ quantity: "" }]);

  const handleChange = (index, event) => {
    const { name, value } = event.target;
    const updatedFields = [...fields];
    updatedFields[index][name] = value;
    setFields(updatedFields);

    // Check if the current row is complete
    const isRowComplete =
      updatedFields[index].fuel &&
      updatedFields[index].quantity &&
      updatedFields[index].unit;

    // If the current row is complete and it’s the last row, add a new row
    if (isRowComplete && index === fields.length - 1) {
      setFields([...updatedFields, { fuel: "", quantity: "", unit: "" }]);
    }
  };

  const handleDelete = (index) => {
    const updatedFields = fields.filter((_, i) => i !== index);

    // Add a new empty row if there are no rows left
    if (updatedFields.length === 0) {
      updatedFields.push({ fuel: "", quantity: "", unit: "" });
    }

    setFields(updatedFields);
  };
  const handleChangeGasProduction = (index, event) => {
    const { name, value } = event.target;
    const updatedGasProduction = [...gasProductionFields];
    updatedGasProduction[index][name] = value;
    setGasProductionFields(updatedGasProduction);
  };

 
 <Grid2
              sx={{ display: "flex", flexDirection: "column", gap: "4px" }}
            >
              <div
                style={{
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "space-between",
                  gap: "6px",
                  width: "100%",
                }}
              >
                <div
                  style={{ display: "flex", alignItems: "center", gap: "6px" }}
                >
                  <img
                    src={emisson_logo}
                    height="15px"
                    width="10px"
                    alt="fuel-logo"
                  />
                  <h2
                    style={{
                      fontSize: "16px",
                      fontWeight: "600",
                      lineHeight: "28px",
                      color: "#000000",
                      margin: 0,
                    }}
                  >
                    Process Emission
                  </h2>
                </div>
                <img
                  src={x_logo}
                  onClick={onClose}
                  alt="dot-icon"
                  height="24px"
                  width="24px"
                  style={{
                    marginBottom: "30px",
                    marginRight: "25px",
                    position: "absolute",
                    right: "0",
                    cursor: "pointer",
                  }}
                />
              </div>
              <Typography
                fontSize="12px"
                fontWeight="400"
                lineHeight="22.4px"
                color="#717171"
              >
                Record the type of industrial process and the quantity of
                product processed to calculate emissions directly related to
                production activities.
              </Typography>
            </Grid2>

            <Grid2
              container
              spacing={2}
              sx={{
                border:
                  "1px solid var(--stroke-21, rgba(217, 217, 217, 0.40));",
                flexDirection: "column",
                display: "flex",
                padding: "18px",
                borderRadius: "8px",
              }}
            >
              {fields.map((field, index) => (
                <Grid2 item xs={12} key={index}>
                  <Box
                    sx={{
                      display: "flex",
                      alignItems: "flex-start",
                      gap: "20px",
                      flexWrap: "wrap",
                    }}
                  >
                    <Box
                      sx={{
                        display: "flex",
                        flexDirection: "column",
                        gap: "4px",
                        alignItems: "flex-start",
                      }}
                    >
                      <Typography
                        variant="body2"
                        fontSize="12px"
                        fontWeight="400"
                        lineHeight="19.6px"
                      >
                        Type of Process Emission
                      </Typography>
                      <TextField
                        select
                        name="fuel"
                        value={field.fuel}
                        onChange={(e) => handleChange(index, e)}
                        sx={{
                          width: "252px",
                          borderRadius: "5px",
                          border: "1px solid #D9D9D966",
                          "& .MuiSelect-icon": {
                            display: "none",
                          },
                          "& .MuiInputBase-input": {
                            padding: "10px 14px",
                            height: "8px",
                          },
                        }}
                        SelectProps={{
                          displayEmpty: true,
                        }}
                      >
                        <MenuItem value="" disabled>
                          <Grid2
                            flexDirection="row"
                            display="flex"
                            justifyContent="space-between"
                            alignItems="center"
                          >
                            <Typography
                              fontSize="13px"
                              fontWeight="500"
                              lineHeight="22.4px"
                              color="#B0B0B0"
                            >
                              Waste Gas Disposal
                            </Typography>
                            <img
                              src={down_arrow}
                              width="12px"
                              height="7px"
                              alt="Logo"
                            />
                          </Grid2>
                        </MenuItem>
                        <MenuItem value="Fuel">Process and Vented</MenuItem>
                        <MenuItem value="Fuel2">Fugitive</MenuItem>
                        <MenuItem value="Fuel3">Waste Gas Disposal</MenuItem>
                      </TextField>
                    </Box>

                    {field.fuel && (
                      <>
                        <Box
                          sx={{
                            display: "flex",
                            flexDirection: "column",
                            gap: "4px",
                            alignItems: "flex-start",
                          }}
                        >
                          <Typography
                            variant="body2"
                            fontSize="12px"
                            fontWeight="400"
                            lineHeight="19.6px"
                          >
                            Category of Waste gas disposal
                          </Typography>
                          <TextField
                            name="quantity"
                            value={field.quantity}
                            placeholder="Quantity"
                            onChange={(e) => handleChange(index, e)}
                            sx={{
                              width: "252px",
                              borderRadius: "5px",
                              border: "1px solid #D9D9D966",
                              "& .MuiInputBase-input": {
                                padding: "10px 14px",
                                height: "auto",
                              },
                            }}
                          />
                        </Box>

                        <Box
                          sx={{
                            display: "flex",
                            flexDirection: "column",
                            gap: "4px",
                            alignItems: "flex-start",
                          }}
                        >
                          <Typography
                            variant="body2"
                            fontSize="12px"
                            fontWeight="400"
                            lineHeight="19.6px"
                          >
                            Category for Flaring
                          </Typography>
                          <TextField
                            select
                            name="unit"
                            value={field.unit}
                            onChange={(e) => handleChange(index, e)}
                            sx={{
                              width: "252px",
                              borderRadius: "5px",
                              border: "1px solid #D9D9D966",
                              "& .MuiSelect-icon": {
                                display: "none",
                              },
                              "& .MuiInputBase-input": {
                                padding: "10px 14px 10px 14px",
                                height: "8px",
                              },
                            }}
                            SelectProps={{
                              displayEmpty: true,
                            }}
                          >
                            <MenuItem value="" disabled>
                              <Grid2
                                flexDirection="row"
                                display="flex"
                                justifyContent="space-between"
                                alignItems="center"
                              >
                                <Typography
                                  fontSize="13px"
                                  fontWeight="500"
                                  lineHeight="22.4px"
                                  color="#B0B0B0"
                                >
                                  Flaring
                                </Typography>
                                <img
                                  src={down_arrow}
                                  width="12px"
                                  height="7px"
                                  alt="Logo"
                                />
                              </Grid2>
                            </MenuItem>
                            <MenuItem value="Unit1">Flaring</MenuItem>
                            <MenuItem value="Unit1">
                              Sweet Gas Processing
                            </MenuItem>
                            <MenuItem value="Unit1">
                              Conventional Oil Production
                            </MenuItem>
                          </TextField>
                        </Box>
                      </>
                    )}
                    {field.quantity || field.unit ? (
                      <Box
                        sx={{
                          display: "flex",
                          alignItems: "center",
                          justifyContent: "center",
                          flexDirection: "column",
                          gap: "8px",
                          cursor: "pointer",
                        }}
                      >
                        <img
                          onClick={() => handleDelete(index)}
                          src={trash_logo}
                          alt="Delete"
                          style={{
                            width: "20px",
                            height: "55px",
                            marginTop: "6px",
                            marginRight: "15px",
                          }}
                        />
                      </Box>
                    ) : null}
                  </Box>
                </Grid2>
              ))}

              <Grid2
                sx={{
                  display: "flex",
                  flexDirection: "column",
                  gap: "4px",
                  alignItems: "flex-start",
                }}
              >
                <Typography
                  variant="body2"
                  fontSize="12px"
                  fontWeight="400"
                  lineHeight="19.6px"
                >
                  Quantity of gas production (m3)
                </Typography>
                <TextField
                  placeholder="Quantity of Gas"
                  type="number"
                  sx={{
                    width: "252px",
                    borderRadius: "5px",
                    border: "1px solid #D9D9D966",
                    "& .MuiInputBase-input": {
                      padding: "10px 14px",
                      height: "auto",
                    },
                  }}
                ></TextField>
              </Grid2>
            </Grid2>

 

              justifyContent: "flex-end",
 
overflow: "hidden", // Scroll bar ko hide karne ke liye
 

          <Grid2
        sx={{
          padding: "25px 70px 0px 70px",
          width: "100%",
          height: "125px",
          display: "flex",
          flexDirection: "row",
          marginLeft:"50px",
          gap: "10px",
          overflow: "hidden",
          justifyContent: "flex-end", // This moves the buttons to the right
        }}
      >
        <Button
          sx={{
            borderRadius: "32px",
            border: "1px solid #28814D",
            height: "38px",
            fontWeight: "400",
            fontSize: "12px",
            width: "100px",
            textTransform: "capitalize",
            color: "#28814D",
          }}
        >
          Cancel
        </Button>
        <Button
          sx={{
            borderRadius: "32px",
            height: "38px",
            fontWeight: "400",
            fontSize: "12px",
            width: "100px",
            background: "#369D9C",
            textTransform: "capitalize",
            color: "#FFFFFF",
          }}
        >
          Proceed
        </Button>
      </Grid2>
 

            ml:"40px"
 

            padding: "8px 18px",
 

            ml:"40px"
 
 <Button
          sx={{
            borderRadius: "32px",
            border: "1px solid #28814D",
            height: "38px",
            fontWeight: "400",
            fontSize: "12px",
            width: "100px",
            textTransform: "capitalize",
            color: "#28814D",
            ml:"40px"
          }}
        >
          Cancel
        </Button>
        <Button
          sx={{
            borderRadius: "32px",
            padding: "8px 18px",
            height: "38px",
            fontWeight: "400",
            fontSize: "12px",
            width: "100px",
            background: "#369D9C",
            textTransform: "capitalize",
            color: "#FFFFFF",
            ml:"40px"
          }}
        >
          Proceed
        </Button>
 

            mr:"80px",
 

            position:"absolute",
 

            marginLeft:"20px"
 

            position:"absolute",
 

            // left:"0"
 

            margin
 

            padding: "8px 18px",
 
width: "262px"
 
  sx={{
                  display: "flex",
                  flexDirection: "column",
                  gap: "4px",
                  alignItems: "flex-start",
 
    sx={{
                  display: "flex",
                  flexDirection: "column",
                  gap: "4px",
                  alignItems: "flex-start",
                }}
 

import ProcessLastEmisson from "./ProcessLastEmission";
 
ProsessEmissonVenting
 

      <Grid2
        sx={{
          display: "flex",
          flexDirection: "column",
          gap: "4px",
          alignItems: "flex-start",
          mt:"20px"
        }}
      >
        <Typography
          variant="body2"
          fontSize="12px"
          fontWeight="400"
          lineHeight="19.6px"
        >
          Quantity of gas production (m3)
        </Typography>
        <TextField
          placeholder="Quantity of Gas"
          type="number"
          sx={{
            width: "272px",
            borderRadius: "5px",
            border: "1px solid #D9D9D966",
            "& .MuiInputBase-input": {
              padding: "10px 14px",
              height: "auto",
            },
          }}
        ></TextField>
      </Grid2>
 
import React from 'react'

function ProcessLastEmission() {
  return (
    <div>
      
    </div>
  )
}

export default ProcessLastEmission

 
 <TextField
                  placeholder="Quantity of Gas"
                  type="number"
                  sx={{
                    width: "262px", // Reduced the width from 250px to 150px
                    borderRadius: "5px",
                    border: "1px solid #D9D9D966",
                    "& .MuiInputBase-input": {
                      padding: "6px 12px",
                      height: "auto",
                    },
                  }}
                />
 

              <TextField
                placeholder="Quantity of Gas"
                type="number"
                sx={{
                  width: "262px",
                  borderRadius: "5px",
                  border: "1px solid #D9D9D966",
                  "& .MuiInputBase-input": {
                    padding: "8px 14px",
                    height: "auto",
                  },
                }}
              ></TextField>
 

              <TextField
                placeholder="Quantity of Gas"
                type="number"
                sx={{
                  width: "262px",
                  borderRadius: "5px",
                  border: "1px solid #D9D9D966",
                  "& .MuiInputBase-input": {
                    padding: "8px 14px",
                    height: "auto",
                  },
                }}
              ></TextField>
 

              <TextField
                placeholder="Quantity of Gas"
                type="number"
                sx={{
                  width: "250px",
                  borderRadius: "5px",
                  border: "1px solid #D9D9D966",
                  "& .MuiInputBase-input": {
                    padding: "6px 12px",
                    height: "auto",
                  },
                }}
              ></TextField>
 

              <TextField
                placeholder="Quantity of Gas"
                type="number"
                sx={{
                  width: "250px",
                  borderRadius: "5px",
                  border: "1px solid #D9D9D966",
                  "& .MuiInputBase-input": {
                    padding: "6px 12px",
                    height: "auto",
                  },
                }}
              >
 
 <TextField
                placeholder="Quantity of Gas"
                type="number"
                sx={{
                  width: "250px",
                  borderRadius: "5px",
                  border: "1px solid #D9D9D966",
                  "& .MuiInputBase-input": {
                    padding: "6px 12px",
                    height: "auto",
                  },
                }}
 
<Grid2
            sx={{
              width: "100%",
              display: "flex",
              flexDirection: "column",
              mt:"25px",
            }}
          >
            <ProsessEmissonVenting></ProsessEmissonVenting>
          </Grid2>
 

                flexDirection:"column",
 
xs={12} key={index}
 
item xs={12} key={index}
 

              gap:"30px"
 

              mt:""
 

            sx={{
              width: "100%",
              display: "flex",
              flexDirection: "column",
              gap: "30px",
            }}
 

            height: "89vh",
 

            height: "89vh",
 

            height: "89vh",
 
container spacing={4}
 

              gap: "30px",
 
ProcessEmission/
 
sx={{display:""}}
 

import React, { useState } from "react";
 


    // Add a new empty row if there are no rows left
 


    // If the current row is complete and it’s the last row, add a new row
 


    // Check if the current row is complete
 

  // Initialize fields with one empty row
 
../../../../assets/images/emission_logo.svg
 
../../../../assets/images/refri_logo.svg
 
refri_logo
 
Refrigerant Data
 
../../../assets/images/X_logo.svg
 
../../../assets/images/refri_logo.svg
 
../../../assets/images/TrashS.svg
 
../../../assets/images/down_arrow.svg
 
../../../assets/images/emisson_logo.svg
 

import porces_Logo from "../../../assets/images/emisson_logo.svg";
 

                sx={{
                 
                }}
 
 width: "272px",
                  borderRadius: "5px",
                  border: "1px solid #D9D9D966",
                  "& .MuiSelect-icon": {
                    display: "none",
                  },
                  "& .MuiInputBase-input": {
                    padding: "10px 14px 10px 14px",
                    height: "8px",
                  },
 
sx={{
                  width: "272px",
                  
                  borderRadius: "5px",
                  border: "1px solid #D9D9D966",
                  "& .MuiSelect-icon": {
                    display: "none",
                  },
                  "& .MuiInputBase-input": {
                    padding: "10px 14px 10px 14px",
                    height: "8px",
                  },
                }}
 

                display: "flex",
                alignItems: "flex-start",
                gap: "20px",
                flexWrap: "wrap",
                flexDirection:"column"
 

                Type of Process Emission
 

                                  Select Unit
 

                            <MenuItem value="Unit2">Unit2</MenuItem>
                            <MenuItem value="Unit3">Unit3</MenuItem>
 

                              Select Type
 

                              Select Type
 

        <DialogActions>
          <Button  color="primary">
            Close
          </Button>
        </DialogActions>
 

                            Unit
 

                            Unit
 

                                  Select Unit
 

                            Quantity
 
Types of Refrigerant
 

                Input the type and amount of refrigerant used to account for
                emissions from refrigerant Consumption.
 
"../../../assets/images/x_logo.svg"
 

import x_logo from "../../../assets/images/x_logo.svg
 
cross_logo
 

import cross_logo from "../../../assets/images/cross_logo.svg"
 
 <svg width="80" height="95" viewBox="0 0 113 113" fill="none">
                <circle
                  cx="56.5"
                  cy="56.5"
                  r="56"
                  fill="url(#paint0_linear_939_5057)"
                />
                <path
                  d="M34.0957 56.3002L49.0854 71.29L78.9071 41.4683"
                  stroke="white"
                  strokeWidth="8.83606"
                />
                <defs>
                  <linearGradient
                    id="paint0_linear_939_5057"
                    x1="0.5"
                    y1="0.5"
                    x2="130.171"
                    y2="27.4392"
                    gradientUnits="userSpaceOnUse"
                  >
                    <stop stopColor="#51ADAC" />
                    <stop offset="1" stopColor="#4FA874" />
                  </linearGradient>
                </defs>
              </svg>
 

import refri_logo from "../../../assets/images/refri_logo.svg";
 

                <img src={cross_logo} alt="dot-icon" height="24px" width="24px" />
 

import refri_logo from "../../../assets/images/refri_logo.svg";
 

import dot_Icon from "../../../assets/images/DotsThreeVertical.svg";
 

          // height:"550px",
 

          // width: "1100px",
 

        <DialogTitle>Add More Data</DialogTitle>
 

import trash from "../../../assets/images/TrashS.svg";
 
// Set a maximum height
 
// Adjust the height as needed
 
/ Set a maximum width
 
 // Adjust the width as needed
 

        onClose={onClose}
 

        open={open}
 
style={{width:"100%", height:"60vh"}
 
// ProcessEmissionReports.js
import React, { useState } from "react";
import {
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Typography,
  Box,
  TextField,
  MenuItem,
  Grid2
} from "@mui/material";
import down_arrow from "../../../assets/images/down_arrow.svg";
import trash from "../../../assets/images/TrashS.svg";
import refri_logo from "../../../assets/images/refri_logo.svg";
import dot_Icon from "../../../assets/images/DotsThreeVertical.svg";

function ProcessEmissionReports({ onClose }) {
  // Initialize fields with one empty row
  const [fields, setFields] = useState([{ fuel: "", quantity: "", unit: "" }]);

  const handleChange = (index, event) => {
    const { name, value } = event.target;
    const updatedFields = [...fields];
    updatedFields[index][name] = value;
    setFields(updatedFields);

    // Check if the current row is complete
    const isRowComplete =
      updatedFields[index].fuel &&
      updatedFields[index].quantity &&
      updatedFields[index].unit;

    // If the current row is complete and it’s the last row, add a new row
    if (isRowComplete && index === fields.length - 1) {
      setFields([...updatedFields, { fuel: "", quantity: "", unit: "" }]);
    }
  };

  const handleDelete = (index) => {
    const updatedFields = fields.filter((_, i) => i !== index);

    // Add a new empty row if there are no rows left
    if (updatedFields.length === 0) {
      updatedFields.push({ fuel: "", quantity: "", unit: "" });
    }

    setFields(updatedFields);
  };

  return (
    <div>
     <Grid2
          sx={{
            padding: "25px 45px",
            width: "1100px",
            bgcolor: "#ffffff",
            display: "flex",
            height:"550px",
            flexDirection: "column",
            gap: "30px",
            borderRadius: "16px",
          }}
        >
      <DialogTitle>Add More Data</DialogTitle>
      <DialogContent>
       
          <Grid2
            sx={{
              width: "100%",
              display: "flex",
              flexDirection: "column",
              gap: "30px",
            }}
          >
            <Grid2 sx={{ display: "flex", flexDirection: "column", gap: "4px" }}>
              <div
                style={{
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "space-between",
                  gap: "6px",
                  width: "100%",
                }}
              >
                <div style={{ display: "flex", alignItems: "center", gap: "6px" }}>
                  <img src={refri_logo} height="15px" width="10px" alt="fuel-logo" />
                  <h2
                    style={{
                      fontSize: "16px",
                      fontWeight: "600",
                      lineHeight: "28px",
                      color: "#000000",
                      margin: 0,
                    }}
                  >
                    Refrigerant Data
                  </h2>
                </div>
                <img src={dot_Icon} alt="dot-icon" height="24px" width="24px" />
              </div>
              <Typography fontSize="12px" fontWeight="400" lineHeight="22.4px" color="#717171">
                Input the type and amount of refrigerant used to account for emissions from refrigerant Consumption.
              </Typography>
            </Grid2>

            <Grid2 container spacing={2}>
              {fields.map((field, index) => (
                <Grid2 item xs={12} key={index}>
                  <Box
                    sx={{
                      display: "flex",
                      alignItems: "flex-start",
                      gap: "20px",
                      flexWrap: "wrap",
                    }}
                  >
                    <Box
                      sx={{
                        display: "flex",
                        flexDirection: "column",
                        gap: "4px",
                        alignItems: "flex-start",
                      }}
                    >
                      <Typography variant="body2" fontSize="12px" fontWeight="400" lineHeight="19.6px">
                        Types of Refrigerant
                      </Typography>
                      <TextField
                        select
                        name="fuel"
                        value={field.fuel}
                        onChange={(e) => handleChange(index, e)}
                        sx={{
                          width: "332.5px",
                          borderRadius: "5px",
                          border: "1px solid #D9D9D966",
                          "& .MuiSelect-icon": {
                            display: "none",
                          },
                          "& .MuiInputBase-input": {
                            padding: "10px 14px",
                            height: "8px",
                          },
                        }}
                        SelectProps={{
                          displayEmpty: true,
                        }}
                      >
                        <MenuItem value="" disabled>
                          <Grid2
                            flexDirection="row"
                            display="flex"
                            justifyContent="space-between"
                            alignItems="center"
                          >
                            <Typography fontSize="13px" fontWeight="500" lineHeight="22.4px" color="#B0B0B0">
                              Select Type
                            </Typography>
                            <img src={down_arrow} width="12px" height="7px" alt="Logo" />
                          </Grid2>
                        </MenuItem>
                        <MenuItem value="Fuel">Fuel</MenuItem>
                        <MenuItem value="Fuel2">Fuel2</MenuItem>
                        <MenuItem value="Fuel3">Fuel3</MenuItem>
                      </TextField>
                    </Box>

                    {field.fuel && (
                      <>
                        <Box
                          sx={{
                            display: "flex",
                            flexDirection: "column",
                            gap: "4px",
                            alignItems: "flex-start",
                          }}
                        >
                          <Typography variant="body2" fontSize="12px" fontWeight="400" lineHeight="19.6px">
                            Quantity
                          </Typography>
                          <TextField
                            name="quantity"
                            value={field.quantity}
                            placeholder="Quantity"
                            onChange={(e) => handleChange(index, e)}
                            sx={{
                              width: "332.5px",
                              borderRadius: "5px",
                              border: "1px solid #D9D9D966",
                              "& .MuiInputBase-input": {
                                padding: "10px 14px",
                                height: "auto",
                              },
                            }}
                          />
                        </Box>

                        <Box
                          sx={{
                            display: "flex",
                            flexDirection: "column",
                            gap: "4px",
                            alignItems: "flex-start",
                          }}
                        >
                          <Typography variant="body2" fontSize="12px" fontWeight="400" lineHeight="19.6px">
                            Unit
                          </Typography>
                          <TextField
                            select
                            name="unit"
                            value={field.unit}
                            onChange={(e) => handleChange(index, e)}
                            sx={{
                              width: "332.5px",
                              borderRadius: "5px",
                              border: "1px solid #D9D9D966",
                              "& .MuiSelect-icon": {
                                display: "none",
                              },
                              "& .MuiInputBase-input": {
                                padding: "10px 14px 10px 14px",
                                height: "8px",
                              },
                            }}
                            SelectProps={{
                              displayEmpty: true,
                            }}
                          >
                            <MenuItem value="" disabled>
                              <Grid2
                                flexDirection="row"
                                display="flex"
                                justifyContent="space-between"
                                alignItems="center"
                              >
                                <Typography fontSize="13px" fontWeight="500" lineHeight="22.4px" color="#B0B0B0">
                                  Select Unit
                                </Typography>
                                <img src={down_arrow} width="12px" height="7px" alt="Logo" />
                              </Grid2>
                            </MenuItem>
                            <MenuItem value="Unit1">Unit1</MenuItem>
                            <MenuItem value="Unit2">Unit2</MenuItem>
                            <MenuItem value="Unit3">Unit3</MenuItem>
                          </TextField>
                        </Box>
                      </>
                    )}
                    {field.quantity || field.unit ? (
                      <Box
                        sx={{
                          display: "flex",
                          alignItems: "center",
                          justifyContent: "center",
                          flexDirection: "column",
                          gap: "8px",
                          cursor: "pointer",
                        }}
                      >
                        <img
                          onClick={() => handleDelete(index)}
                          src={trash}
                          alt="Delete"
                          style={{
                            width: "20px",
                            height: "55px",
                            marginTop: "6px",
                            marginRight: "15px",
                          }}
                        />
                      </Box>
                    ) : null}
                  </Box>
                </Grid2>
              ))}
            </Grid2>
          </Grid2>
      </DialogContent>
      <DialogActions>
        <Button onClick={onClose} color="primary">
          Close
        </Button>
      </DialogActions>
      </Grid2>
    </div>
  );
}

export default ProcessEmissionReports;

 
// ProcessEmissionReports.js
import React, { useState } from "react";
import {
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Typography,
  Box,
  TextField,
  MenuItem,
  Grid2
} from "@mui/material";
import down_arrow from "../../../assets/images/down_arrow.svg";
import trash from "../../../assets/images/TrashS.svg";
import refri_logo from "../../../assets/images/refri_logo.svg";
import dot_Icon from "../../../assets/images/DotsThreeVertical.svg";

function ProcessEmissionReports({ onClose }) {
  // Initialize fields with one empty row
  const [fields, setFields] = useState([{ fuel: "", quantity: "", unit: "" }]);

  const handleChange = (index, event) => {
    const { name, value } = event.target;
    const updatedFields = [...fields];
    updatedFields[index][name] = value;
    setFields(updatedFields);

    // Check if the current row is complete
    const isRowComplete =
      updatedFields[index].fuel &&
      updatedFields[index].quantity &&
      updatedFields[index].unit;

    // If the current row is complete and it’s the last row, add a new row
    if (isRowComplete && index === fields.length - 1) {
      setFields([...updatedFields, { fuel: "", quantity: "", unit: "" }]);
    }
  };

  const handleDelete = (index) => {
    const updatedFields = fields.filter((_, i) => i !== index);

    // Add a new empty row if there are no rows left
    if (updatedFields.length === 0) {
      updatedFields.push({ fuel: "", quantity: "", unit: "" });
    }

    setFields(updatedFields);
  };

  return (
    <div>
     <Grid2
          sx={{
            padding: "25px 45px",
            width: "1100px",
            bgcolor: "#ffffff",
            display: "flex",
            height:"550px",
            flexDirection: "column",
            gap: "30px",
            borderRadius: "16px",
          }}
        >
      <DialogTitle>Add More Data</DialogTitle>
      <DialogContent>
       
          <Grid2
            sx={{
              width: "100%",
              display: "flex",
              flexDirection: "column",
              gap: "30px",
            }}
          >
            <Grid2 sx={{ display: "flex", flexDirection: "column", gap: "4px" }}>
              <div
                style={{
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "space-between",
                  gap: "6px",
                  width: "100%",
                }}
              >
                <div style={{ display: "flex", alignItems: "center", gap: "6px" }}>
                  <img src={refri_logo} height="15px" width="10px" alt="fuel-logo" />
                  <h2
                    style={{
                      fontSize: "16px",
                      fontWeight: "600",
                      lineHeight: "28px",
                      color: "#000000",
                      margin: 0,
                    }}
                  >
                    Refrigerant Data
                  </h2>
                </div>
                <img src={dot_Icon} alt="dot-icon" height="24px" width="24px" />
              </div>
              <Typography fontSize="12px" fontWeight="400" lineHeight="22.4px" color="#717171">
                Input the type and amount of refrigerant used to account for emissions from refrigerant Consumption.
              </Typography>
            </Grid2>

            <Grid2 container spacing={2}>
              {fields.map((field, index) => (
                <Grid2 item xs={12} key={index}>
                  <Box
                    sx={{
                      display: "flex",
                      alignItems: "flex-start",
                      gap: "20px",
                      flexWrap: "wrap",
                    }}
                  >
                    <Box
                      sx={{
                        display: "flex",
                        flexDirection: "column",
                        gap: "4px",
                        alignItems: "flex-start",
                      }}
                    >
                      <Typography variant="body2" fontSize="12px" fontWeight="400" lineHeight="19.6px">
                        Types of Refrigerant
                      </Typography>
                      <TextField
                        select
                        name="fuel"
                        value={field.fuel}
                        onChange={(e) => handleChange(index, e)}
                        sx={{
                          width: "332.5px",
                          borderRadius: "5px",
                          border: "1px solid #D9D9D966",
                          "& .MuiSelect-icon": {
                            display: "none",
                          },
                          "& .MuiInputBase-input": {
                            padding: "10px 14px",
                            height: "8px",
                          },
                        }}
                        SelectProps={{
                          displayEmpty: true,
                        }}
                      >
                        <MenuItem value="" disabled>
                          <Grid2
                            flexDirection="row"
                            display="flex"
                            justifyContent="space-between"
                            alignItems="center"
                          >
                            <Typography fontSize="13px" fontWeight="500" lineHeight="22.4px" color="#B0B0B0">
                              Select Type
                            </Typography>
                            <img src={down_arrow} width="12px" height="7px" alt="Logo" />
                          </Grid2>
                        </MenuItem>
                        <MenuItem value="Fuel">Fuel</MenuItem>
                        <MenuItem value="Fuel2">Fuel2</MenuItem>
                        <MenuItem value="Fuel3">Fuel3</MenuItem>
                      </TextField>
                    </Box>

                    {field.fuel && (
                      <>
                        <Box
                          sx={{
                            display: "flex",
                            flexDirection: "column",
                            gap: "4px",
                            alignItems: "flex-start",
                          }}
                        >
                          <Typography variant="body2" fontSize="12px" fontWeight="400" lineHeight="19.6px">
                            Quantity
                          </Typography>
                          <TextField
                            name="quantity"
                            value={field.quantity}
                            placeholder="Quantity"
                            onChange={(e) => handleChange(index, e)}
                            sx={{
                              width: "332.5px",
                              borderRadius: "5px",
                              border: "1px solid #D9D9D966",
                              "& .MuiInputBase-input": {
                                padding: "10px 14px",
                                height: "auto",
                              },
                            }}
                          />
                        </Box>

                        <Box
                          sx={{
                            display: "flex",
                            flexDirection: "column",
                            gap: "4px",
                            alignItems: "flex-start",
                          }}
                        >
                          <Typography variant="body2" fontSize="12px" fontWeight="400" lineHeight="19.6px">
                            Unit
                          </Typography>
                          <TextField
                            select
                            name="unit"
                            value={field.unit}
                            onChange={(e) => handleChange(index, e)}
                            sx={{
                              width: "332.5px",
                              borderRadius: "5px",
                              border: "1px solid #D9D9D966",
                              "& .MuiSelect-icon": {
                                display: "none",
                              },
                              "& .MuiInputBase-input": {
                                padding: "10px 14px 10px 14px",
                                height: "8px",
                              },
                            }}
                            SelectProps={{
                              displayEmpty: true,
                            }}
                          >
                            <MenuItem value="" disabled>
                              <Grid2
                                flexDirection="row"
                                display="flex"
                                justifyContent="space-between"
                                alignItems="center"
                              >
                                <Typography fontSize="13px" fontWeight="500" lineHeight="22.4px" color="#B0B0B0">
                                  Select Unit
                                </Typography>
                                <img src={down_arrow} width="12px" height="7px" alt="Logo" />
                              </Grid2>
                            </MenuItem>
                            <MenuItem value="Unit1">Unit1</MenuItem>
                            <MenuItem value="Unit2">Unit2</MenuItem>
                            <MenuItem value="Unit3">Unit3</MenuItem>
                          </TextField>
                        </Box>
                      </>
                    )}
                    {field.quantity || field.unit ? (
                      <Box
                        sx={{
                          display: "flex",
                          alignItems: "center",
                          justifyContent: "center",
                          flexDirection: "column",
                          gap: "8px",
                          cursor: "pointer",
                        }}
                      >
                        <img
                          onClick={() => handleDelete(index)}
                          src={trash}
                          alt="Delete"
                          style={{
                            width: "20px",
                            height: "55px",
                            marginTop: "6px",
                            marginRight: "15px",
                          }}
                        />
                      </Box>
                    ) : null}
                  </Box>
                </Grid2>
              ))}
            </Grid2>
          </Grid2>
      </DialogContent>
      <DialogActions>
        <Button onClick={onClose} color="primary">
          Close
        </Button>
      </DialogActions>
      </Grid2>
    </div>
  );
}

export default ProcessEmissionReports;

 

      <></>
 

        </Grid2>
 
Grid
 
// ProcessEmissionReports.js
import React from "react";
import {
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Typography,
} from "@mui/material";

function ProcessEmissionReports({ onClose }) {
  return (
    <div>
      <DialogTitle>Add More Data</DialogTitle>
      <DialogContent>
        <Typography>
          This is where you can add more data or forms for user input.
        </Typography>
        {/* Add form fields or other elements as needed */}
      </DialogContent>
      <DialogActions>
        <Button onClick={onClose} color="primary">
          Close
        </Button>
      </DialogActions>
    </div>
  );
}

export default ProcessEmissionReports;

 

      {/* Popup Dialog Component */}
      <Dialog open={open} onClose={handleClose}>
        <ProcessEmissionReports />
      </Dialog>
 
 <Grid2>
            <Button
              sx={{
                borderRadius: "32px",
                border: "1px solid #28814D",
                padding: "8px 18px 8px 18px",
                height: "38px",
                fontWeight: "400",
                fontSize: "12px",
                width: "100px",
                textTransform: "capitalize",
                color: "#28814D",
              }}
              onClick={handleClickOpen}
            >
              Add More
            </Button>
          </Grid2>
 

      <Dialog open={open} onClose={handleClose}>
        <DialogTitle>Add More Data</DialogTitle>
        <DialogContent>
          <Typography>
            This is where you can add more data or forms for user input.
          </Typography>
          {/* Add form fields or other elements as needed */}
        </DialogContent>
        <DialogActions>
          <Button onClick={handleClose} color="primary">
            Close
          </Button>
        </DialogActions>
      </Dialog>
 
 Grid, Button,
 

    </div>
 

import { TextField, MenuItem } from "@mui/material";
import down_arrow from "../../../assets/images/down_arrow.svg";
import Box from "@mui/material/Box";
import trash from "../../../assets/images/TrashS.svg";
 

            border: "1px solid #28814D",
 

            color:"white",
 

          Add Data
 
Add Data
 
<Grid2
        sx={{
          padding: "25px 70px 0px 70px",
          width: "100%",
          height: "125px",
          display: "flex",
          flexDirection: "row",
          gap:"10px",
        }}
      >
        <Button
          sx={{
            borderRadius: "32px",
            border: "1px solid #28814D",
            padding: "8px 18px 8px 18px",
            height: "38px",
            fontWeight: "400",
            fontSize: "12px",
            width: "100px",
            textTransform: "capitalize",
            color: "#28814D",
          }}
        >
          Add Data
        </Button>
        <Button
          sx={{
            borderRadius: "32px",
            border: "1px solid #28814D",
            padding: "8px 18px 8px 18px",
            height: "38px",
            fontWeight: "400",
            fontSize: "12px",
            width: "100px",
            textTransform: "capitalize",
            color: "#28814D",
          }}
        >
          Add Data
        </Button>
      </Grid2>
 

          left:"0"
 

          marginRight:"0"
 

          bgcolor: "#ffffff",
 

                Oil and Gas Exploration
 
as-driven Pneumatic Controllers and Pumps
 

              Well Completion
 
ven Pneumatic Controller CH4 Emission in Gas Processing Segment
 

              Offshore 
 

        <table
          style={{
            width: "100%",
            borderCollapse: "collapse",
            borderRadius: "5px",
            overflow: "hidden",
            tableLayout: "fixed", // Ensures equal column width
          }}
        >
          <tr style={{ border: "1px solid  #EEEEEE" }}>
            <td
              style={{
                textAlign: "left",
                fontWeight: "bold",
                padding: "10px",
                marginRight: "10px",
              }}
            >
              <Typography fontWeight="400" fontSize="10px">
                Type of Process Emission
              </Typography>
            </td>
            <td
              style={{
                textAlign: "left",
                fontWeight: "bold",
                padding: "10px",
                marginRight: "10px",
              }}
            >
              <Typography fontWeight="400" fontSize="10px">
                Category
              </Typography>
            </td>
            <td
              style={{
                textAlign: "left",
                fontWeight: "bold",
                padding: "10px",
                marginRight: "10px",
              }}
            >
              <Typography fontWeight="400" fontSize="10px">
                Sub Category
              </Typography>
            </td>
            <td
              style={{
                textAlign: "left",
                fontWeight: "bold",
                padding: "10px",
                marginRight: "10px",
              }}
            >
              <Typography fontWeight="400" fontSize="10px">
                Sub Sub Category
              </Typography>
            </td>
            <td
              style={{
                textAlign: "left",
                fontWeight: "bold",
                padding: "10px",
                marginRight: "10px",
              }}
            >
              <Typography fontWeight="400" fontSize="10px">
                Sub Sub Sub Category
              </Typography>
            </td>
            <td
              style={{
                textAlign: "left",
                fontWeight: "bold",
                padding: "10px",
                marginRight: "10px",
              }}
            >
              <Typography fontWeight="400" fontSize="10px">
                Quantity
              </Typography>
            </td>
          </tr>
        </table>
 

                Quantity
 
Sub Sub Sub Category
 
Sub Sub Category
 
 Sub Category
 
Category
 
Type of Process Emission
 

              12 10^3*m3
 

              Refining 
 
<table
          style={{
            width: "100%",
            borderCollapse: "collapse",
            borderRadius: "5px",
            overflow: "hidden",
            tableLayout: "fixed", // Ensures equal column width
          }}
        >
          <tr style={{border:"1px solid  #EEEEEE"}}>
            <td
              style={{
                textAlign: "left",
                fontWeight: "bold",
                padding: "10px",
                marginRight: "10px",
              }}
            >
              <Typography fontWeight="400" fontSize="10px">
                Type of Process Emission
              </Typography>
            </td>
            <td
              style={{
                textAlign: "left",
                fontWeight: "bold",
                padding: "10px",
                marginRight: "10px",
              }}
            >
              <Typography fontWeight="400" fontSize="10px">
                Category
              </Typography>
            </td>
            <td
              style={{
                textAlign: "left",
                fontWeight: "bold",
                padding: "10px",
                marginRight: "10px",
              }}
            >
              <Typography fontWeight="400" fontSize="10px">
                Sub Category
              </Typography>
            </td>
            <td
              style={{
                textAlign: "left",
                fontWeight: "bold",
                padding: "10px",
                marginRight: "10px",
              }}
            >
              <Typography fontWeight="400" fontSize="10px">
                Sub Sub Category
              </Typography>
            </td>
            <td
              style={{
                textAlign: "left",
                fontWeight: "bold",
                padding: "10px",
                marginRight: "10px",
              }}
            >
              <Typography fontWeight="400" fontSize="10px">
                Sub Sub Sub Category
              </Typography>
            </td>
            <td
              style={{
                textAlign: "left",
                fontWeight: "bold",
                padding: "10px",
                marginRight: "10px",
              }}
            >
              <Typography fontWeight="400" fontSize="10px">
                Quantity
              </Typography>
            </td>
          </tr>
        </table>
 
  <table
          style={{
            width: "100%",
            borderCollapse: "collapse",
            borderRadius: "5px",
            overflow: "hidden",
            tableLayout: "fixed", // Ensures equal column width
          }}
        >
          <tr>
            <th
              style={{
                textAlign: "left",
                fontWeight: "bold",
                background: "#E6F8F2",
                padding: "10px",
                marginRight: "10px",
              }}
            >
              <Typography fontWeight="400" fontSize="10px">
                Type of Process Emission
              </Typography>
            </th>
            <th
              style={{
                textAlign: "left",
                fontWeight: "bold",
                backgroundColor: "rgba(200, 200, 200, 0.5)",
                padding: "10px",
                background: "#E6F8F2",
                marginRight: "10px",
              }}
            >
              <Typography fontWeight="400" fontSize="10px">
                Category
              </Typography>
            </th>
            <th
              style={{
                textAlign: "left",
                fontWeight: "bold",
                backgroundColor: "rgba(200, 200, 200, 0.5)",
                padding: "10px",
                background: "#E6F8F2",
                marginRight: "10px",
              }}
            >
              <Typography fontWeight="400" fontSize="10px">
                Sub Category
              </Typography>
            </th>
            <th
              style={{
                textAlign: "left",
                fontWeight: "bold",
                backgroundColor: "rgba(200, 200, 200, 0.5)",
                padding: "10px",
                background: "#E6F8F2",
                marginRight: "10px",
              }}
            >
              <Typography fontWeight="400" fontSize="10px">
                Sub Sub Category
              </Typography>
            </th>
            <th
              style={{
                textAlign: "left",
                fontWeight: "bold",
                backgroundColor: "rgba(200, 200, 200, 0.5)",
                padding: "10px",
                background: "#E6F8F2",
                marginRight: "10px",
              }}
            >
              <Typography fontWeight="400" fontSize="10px">
                Sub Sub Sub Category
              </Typography>
            </th>
            <th
              style={{
                textAlign: "left",
                fontWeight: "bold",
                backgroundColor: "rgba(200, 200, 200, 0.5)",
                padding: "10px",
                marginRight: "10px",
                background: "#E6F8F2",
              }}
            >
              <Typography fontWeight="400" fontSize="10px">
                Quantity
              </Typography>
            </th>
          </tr>
        </table>
 

                Quantity
 
Sub Sub Sub Category
 

              Natural Gas Processing
 

              Oil and Gas Exploration
 
Sub Sub Category
 
Sub Category
 
Categor
 
Type of Process Emission
 

        <table
          style={{
            width: "100%",
            borderCollapse: "collapse",
            borderRadius: "5px",
            overflow: "hidden",
            tableLayout: "fixed", // Ensures equal column width
          }}
        >
          <tr>
            <td
              style={{
                textAlign: "left",
                fontWeight: "bold",
                background: "#E6F8F2",
                padding: "10px",
                marginRight: "10px",
              }}
            >
              <Typography fontWeight="400" fontSize="10px">
                Type of Process Emission
              </Typography>
            </td>
            <td
              style={{
                textAlign: "left",
                fontWeight: "bold",
                backgroundColor: "rgba(200, 200, 200, 0.5)",
                padding: "10px",
                background: "#E6F8F2",
                marginRight: "10px",
              }}
            >
              <Typography fontWeight="400" fontSize="10px">
                Category
              </Typography>
            </td>
            <td
              style={{
                textAlign: "left",
                fontWeight: "bold",
                backgroundColor: "rgba(200, 200, 200, 0.5)",
                padding: "10px",
                background: "#E6F8F2",
                marginRight: "10px",
              }}
            >
              <Typography fontWeight="400" fontSize="10px">
                Sub Category
              </Typography>
            </td>
            <td
              style={{
                textAlign: "left",
                fontWeight: "bold",
                backgroundColor: "rgba(200, 200, 200, 0.5)",
                padding: "10px",
                background: "#E6F8F2",
                marginRight: "10px",
              }}
            >
              <Typography fontWeight="400" fontSize="10px">
                Sub Sub Category
              </Typography>
            </td>
            <td
              style={{
                textAlign: "left",
                fontWeight: "bold",
                backgroundColor: "rgba(200, 200, 200, 0.5)",
                padding: "10px",
                background: "#E6F8F2",
                marginRight: "10px",
              }}
            >
              <Typography fontWeight="400" fontSize="10px">
                Sub Sub Sub Category
              </Typography>
            </td>
            <td
              style={{
                textAlign: "left",
                fontWeight: "bold",
                backgroundColor: "rgba(200, 200, 200, 0.5)",
                padding: "10px",
                marginRight: "10px",
                background: "#E6F8F2",
              }}
            >
              <Typography fontWeight="400" fontSize="10px">
                Quantity
              </Typography>
            </td>
          </tr>
        </table>
 

        <table
          style={{
            width: "100%",
            borderCollapse: "collapse",
            borderRadius: "5px",
            overflow: "hidden",
            tableLayout: "fixed", // Ensures equal column width
          }}
        >
          <tr>
            <td
              style={{
                textAlign: "left",
                fontWeight: "bold",
                background: "#E6F8F2",
                padding: "10px",
                marginRight: "10px",
              }}
            >
              <Typography fontWeight="400" fontSize="10px">
                Type of Process Emission
              </Typography>
            </td>
            <td
              style={{
                textAlign: "left",
                fontWeight: "bold",
                backgroundColor: "rgba(200, 200, 200, 0.5)",
                padding: "10px",
                background: "#E6F8F2",
                marginRight: "10px",
              }}
            >
              <Typography fontWeight="400" fontSize="10px">
                Category
              </Typography>
            </td>
            <td
              style={{
                textAlign: "left",
                fontWeight: "bold",
                backgroundColor: "rgba(200, 200, 200, 0.5)",
                padding: "10px",
                background: "#E6F8F2",
                marginRight: "10px",
              }}
            >
              <Typography fontWeight="400" fontSize="10px">
                Sub Category
              </Typography>
            </td>
            <td
              style={{
                textAlign: "left",
                fontWeight: "bold",
                backgroundColor: "rgba(200, 200, 200, 0.5)",
                padding: "10px",
                background: "#E6F8F2",
                marginRight: "10px",
              }}
            >
              <Typography fontWeight="400" fontSize="10px">
                Sub Sub Category
              </Typography>
            </td>
            <td
              style={{
                textAlign: "left",
                fontWeight: "bold",
                backgroundColor: "rgba(200, 200, 200, 0.5)",
                padding: "10px",
                background: "#E6F8F2",
                marginRight: "10px",
              }}
            >
              <Typography fontWeight="400" fontSize="10px">
                Sub Sub Sub Category
              </Typography>
            </td>
            <td
              style={{
                textAlign: "left",
                fontWeight: "bold",
                backgroundColor: "rgba(200, 200, 200, 0.5)",
                padding: "10px",
                marginRight: "10px",
                background: "#E6F8F2",
              }}
            >
              <Typography fontWeight="400" fontSize="10px">
                Quantity
              </Typography>
            </td>
          </tr>
        </table>
 

                backgroundColor: "rgba(200, 200, 200, 0.5)",
 

                backgroundColor: "rgba(200, 200, 200, 0.5)",
 

                backgroundColor: "rgba(200, 200, 200, 0.5)",
 

                backgroundColor: "rgba(200, 200, 200, 0.5)",
 

                backgroundColor: "rgba(200, 200, 200, 0.5)",
 
black
 

            ,
 

                background: "#E6F8F2",
 

                background: "#E6F8F2",
 

                background: "#E6F8F2",
 

                background: "#E6F8F2",
 

                background: "#E6F8F2",
 

                background: "#E6F8F2",
 

                    background: "#E6F8F2",
 

              background: "#ffffff",
 
    <Grid2
            sx={{
              display: "flex",
              flexDirection: "column",
              border: "1px solid #EEEEEE",
              padding: "9px",
              borderRadius: "8px",
              background: "#ffffff",
            }}
          >
            <table
              style={{
                width: "100%",
                borderCollapse: "collapse",
                borderRadius: "5px",
                overflow: "hidden",
                tableLayout: "fixed", // Ensures equal column width
              }}
            >
              <tr>
                <th
                  style={{
                    textAlign: "left",
                    fontWeight: "bold",
                    background: "#E6F8F2",
                    padding: "10px",
                    marginRight: "10px",
                  }}
                >
                  <Typography fontWeight="400" fontSize="10px">
                    Type of Process Emission
                  </Typography>
                </th>
                <th
                  style={{
                    textAlign: "left",
                    fontWeight: "bold",
                    background: "#E6F8F2",
                    padding: "10px",
                    marginRight: "10px",
                  }}
                >
                  <Typography fontWeight="400" fontSize="10px">
                    Category
                  </Typography>
                </th>
                <th
                  style={{
                    textAlign: "left",
                    fontWeight: "bold",
                    background: "#E6F8F2",
                    padding: "10px",
                    marginRight: "10px",
                  }}
                >
                  <Typography fontWeight="400" fontSize="10px">
                    Sub Category
                  </Typography>
                </th>
                <th
                  style={{
                    textAlign: "left",
                    fontWeight: "bold",
                    background: "#E6F8F2",
                    padding: "10px",
                    marginRight: "10px",
                  }}
                >
                  <Typography fontWeight="400" fontSize="10px">
                    Sub Sub Category
                  </Typography>
                </th>
                <th
                  style={{
                    textAlign: "left",
                    fontWeight: "bold",
                    background: "#E6F8F2",
                    padding: "10px",
                    marginRight: "10px",
                  }}
                >
                  <Typography fontWeight="400" fontSize="10px">
                    Sub Sub Sub Category
                  </Typography>
                </th>
                <th
                  style={{
                    textAlign: "left",
                    fontWeight: "bold",
                    background: "#E6F8F2",
                    padding: "10px",
                    marginRight: "10px",
                  }}
                >
                  <Typography fontWeight="400" fontSize="10px">
                    Quantity
                  </Typography>
                </th>
              </tr>

              {/* Dummy Data Rows */}
              <tr>
                <td style={{ padding: "10px", marginRight: "10px" }}>
                  Emission Type 1
                </td>
                <td style={{ padding: "10px", marginRight: "10px" }}>
                  Category A
                </td>
                <td style={{ padding: "10px", marginRight: "10px" }}>
                  Sub Cat 1
                </td>
                <td style={{ padding: "10px", marginRight: "10px" }}>
                  Sub Sub Cat 1
                </td>
                <td style={{ padding: "10px", marginRight: "10px" }}>
                  Sub Sub Sub Cat 1
                </td>
                <td style={{ padding: "10px", marginRight: "10px" }}>100</td>
              </tr>
              <tr>
                <td style={{ padding: "10px", marginRight: "10px" }}>
                  Emission Type 2
                </td>
                <td style={{ padding: "10px", marginRight: "10px" }}>
                  Category B
                </td>
                <td style={{ padding: "10px", marginRight: "10px" }}>
                  Sub Cat 2
                </td>
                <td style={{ padding: "10px", marginRight: "10px" }}>
                  Sub Sub Cat 2
                </td>
                <td style={{ padding: "10px", marginRight: "10px" }}>
                  Sub Sub Sub Cat 2
                </td>
                <td style={{ padding: "10px", marginRight: "10px" }}>200</td>
              </tr>
              <tr>
                <td style={{ padding: "10px", marginRight: "10px" }}>
                  Emission Type 3
                </td>
                <td style={{ padding: "10px", marginRight: "10px" }}>
                  Category C
                </td>
                <td style={{ padding: "10px", marginRight: "10px" }}>
                  Sub Cat 3
                </td>
                <td style={{ padding: "10px", marginRight: "10px" }}>
                  Sub Sub Cat 3
                </td>
                <td style={{ padding: "10px", marginRight: "10px" }}>
                  Sub Sub Sub Cat 3
                </td>
                <td style={{ padding: "10px", marginRight: "10px" }}>300</td>
              </tr>
              <tr>
                <td style={{ padding: "10px", marginRight: "10px" }}>
                  Emission Type 4
                </td>
                <td style={{ padding: "10px", marginRight: "10px" }}>
                  Category D
                </td>
                <td style={{ padding: "10px", marginRight: "10px" }}>
                  Sub Cat 4
                </td>
                <td style={{ padding: "10px", marginRight: "10px" }}>
                  Sub Sub Cat 4
                </td>
                <td style={{ padding: "10px", marginRight: "10px" }}>
                  Sub Sub Sub Cat 4
                </td>
                <td style={{ padding: "10px", marginRight: "10px" }}>400</td>
              </tr>
              <tr>
                <td style={{ padding: "10px", marginRight: "10px" }}>
                  Emission Type 5
                </td>
                <td style={{ padding: "10px", marginRight: "10px" }}>
                  Category E
                </td>
                <td style={{ padding: "10px", marginRight: "10px" }}>
                  Sub Cat 5
                </td>
                <td style={{ padding: "10px", marginRight: "10px" }}>
                  Sub Sub Cat 5
                </td>
                <td style={{ padding: "10px", marginRight: "10px" }}>
                  Sub Sub Sub Cat 5
                </td>
                <td style={{ padding: "10px", marginRight: "10px" }}>500</td>
              </tr>
            </table>
          </Grid2>
 

              gap:"16px",
 
<Grid2
            sx={{
              display: "flex",
              flexDirection: "column",
              border: "1px solid #EEEEEE",
              padding: "9px",
              borderRadius: "8px",
              background: "#ffffff",
            }}
          >
            <table
              style={{
                width: "100%",
                borderCollapse: "collapse",
                borderRadius: "5px",
                overflow: "hidden",
                tableLayout: "fixed", // Ensures equal column width
              }}
            >
              <tr>
                <th
                  style={{
                    textAlign: "left",
                    fontWeight: "bold",
                    background: "#E6F8F2",
                    padding: "10px",
                    marginRight: "10px",
                  }}
                >
                  <Typography fontWeight="400" fontSize="10px">
                    Type of Process Emission
                  </Typography>
                </th>
                <th
                  style={{
                    textAlign: "left",
                    fontWeight: "bold",
                    backgroundColor: "rgba(200, 200, 200, 0.5)",
                    padding: "10px",
                    background: "#E6F8F2",
                    marginRight: "10px",
                  }}
                >
                  <Typography fontWeight="400" fontSize="10px">
                    Category
                  </Typography>
                </th>
                <th
                  style={{
                    textAlign: "left",
                    fontWeight: "bold",
                    backgroundColor: "rgba(200, 200, 200, 0.5)",
                    padding: "10px",
                    background: "#E6F8F2",
                    marginRight: "10px",
                  }}
                >
                  <Typography fontWeight="400" fontSize="10px">
                    Sub Category
                  </Typography>
                </th>
                <th
                  style={{
                    textAlign: "left",
                    fontWeight: "bold",
                    backgroundColor: "rgba(200, 200, 200, 0.5)",
                    padding: "10px",
                    background: "#E6F8F2",
                    marginRight: "10px",
                  }}
                >
                  <Typography fontWeight="400" fontSize="10px">
                    Sub Sub Category
                  </Typography>
                </th>
                <th
                  style={{
                    textAlign: "left",
                    fontWeight: "bold",
                    backgroundColor: "rgba(200, 200, 200, 0.5)",
                    padding: "10px",
                    background: "#E6F8F2",
                    marginRight: "10px",
                  }}
                >
                  <Typography fontWeight="400" fontSize="10px">
                    Sub Sub Sub Category
                  </Typography>
                </th>
                <th
                  style={{
                    textAlign: "left",
                    fontWeight: "bold",
                    backgroundColor: "rgba(200, 200, 200, 0.5)",
                    padding: "10px",
                    marginRight: "10px",
                    background: "#E6F8F2",
                  }}
                >
                  <Typography fontWeight="400" fontSize="10px">
                    Quantity
                  </Typography>
                </th>
              </tr>
            </table>
          </Grid2>
 
Input the type and amount of refrigerant used to account for
                emissions from refrigerant Consumption.
 

                gap:"4px",
 

import Button from 
 

      backgroundColor: " #E6F8F2",
 

          backgroundColor: "rgba(200, 200, 200, 0.5)",
 
background:
 
rgba(240, 240, 240, 0.8)
 
  <Grid2 sx={{ display: "flex", flexDirection: "column",border:"1px solid #EEEEEE",padding:"9px 9px 9px 9px", borderRadius:"8px", background:"#ffffff"}}>
            <table
              style={{
                width: "100%",
                borderCollapse: "collapse",
                borderRadius: "5px",
                overflow: "hidden",
                backgroundColor: "rgba(240, 240, 240, 0.8)",
              }}
            >
              <tr>
                <th
                  style={{
                    textAlign: "left",
                    fontWeight: "bold",
                    backgroundColor: "rgba(200, 200, 200, 0.5)",
                  }}
                >
                  <Typography fontWeight="400" fontSize="10px">
                    Type of Process Emission
                  </Typography>
                </th>
                <th
                  style={{
                    textAlign: "left",
                    fontWeight: "bold",
                    backgroundColor: "rgba(200, 200, 200, 0.5)",
                  }}
                >
                  <Typography fontWeight="400" fontSize="10px">
                    Category
                  </Typography>
                </th>
                <th
                  style={{  
                    textAlign: "left",
                    fontWeight: "bold",
                    backgroundColor: "rgba(200, 200, 200, 0.5)",
                  }}
                >
                  <Typography fontWeight="400" fontSize="10px">
                    Sub Category
                  </Typography>
                </th>
                <th
                  style={{
                    textAlign: "left",
                    fontWeight: "bold",
                    backgroundColor: "rgba(200, 200, 200, 0.5)",
                  }}
                >
                  <Typography fontWeight="400" fontSize="10px">
                    Sub Sub Category
                  </Typography>
                </th>
                <th
                  style={{
                    padding: "10px",
                    textAlign: "left",
                    fontWeight: "bold",
                    backgroundColor: "rgba(200, 200, 200, 0.5)",
                  }}
                >
                  <Typography fontWeight="400" fontSize="10px">
                    Sub Sub Sub Category
                  </Typography>
                </th>
                <th
                  style={{
                    padding: "10px",
                    textAlign: "left",
                    fontWeight: "bold",
                    backgroundColor: "rgba(200, 200, 200, 0.5)",
                  }}
                >
                  <Typography fontWeight="400" fontSize="10px">
                    Quantity
                  </Typography>
                </th>
              </tr>
            </table>
          </Grid2>
 

                    width:"150px"
 

                    padding: "10px",
 

                    padding: "10px",
 

                    padding: "10px",
 

                    padding: "10px",
 
 gap: "16px"
 
 none
 
<table border="1">
              <tr>
                <th>Type of Process Emisssion</th>
                <th>Category</th>
                <th>Sub category </th>
                <th>Sub Sub category </th>
                <th>Sub Sub Sub category </th>
                <th>Quantity</th>
              </tr>
            </table>
 
<table border="1">
              <tr>
                <th>Type of Process Emisssion</th>
                <th>Category</th>
                <th>Sub category </th>
                <th>Sub Sub category </th>
                <th>Sub Sub Sub category </th>
                <th>Quantity</th>
              </tr>
            </table>
 

import refri_logo from "../../../assets/images/refri_logo.svg";
 

                  Refrigerant Data
 
 <Grid2 container spacing={2}>
            {fields.map((field, index) => (
              <Grid2 item xs={12} key={index}>
                <Box
                  sx={{
                    display: "flex",
                    alignItems: "flex-start", // Align items at the start for better column alignment
                    gap: "20px", // Space between each input group
                    flexWrap: "wrap", // Allow wrapping if necessary
                  }}
                >
                  {/* Fuel Type Input */}
                  <Box
                    sx={{
                      display: "flex",
                      flexDirection: "column", // Arrange label and input in a column
                      gap: "4px", // Space between label and input
                      alignItems: "flex-start", // Ensure alignment is consistent
                    }}
                  >
                    <Typography
                      variant="body2"
                      fontSize="12px"
                      fontWeight="400"
                      lineHeight="19.6px"
                    >
                      Types of Refrigerant
                    </Typography>
                    <TextField
                      select
                      name="fuel"
                      value={field.fuel}
                      onChange={(e) => handleChange(index, e)}
                      sx={{
                        width: "332.5px",
                        borderRadius: "5px",
                        border: "1px solid #D9D9D966",
                        "& .MuiSelect-icon": {
                          display: "none",
                        },
                        "& .MuiInputBase-input": {
                          padding: "10px 14px 10px 14px", // Add consistent padding
                          height: "8px",
                        },
                      }}
                      SelectProps={{
                        displayEmpty: true,
                      }}
                    >
                      <MenuItem value="" disabled>
                        <Grid2
                          flexDirection="row"
                          display="flex"
                          justifyContent="space-between"
                          alignItems="center"
                        >
                          <Typography
                            fontSize="13px"
                            fontWeight="500"
                            lineHeight="22.4px"
                            color="#B0B0B0"
                          >
                            Select Type
                          </Typography>
                          <img
                            src={down_arrow}
                            width="12px"
                            height="7px"
                            alt="Logo"
                          />
                        </Grid2>
                      </MenuItem>
                      <MenuItem value="Fuel">R22</MenuItem>
                      <MenuItem value="Fuel2">R134a</MenuItem>
                      <MenuItem value="Fuel3">HFC-245fa</MenuItem>
                    </TextField>
                  </Box>

                  {/* Show Quantity and Unit inputs only if Fuel Type is selected */}
                  {field.fuel && (
                    <>
                      {/* Quantity Input */}
                      <Box
                        sx={{
                          display: "flex",
                          flexDirection: "column", // Arrange label and input in a column
                          gap: "4px", // Space between label and input
                          alignItems: "flex-start", // Ensure alignment is consistent
                        }}
                      >
                        <Typography
                          variant="body2"
                          fontSize="12px"
                          fontWeight="400"
                          lineHeight="19.6px"
                        >
                          Quantity
                        </Typography>
                        <TextField
                          name="quantity"
                          value={field.quantity}
                          placeholder="Quantity"
                          onChange={(e) => handleChange(index, e)}
                          sx={{
                            width: "332.5px",
                            borderRadius: "5px",
                            border: "1px solid #D9D9D966",
                            "& .MuiInputBase-input": {
                              padding: "10px 14px", // Add consistent padding
                              height: "auto", // Allow height to adjust automatically
                            },
                          }}
                        />
                      </Box>

                      {/* Unit Input */}
                      <Box
                        sx={{
                          display: "flex",
                          flexDirection: "column", // Arrange label and input in a column
                          gap: "4px", // Space between label and input
                          alignItems: "flex-start", // Ensure alignment is consistent
                        }}
                      >
                        <Typography
                          variant="body2"
                          fontSize="12px"
                          fontWeight="400"
                          lineHeight="19.6px"
                        >
                          Unit
                        </Typography>
                        <TextField
                          select
                          name="unit"
                          value={field.unit}
                          onChange={(e) => handleChange(index, e)}
                          sx={{
                            width: "332.5px",
                            borderRadius: "5px",
                            border: "1px solid #D9D9D966",
                            "& .MuiSelect-icon": {
                              display: "none", // Hide the select icon to match the fuel field
                            },
                            "& .MuiInputBase-input": {
                              padding: "10px 14px 10px 14px", // Add consistent padding
                              height: "8px", // Ensure consistent input height
                            },
                          }}
                          SelectProps={{
                            displayEmpty: true,
                          }}
                        >
                          <MenuItem value="" disabled>
                            <Grid2
                              flexDirection="row"
                              display="flex"
                              justifyContent="space-between"
                              alignItems="center"
                            >
                              <Typography
                                fontSize="13px"
                                fontWeight="500"
                                lineHeight="22.4px"
                                color="#B0B0B0"
                              >
                                Select Type
                              </Typography>
                              <img
                                src={down_arrow}
                                width="12px"
                                height="7px"
                                alt="Logo"
                              />
                            </Grid2>
                          </MenuItem>
                          <MenuItem value="Fuel">Fuel</MenuItem>
                          <MenuItem value="Fuel2">Fuel2</MenuItem>
                          <MenuItem value="Fuel3">Fuel3</MenuItem>
                        </TextField>
                      </Box>
                    </>
                  )}
                  {field.quantity || field.unit ? (
                    <Box
                      sx={{
                        display: "flex",
                        alignItems: "center",
                        justifyContent: "center",
                        flexDirection: "column",
                        gap: "8px",
                        cursor: "pointer",
                      }}
                    >
                      <img
                        onClick={() => handleDelete(index)}
                        src={trash} // Path to your SVG delete icon
                        alt="Delete"
                        style={{
                          width: "20px",
                          height: "55px",
                          marginTop: "6px",
                          marginRight: "15px",
                        }} // Adjust the size as needed
                      />
                    </Box>
                  ) : null}
                </Box>
              </Grid2>
            ))}
          </Grid2>
 

import { useState } from "react";
 
../../../assets/images/DotsThreeVertical.svg
 
import { Grid2 } from "@mui/material";
import React from "react";
import Typography from "@mui/material/Typography";
import fuelLogo from "../../../assets/images/fuel_logo.svg";
import dot_Icon from "../../../assets/images/DotsThreeVertical.svg";
import { TextField, MenuItem } from "@mui/material";
import { useState } from "react";
import down_arrow from "../../../assets/images/down_arrow.svg";
import Box from "@mui/material/Box";
import trash from "../../../assets/images/TrashS.svg";
function RefrigerantData() {
  // Initialize fields with one empty row
  const [fields, setFields] = useState([{ fuel: "", quantity: "", unit: "" }]);
  const handleChange = (index, event) => {
    const { name, value } = event.target;
    const updatedFields = [...fields];
    updatedFields[index][name] = value;
    setFields(updatedFields);

    // Check if the current row is complete
    const isRowComplete =
      updatedFields[index].fuel &&
      updatedFields[index].quantity &&
      updatedFields[index].unit;

    // If the current row is complete and it’s the last row, add a new row
    if (isRowComplete && index === fields.length - 1) {
      setFields([...updatedFields, { fuel: "", quantity: "", unit: "" }]);
    }
  };
  const handleDelete = (index) => {
    const updatedFields = fields.filter((_, i) => i !== index);

    // Add a new empty row if there are no rows left
    if (updatedFields.length === 0) {
      updatedFields.push({ fuel: "", quantity: "", unit: "" });
    }

    setFields(updatedFields);
  };
  return (
    <div>
      {/* Main Grid */}
      <Grid2
        sx={{
          padding: "25px 45px 25px 45px",
          width: "90%",
          bgcolor: "#ffffff",
          display: "flex",
          flexDirection: "column",
          margin: "0 auto",
          borderRadius: "16px",
        }}
      >
        {/* inner main */}
        <Grid2
          sx={{
            width: "100%",
            display: "flex",
            flexDirection: "column",
            gap: "30px",
          }}
        >
          {/* grid header */}
          <Grid2 sx={{ display: "flex", flexDirection: "column", gap: "4px" }}>
            <div
              style={{
                display: "flex",
                alignItems: "center",
                justifyContent: "space-between",
                gap: "6px",
                width: "100%", // Adjust as needed
              }}
            >
              <div
                style={{ display: "flex", alignItems: "center", gap: "6px" }}
              >
                <img
                  src={fuelLogo}
                  height="15px"
                  width="10px"
                  alt="fuel-logo"
                />
                <h2
                  style={{
                    fontSize: "16px",
                    fontWeight: "600",
                    lineHeight: "28px",
                    color: "#000000",
                    margin: 0, // Removes default margin
                  }}
                >
                  Fuel Consumption
                </h2>
              </div>
              <img src={dot_Icon} alt="dot-icon" height="24px" width="24px" />
            </div>

            <div>
              <Typography
                fontSize="12px"
                fontWeight="400"
                lineHeight="22.4px"
                color="#717171"
              >
                Enter the type and quantity of fuel used (e.g., diesel,
                gasoline) to calculate direct emissions from combustion.
              </Typography>
            </div>
          </Grid2>
          {/* grid input second */}
          <Grid2 container spacing={2}>
            {fields.map((field, index) => (
              <Grid2 item xs={12} key={index}>
                <Box
                  sx={{
                    display: "flex",
                    alignItems: "flex-start", // Align items at the start for better column alignment
                    gap: "20px", // Space between each input group
                    flexWrap: "wrap", // Allow wrapping if necessary
                  }}
                >
                  {/* Fuel Type Input */}
                  <Box
                    sx={{
                      display: "flex",
                      flexDirection: "column", // Arrange label and input in a column
                      gap: "4px", // Space between label and input
                      alignItems: "flex-start", // Ensure alignment is consistent
                    }}
                  >
                    <Typography
                      variant="body2"
                      fontSize="12px"
                      fontWeight="400"
                      lineHeight="19.6px"
                    >
                      Fuel Type
                    </Typography>
                    <TextField
                      select
                      name="fuel"
                      value={field.fuel}
                      onChange={(e) => handleChange(index, e)}
                      sx={{
                        width: "332.5px",
                        borderRadius: "5px",
                        border: "1px solid #D9D9D966",
                        "& .MuiSelect-icon": {
                          display: "none",
                        },
                        "& .MuiInputBase-input": {
                          padding: "10px 14px 10px 14px", // Add consistent padding
                          height: "8px",
                        },
                      }}
                      SelectProps={{
                        displayEmpty: true,
                      }}
                    >
                      <MenuItem value="" disabled>
                        <Grid2
                          flexDirection="row"
                          display="flex"
                          justifyContent="space-between"
                          alignItems="center"
                        >
                          <Typography
                            fontSize="13px"
                            fontWeight="500"
                            lineHeight="22.4px"
                            color="#B0B0B0"
                          >
                            Select Type
                          </Typography>
                          <img
                            src={down_arrow}
                            width="12px"
                            height="7px"
                            alt="Logo"
                          />
                        </Grid2>
                      </MenuItem>
                      <MenuItem value="Fuel">Gasoline/Petrol</MenuItem>
                      <MenuItem value="Fuel2">LPG</MenuItem>
                      <MenuItem value="Fuel3">CNG</MenuItem>
                    </TextField>
                  </Box>

                  {/* Show Quantity and Unit inputs only if Fuel Type is selected */}
                  {field.fuel && (
                    <>
                      {/* Quantity Input */}
                      <Box
                        sx={{
                          display: "flex",
                          flexDirection: "column", // Arrange label and input in a column
                          gap: "4px", // Space between label and input
                          alignItems: "flex-start", // Ensure alignment is consistent
                        }}
                      >
                        <Typography
                          variant="body2"
                          fontSize="12px"
                          fontWeight="400"
                          lineHeight="19.6px"
                        >
                          Quantity
                        </Typography>
                        <TextField
                          name="quantity"
                          value={field.quantity}
                          placeholder="Quantity"
                          onChange={(e) => handleChange(index, e)}
                          sx={{
                            width: "332.5px",
                            borderRadius: "5px",
                            border: "1px solid #D9D9D966",
                            "& .MuiInputBase-input": {
                              padding: "10px 14px", // Add consistent padding
                              height: "auto", // Allow height to adjust automatically
                            },
                          }}
                        />
                      </Box>

                      {/* Unit Input */}
                      <Box
                        sx={{
                          display: "flex",
                          flexDirection: "column", // Arrange label and input in a column
                          gap: "4px", // Space between label and input
                          alignItems: "flex-start", // Ensure alignment is consistent
                        }}
                      >
                        <Typography
                          variant="body2"
                          fontSize="12px"
                          fontWeight="400"
                          lineHeight="19.6px"
                        >
                          Unit
                        </Typography>
                        <TextField
                          select
                          name="unit"
                          value={field.unit}
                          onChange={(e) => handleChange(index, e)}
                          sx={{
                            width: "332.5px",
                            borderRadius: "5px",
                            border: "1px solid #D9D9D966",
                            "& .MuiSelect-icon": {
                              display: "none", // Hide the select icon to match the fuel field
                            },
                            "& .MuiInputBase-input": {
                              padding: "10px 14px 10px 14px", // Add consistent padding
                              height: "8px", // Ensure consistent input height
                            },
                          }}
                          SelectProps={{
                            displayEmpty: true,
                          }}
                        >
                          <MenuItem value="" disabled>
                            <Grid2
                              flexDirection="row"
                              display="flex"
                              justifyContent="space-between"
                              alignItems="center"
                            >
                              <Typography
                                fontSize="13px"
                                fontWeight="500"
                                lineHeight="22.4px"
                                color="#B0B0B0"
                              >
                                Select Type
                              </Typography>
                              <img
                                src={down_arrow}
                                width="12px"
                                height="7px"
                                alt="Logo"
                              />
                            </Grid2>
                          </MenuItem>
                          <MenuItem value="Fuel">litres</MenuItem>
                          <MenuItem value="Fuel2">Gallons</MenuItem>
                        </TextField>
                      </Box>
                    </>
                  )}
                  {field.quantity || field.unit ? (
                    <Box
                      sx={{
                        display: "flex",
                        alignItems: "center",
                        justifyContent: "center",
                        flexDirection: "column",
                        gap: "8px",
                        cursor: "pointer",
                      }}
                    >
                      <img
                        onClick={() => handleDelete(index)}
                        src={trash} // Path to your SVG delete icon
                        alt="Delete"
                        style={{
                          width: "20px",
                          height: "55px",
                          marginTop: "6px",
                          marginRight: "15px",
                        }} // Adjust the size as needed
                      />
                    </Box>
                  ) : null}
                </Box>
              </Grid2>
            ))}
          </Grid2>
        </Grid2>
      </Grid2>
    </div>
  );
}

export default RefrigerantData;

 
FuelConsumption
 
import { Grid2 } from "@mui/material";
import React from "react";
import Typography from "@mui/material/Typography";
import refri_logo from "../../../assets/images/refri_logo.svg"
import { TextField, MenuItem } from "@mui/material";
import { useState } from "react";
import down_arrow from "../../../assets/images/down_arrow.svg";
import Box from "@mui/material/Box";
import trash from "../../../assets/images/TrashS.svg";
function RefrigerantData() {
  // Initialize fields with one empty row
  const [fields, setFields] = useState([{ fuel: "", quantity: "", unit: "" }]);
  const handleChange = (index, event) => {
    const { name, value } = event.target;
    const updatedFields = [...fields];
    updatedFields[index][name] = value;
    setFields(updatedFields);

    // Check if the current row is complete
    const isRowComplete =
      updatedFields[index].fuel &&
      updatedFields[index].quantity &&
      updatedFields[index].unit;

    // If the current row is complete and it’s the last row, add a new row
    if (isRowComplete && index === fields.length - 1) {
      setFields([...updatedFields, { fuel: "", quantity: "", unit: "" }]);
    }
  };
  const handleDelete = (index) => {
    const updatedFields = fields.filter((_, i) => i !== index);

    // Add a new empty row if there are no rows left
    if (updatedFields.length === 0) {
      updatedFields.push({ fuel: "", quantity: "", unit: "" });
    }

    setFields(updatedFields);
  };
  return (
    <div>
      {/* Main Grid */}
      <Grid2
        sx={{
          padding: "25px 45px 25px 45px",
          width: "90%",
          bgcolor: "#ffffff",
          display: "flex",
          flexDirection: "column",
          margin: "0 auto",
          borderRadius: "16px",
        }}
      >
        {/* inner main */}
        <Grid2
          sx={{
            width: "100%",
            display: "flex",
            flexDirection: "column",
            gap: "30px",
          }}
        >
          {/* grid header */}
          <Grid2 sx={{ display: "flex", flexDirection: "column", gap: "4px" }}>
            <div
              style={{
                display: "flex",
                alignItems: "center",
                justifyContent: "space-between",
                gap: "6px",
                width: "100%", // Adjust as needed
              }}
            >
              <div
                style={{ display: "flex", alignItems: "center", gap: "6px" }}
              >
                <img
                  src={refri_logo}
                  height="15px"
                  width="10px"
                  alt="fuel-logo"
                />
                <h2
                  style={{
                    fontSize: "16px",
                    fontWeight: "600",
                    lineHeight: "28px",
                    color: "#000000",
                    margin: 0, // Removes default margin
                  }}
                >
                  Refrigerant Data
                </h2>
              </div>
              <img src="" alt="dot-icon" height="24px" width="24px" />
            </div>

            <div>
              <Typography
                fontSize="12px"
                fontWeight="400"
                lineHeight="22.4px"
                color="#717171"
              >
              Input the type and amount of refrigerant used to account for emissions from refrigerant Consumption.
              </Typography>
            </div>
          </Grid2>
          {/* grid input second */}
          <Grid2 container spacing={2}>
            {fields.map((field, index) => (
              <Grid2 item xs={12} key={index}>
                <Box
                  sx={{
                    display: "flex",
                    alignItems: "flex-start", // Align items at the start for better column alignment
                    gap: "20px", // Space between each input group
                    flexWrap: "wrap", // Allow wrapping if necessary
                  }}
                >
                  {/* Fuel Type Input */}
                  <Box
                    sx={{
                      display: "flex",
                      flexDirection: "column", // Arrange label and input in a column
                      gap: "4px", // Space between label and input
                      alignItems: "flex-start", // Ensure alignment is consistent
                    }}
                  >
                    <Typography
                      variant="body2"
                      fontSize="12px"
                      fontWeight="400"
                      lineHeight="19.6px"
                    >
                    Types of Refrigerant
                    </Typography>
                    <TextField
                      select
                      name="fuel"
                      value={field.fuel}
                      onChange={(e) => handleChange(index, e)}
                      sx={{
                        width: "332.5px",
                        borderRadius: "5px",
                        border: "1px solid #D9D9D966",
                        "& .MuiSelect-icon": {
                          display: "none",
                        },
                        "& .MuiInputBase-input": {
                          padding: "10px 14px 10px 14px", // Add consistent padding
                          height: "8px",
                        },
                      }}
                      SelectProps={{
                        displayEmpty: true,
                      }}
                    >
                      <MenuItem value="" disabled>
                        <Grid2
                          flexDirection="row"
                          display="flex"
                          justifyContent="space-between"
                          alignItems="center"
                        >
                          <Typography
                            fontSize="13px"
                            fontWeight="500"
                            lineHeight="22.4px"
                            color="#B0B0B0"
                          >
                            Select Type
                          </Typography>
                          <img
                            src={down_arrow}
                            width="12px"
                            height="7px"
                            alt="Logo"
                          />
                        </Grid2>
                      </MenuItem>
                      <MenuItem value="Fuel">R22</MenuItem>
                      <MenuItem value="Fuel2">R134a</MenuItem>
                      <MenuItem value="Fuel3">Fuel3</MenuItem>
                    </TextField>
                  </Box>

                  {/* Show Quantity and Unit inputs only if Fuel Type is selected */}
                  {field.fuel && (
                    <>
                      {/* Quantity Input */}
                      <Box
                        sx={{
                          display: "flex",
                          flexDirection: "column", // Arrange label and input in a column
                          gap: "4px", // Space between label and input
                          alignItems: "flex-start", // Ensure alignment is consistent
                        }}
                      >
                        <Typography
                          variant="body2"
                          fontSize="12px"
                          fontWeight="400"
                          lineHeight="19.6px"
                        >
                          Quantity
                        </Typography>
                        <TextField
                          name="quantity"
                          value={field.quantity}
                          placeholder="Quantity"
                          onChange={(e) => handleChange(index, e)}
                          sx={{
                            width: "332.5px",
                            borderRadius: "5px",
                            border: "1px solid #D9D9D966",
                            "& .MuiInputBase-input": {
                              padding: "10px 14px", // Add consistent padding
                              height: "auto", // Allow height to adjust automatically
                            },
                          }}
                        />
                      </Box>

                      {/* Unit Input */}
                      <Box
                        sx={{
                          display: "flex",
                          flexDirection: "column", // Arrange label and input in a column
                          gap: "4px", // Space between label and input
                          alignItems: "flex-start", // Ensure alignment is consistent
                        }}
                      >
                        <Typography
                          variant="body2"
                          fontSize="12px"
                          fontWeight="400"
                          lineHeight="19.6px"
                        >
                          Unit
                        </Typography>
                        <TextField
                          select
                          name="unit"
                          value={field.unit}
                          onChange={(e) => handleChange(index, e)}
                          sx={{
                            width: "332.5px",
                            borderRadius: "5px",
                            border: "1px solid #D9D9D966",
                            "& .MuiSelect-icon": {
                              display: "none", // Hide the select icon to match the fuel field
                            },
                            "& .MuiInputBase-input": {
                              padding: "10px 14px 10px 14px", // Add consistent padding
                              height: "8px", // Ensure consistent input height
                            },
                          }}
                          SelectProps={{
                            displayEmpty: true,
                          }}
                        >
                          <MenuItem value="" disabled>
                            <Grid2
                              flexDirection="row"
                              display="flex"
                              justifyContent="space-between"
                              alignItems="center"
                            >
                              <Typography
                                fontSize="13px"
                                fontWeight="500"
                                lineHeight="22.4px"
                                color="#B0B0B0"
                              >
                                Select Type
                              </Typography>
                              <img
                                src={down_arrow}
                                width="12px"
                                height="7px"
                                alt="Logo"
                              />
                            </Grid2>
                          </MenuItem>
                          <MenuItem value="Fuel">Fuel</MenuItem>
                          <MenuItem value="Fuel2">Fuel2</MenuItem>
                          <MenuItem value="Fuel3">Fuel3</MenuItem>
                        </TextField>
                      </Box>
                    </>
                  )}
                  {field.quantity || field.unit ? (
                    <Box
                      sx={{
                        display: "flex",
                        alignItems: "center",
                        justifyContent: "center",
                        flexDirection: "column",
                        gap: "8px",
                        cursor: "pointer",
                      }}
                    >
                      <img
                        onClick={() => handleDelete(index)}
                        src={trash} // Path to your SVG delete icon
                        alt="Delete"
                        style={{
                          width: "20px",
                          height: "55px",
                          marginTop: "6px",
                          marginRight: "15px",
                        }} // Adjust the size as needed
                      />
                    </Box>
                  ) : null}
                </Box>
              </Grid2>
            ))}
          </Grid2>
        </Grid2>
      </Grid2>
    </div>
  );
}

export default RefrigerantData;

 

import dot_Icon from "../../../assets/images/DotsThreeVertical.svg"
 

import dot_Icon from "../../../assets/images/.svg"
 

import dot_Icon from "../../../assets/images/src/assets/images/.svg";
 
../../../assets/images/DotsThreeVertical.svg
 

          {/* grid input second */}
          <Grid2 container spacing={2}>
            {fields.map((field, index) => (
              <Grid2 item xs={12} key={index}>
                <Box
                  sx={{
                    display: "flex",
                    alignItems: "flex-start", // Align items at the start for better column alignment
                    gap: "20px", // Space between each input group
                    flexWrap: "wrap", // Allow wrapping if necessary
                  }}
                >
                  {/* Fuel Type Input */}
                  <Box
                    sx={{
                      display: "flex",
                      flexDirection: "column", // Arrange label and input in a column
                      gap: "4px", // Space between label and input
                      alignItems: "flex-start", // Ensure alignment is consistent
                    }}
                  >
                    <Typography
                      variant="body2"
                      fontSize="12px"
                      fontWeight="400"
                      lineHeight="19.6px"
                    >
                      Types of Refrigerant
                    </Typography>
                    <TextField
                      select
                      name="fuel"
                      value={field.fuel}
                      onChange={(e) => handleChange(index, e)}
                      sx={{
                        width: "332.5px",
                        borderRadius: "5px",
                        border: "1px solid #D9D9D966",
                        "& .MuiSelect-icon": {
                          display: "none",
                        },
                        "& .MuiInputBase-input": {
                          padding: "10px 14px 10px 14px", // Add consistent padding
                          height: "8px",
                        },
                      }}
                      SelectProps={{
                        displayEmpty: true,
                      }}
                    >
                      <MenuItem value="" disabled>
                        <Grid2
                          flexDirection="row"
                          display="flex"
                          justifyContent="space-between"
                          alignItems="center"
                        >
                          <Typography
                            fontSize="13px"
                            fontWeight="500"
                            lineHeight="22.4px"
                            color="#B0B0B0"
                          >
                            Select Type
                          </Typography>
                          <img
                            src={down_arrow}
                            width="12px"
                            height="7px"
                            alt="Logo"
                          />
                        </Grid2>
                      </MenuItem>
                      <MenuItem value="Fuel">R22</MenuItem>
                      <MenuItem value="Fuel2">R134a</MenuItem>
                      <MenuItem value="Fuel3">HFC-245fa</MenuItem>
                    </TextField>
                  </Box>

                  {/* Show Quantity and Unit inputs only if Fuel Type is selected */}
                  {field.fuel && (
                    <>
                      {/* Quantity Input */}
                      <Box
                        sx={{
                          display: "flex",
                          flexDirection: "column", // Arrange label and input in a column
                          gap: "4px", // Space between label and input
                          alignItems: "flex-start", // Ensure alignment is consistent
                        }}
                      >
                        <Typography
                          variant="body2"
                          fontSize="12px"
                          fontWeight="400"
                          lineHeight="19.6px"
                        >
                          Quantity
                        </Typography>
                        <TextField
                          name="quantity"
                          value={field.quantity}
                          placeholder="Quantity"
                          onChange={(e) => handleChange(index, e)}
                          sx={{
                            width: "332.5px",
                            borderRadius: "5px",
                            border: "1px solid #D9D9D966",
                            "& .MuiInputBase-input": {
                              padding: "10px 14px", // Add consistent padding
                              height: "auto", // Allow height to adjust automatically
                            },
                          }}
                        />
                      </Box>

                      {/* Unit Input */}
                      <Box
                        sx={{
                          display: "flex",
                          flexDirection: "column", // Arrange label and input in a column
                          gap: "4px", // Space between label and input
                          alignItems: "flex-start", // Ensure alignment is consistent
                        }}
                      >
                        <Typography
                          variant="body2"
                          fontSize="12px"
                          fontWeight="400"
                          lineHeight="19.6px"
                        >
                          Unit
                        </Typography>
                        <TextField
                          select
                          name="unit"
                          value={field.unit}
                          onChange={(e) => handleChange(index, e)}
                          sx={{
                            width: "332.5px",
                            borderRadius: "5px",
                            border: "1px solid #D9D9D966",
                            "& .MuiSelect-icon": {
                              display: "none", // Hide the select icon to match the fuel field
                            },
                            "& .MuiInputBase-input": {
                              padding: "10px 14px 10px 14px", // Add consistent padding
                              height: "8px", // Ensure consistent input height
                            },
                          }}
                          SelectProps={{
                            displayEmpty: true,
                          }}
                        >
                          <MenuItem value="" disabled>
                            <Grid2
                              flexDirection="row"
                              display="flex"
                              justifyContent="space-between"
                              alignItems="center"
                            >
                              <Typography
                                fontSize="13px"
                                fontWeight="500"
                                lineHeight="22.4px"
                                color="#B0B0B0"
                              >
                                Select Type
                              </Typography>
                              <img
                                src={down_arrow}
                                width="12px"
                                height="7px"
                                alt="Logo"
                              />
                            </Grid2>
                          </MenuItem>
                          <MenuItem value="Fuel">Fuel</MenuItem>
                          <MenuItem value="Fuel2">Fuel2</MenuItem>
                          <MenuItem value="Fuel3">Fuel3</MenuItem>
                        </TextField>
                      </Box>
                    </>
                  )}
                  {field.quantity || field.unit ? (
                    <Box
                      sx={{
                        display: "flex",
                        alignItems: "center",
                        justifyContent: "center",
                        flexDirection: "column",
                        gap: "8px",
                        cursor: "pointer",
                      }}
                    >
                      <img
                        onClick={() => handleDelete(index)}
                        src={trash} // Path to your SVG delete icon
                        alt="Delete"
                        style={{
                          width: "20px",
                          height: "55px",
                          marginTop: "6px",
                          marginRight: "15px",
                        }} // Adjust the size as needed
                      />
                    </Box>
                  ) : null}
                </Box>
              </Grid2>
            ))}
          </Grid2>
 

import dot_Icon from "../../../assets/images/DotsThreeVertical.svg";
 

import { TextField, MenuItem } from "@mui/material";
 

import down_arrow from "../../../assets/images/down_arrow.svg";
 

import trash from "../../../assets/images/TrashS.svg";
 

  // Initialize fields with one empty row
  const [fields, setFields] = useState([{ fuel: "", quantity: "", unit: "" }]);
  const handleChange = (index, event) => {
    const { name, value } = event.target;
    const updatedFields = [...fields];
    updatedFields[index][name] = value;
    setFields(updatedFields);

    // Check if the current row is complete
    const isRowComplete =
      updatedFields[index].fuel &&
      updatedFields[index].quantity &&
      updatedFields[index].unit;

    // If the current row is complete and it’s the last row, add a new row
    if (isRowComplete && index === fields.length - 1) {
      setFields([...updatedFields, { fuel: "", quantity: "", unit: "" }]);
    }
  };
  const handleDelete = (index) => {
    const updatedFields = fields.filter((_, i) => i !== index);

    // Add a new empty row if there are no rows left
    if (updatedFields.length === 0) {
      updatedFields.push({ fuel: "", quantity: "", unit: "" });
    }

    setFields(updatedFields);
  };
 
import React, { useState } from "react";
import {
  Box,
  Grid,
  Typography,
  TextField,
  MenuItem,
  Grid2,
} from "@mui/material";
import emmision_logo from "../../../assets/images/emisson_logo.svg";
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
} from "@mui/material";

function ProcessEmission() {
  const rows = [
    {
      processType: "Emission Type 1",
      category: "Category 1",
      subCategory: "Sub Category 1",
      subSubCategory: "Sub Sub Category 1",
      subSubSubCategory: "Sub Sub Sub Category 1",
      quantity: "100",
    },
    {
      processType: "Emission Type 1",
      category: "Category 1",
      subCategory: "Sub Category 1",
      subSubCategory: "Sub Sub Category 1",
      subSubSubCategory: "Sub Sub Sub Category 1",
      quantity: "100",
    },
    {
      processType: "Emission Type 1",
      category: "Category 1",
      subCategory: "Sub Category 1",
      subSubCategory: "Sub Sub Category 1",
      subSubSubCategory: "Sub Sub Sub Category 1",
      quantity: "100",
    },
    {
      processType: "Emission Type 1",
      category: "Category 1",
      subCategory: "Sub Category 1",
      subSubCategory: "Sub Sub Category 1",
      subSubSubCategory: "Sub Sub Sub Category 1",
      quantity: "100",
    },
    {
      processType: "Emission Type 1",
      category: "Category 1",
      subCategory: "Sub Category 1",
      subSubCategory: "Sub Sub Category 1",
      subSubSubCategory: "Sub Sub Sub Category 1",
      quantity: "100",
    },
  ];
  // Initialize fields with one empty row
  const [fields, setFields] = useState([{ fuel: "", quantity: "", unit: "" }]);

  // Handle changes in any input field
  const handleChange = (index, event) => {
    const { name, value } = event.target;
    const updatedFields = [...fields];
    updatedFields[index][name] = value;
    setFields(updatedFields);

    // Check if the current row is complete
    const isRowComplete =
      updatedFields[index].fuel &&
      updatedFields[index].quantity &&
      updatedFields[index].unit;

    // If the current row is complete and it’s the last row, add a new row
    if (isRowComplete && index === fields.length - 1) {
      setFields([...updatedFields, { fuel: "", quantity: "", unit: "" }]);
    }
  };

  return (
    <div>
      <Grid
        container
        sx={{
          padding: "35px 45px 45px 45px",
          width: "90%",
          bgcolor: "#ffffff",
          display: "flex",
          flexDirection: "column",
          margin: "0 auto",
          borderRadius: "16px",
        }}
      >
        <Grid item xs={12} sx={{ marginBottom: "20px" }}>
          <Typography
            variant="h1"
            fontSize="20px"
            fontWeight="600"
            lineHeight="28px"
            color="#000000"
            sx={{ display: "flex", alignItems: "center" }}
          >
            <img
              src={emmision_logo}
              alt="fuel_logo"
              width="18.36px"
              height="19.49px"
              style={{ marginRight: "6px" }}
            />
            Process Emission
          </Typography>
          <Typography
            variant="body1"
            fontSize="12px"
            fontWeight="400"
            lineHeight="22.4px"
            color="#717171"
            sx={{ marginTop: "8px" }}
          >
            Record the type of industrial process and the quantity of product
            processed to calculate emissions directly related to production
            activities.
          </Typography>
        </Grid>
        <Grid2
          sx={{
            display: "flex",
            flexDirection: "column",
            gap: "20px",
            borderRadius: "10px",
            border: "1px solid none", // Border around the Grid2 if needed
          }}
        >
          <TableContainer>
            <Table sx={{ borderCollapse: "separate", borderSpacing: "0 10px" }}>
              <TableHead sx={{ bgcolor: "#f2fcfc", border: "1px solid #ddd" }}>
                <TableRow>
                  <TableCell>Type of Process Emission</TableCell>
                  <TableCell>Category</TableCell>
                  <TableCell>Sub Category</TableCell>
                  <TableCell>Sub Sub Category</TableCell>
                  <TableCell>Sub Sub Sub Category</TableCell>
                  <TableCell>Quantity</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {rows.map((row, index) => (
                  <TableRow
                    key={index}
                    sx={{
                      border: "1px solid none", // Border around each row
                      borderRadius: "4px", // Rounded corners for each row
                      backgroundColor: "#fff", // Optional: Background color for rows
                      "&:not(:last-child)": {
                        borderBottom: "none", // Remove the bottom border of each row except the last one
                      },
                    }}
                  >
                    <TableCell>{row.processType}</TableCell>
                    <TableCell>{row.category}</TableCell>
                    <TableCell>{row.subCategory}</TableCell>
                    <TableCell>{row.subSubCategory}</TableCell>
                    <TableCell>{row.subSubSubCategory}</TableCell>
                    <TableCell>{row.quantity}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
        </Grid2>
      </Grid>
    </div>
  );
}

export default ProcessEmission;

 

  // Initialize fields with one empty row
  const [fields, setFields] = useState([{ fuel: "", quantity: "", unit: "" }]);
  const handleChange = (index, event) => {
    const { name, value } = event.target;
    const updatedFields = [...fields];
    updatedFields[index][name] = value;
    setFields(updatedFields);

    // Check if the current row is complete
    const isRowComplete =
      updatedFields[index].fuel &&
      updatedFields[index].quantity &&
      updatedFields[index].unit;

    // If the current row is complete and it’s the last row, add a new row
    if (isRowComplete && index === fields.length - 1) {
      setFields([...updatedFields, { fuel: "", quantity: "", unit: "" }]);
    }
  };
  const handleDelete = (index) => {
    const updatedFields = fields.filter((_, i) => i !== index);

    // Add a new empty row if there are no rows left
    if (updatedFields.length === 0) {
      updatedFields.push({ fuel: "", quantity: "", unit: "" });
    }

    setFields(updatedFields);
  };
 
import React, { useState } from "react";
import {
  Box,
  Grid,
  Typography,
  TextField,
  MenuItem,
  Grid2,
} from "@mui/material";
import emmision_logo from "../../../assets/images/emisson_logo.svg";
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
} from "@mui/material";

function ProcessEmission() {
  const rows = [
    {
      processType: "Emission Type 1",
      category: "Category 1",
      subCategory: "Sub Category 1",
      subSubCategory: "Sub Sub Category 1",
      subSubSubCategory: "Sub Sub Sub Category 1",
      quantity: "100",
    },
    {
      processType: "Emission Type 1",
      category: "Category 1",
      subCategory: "Sub Category 1",
      subSubCategory: "Sub Sub Category 1",
      subSubSubCategory: "Sub Sub Sub Category 1",
      quantity: "100",
    },
    {
      processType: "Emission Type 1",
      category: "Category 1",
      subCategory: "Sub Category 1",
      subSubCategory: "Sub Sub Category 1",
      subSubSubCategory: "Sub Sub Sub Category 1",
      quantity: "100",
    },
    {
      processType: "Emission Type 1",
      category: "Category 1",
      subCategory: "Sub Category 1",
      subSubCategory: "Sub Sub Category 1",
      subSubSubCategory: "Sub Sub Sub Category 1",
      quantity: "100",
    },
    {
      processType: "Emission Type 1",
      category: "Category 1",
      subCategory: "Sub Category 1",
      subSubCategory: "Sub Sub Category 1",
      subSubSubCategory: "Sub Sub Sub Category 1",
      quantity: "100",
    },
  ];
  // Initialize fields with one empty row
  const [fields, setFields] = useState([{ fuel: "", quantity: "", unit: "" }]);

  // Handle changes in any input field
  const handleChange = (index, event) => {
    const { name, value } = event.target;
    const updatedFields = [...fields];
    updatedFields[index][name] = value;
    setFields(updatedFields);

    // Check if the current row is complete
    const isRowComplete =
      updatedFields[index].fuel &&
      updatedFields[index].quantity &&
      updatedFields[index].unit;

    // If the current row is complete and it’s the last row, add a new row
    if (isRowComplete && index === fields.length - 1) {
      setFields([...updatedFields, { fuel: "", quantity: "", unit: "" }]);
    }
  };

  return (
    <div>
      <Grid
        container
        sx={{
          padding: "35px 45px 45px 45px",
          width: "90%",
          bgcolor: "#ffffff",
          display: "flex",
          flexDirection: "column",
          margin: "0 auto",
          borderRadius: "16px",
        }}
      >
        <Grid item xs={12} sx={{ marginBottom: "20px" }}>
          <Typography
            variant="h1"
            fontSize="20px"
            fontWeight="600"
            lineHeight="28px"
            color="#000000"
            sx={{ display: "flex", alignItems: "center" }}
          >
            <img
              src={emmision_logo}
              alt="fuel_logo"
              width="18.36px"
              height="19.49px"
              style={{ marginRight: "6px" }}
            />
            Process Emission
          </Typography>
          <Typography
            variant="body1"
            fontSize="12px"
            fontWeight="400"
            lineHeight="22.4px"
            color="#717171"
            sx={{ marginTop: "8px" }}
          >
            Record the type of industrial process and the quantity of product
            processed to calculate emissions directly related to production
            activities.
          </Typography>
        </Grid>
        <Grid2
          sx={{
            display: "flex",
            flexDirection: "column",
            gap: "20px",
            borderRadius: "10px",
            border: "1px solid none", // Border around the Grid2 if needed
          }}
        >
          <TableContainer>
            <Table sx={{ borderCollapse: "separate", borderSpacing: "0 10px" }}>
              <TableHead sx={{ bgcolor: "#f2fcfc", border: "1px solid #ddd" }}>
                <TableRow>
                  <TableCell>Type of Process Emission</TableCell>
                  <TableCell>Category</TableCell>
                  <TableCell>Sub Category</TableCell>
                  <TableCell>Sub Sub Category</TableCell>
                  <TableCell>Sub Sub Sub Category</TableCell>
                  <TableCell>Quantity</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {rows.map((row, index) => (
                  <TableRow
                    key={index}
                    sx={{
                      border: "1px solid none", // Border around each row
                      borderRadius: "4px", // Rounded corners for each row
                      backgroundColor: "#fff", // Optional: Background color for rows
                      "&:not(:last-child)": {
                        borderBottom: "none", // Remove the bottom border of each row except the last one
                      },
                    }}
                  >
                    <TableCell>{row.processType}</TableCell>
                    <TableCell>{row.category}</TableCell>
                    <TableCell>{row.subCategory}</TableCell>
                    <TableCell>{row.subSubCategory}</TableCell>
                    <TableCell>{row.subSubSubCategory}</TableCell>
                    <TableCell>{row.quantity}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
        </Grid2>
      </Grid>
    </div>
  );
}

export default ProcessEmission;

 

                      </Grid2>
 

                      <Grid2>
 

                          <MenuItem value="Fuel3">HFC-245fa</MenuItem>
 

import fuelLogo from "../../../assets/images/fuel_logo.svg";
 

                      Fuel Type
 

                Enter the type and quantity of fuel used (e.g., diesel,
                gasoline) to calculate direct emissions from combustion.
 
Fuel Consumption
 
FuelConsumption
 
import React, { useState } from "react";
import {
  Box,
  Grid,
  Typography,
  TextField,
  MenuItem,
  Grid2,
} from "@mui/material";
import Refri_Logo from "../../../assets/images/refri_logo.svg"
import down_Arrow from "../../../assets/images/down_arrow.svg";
import InputAdornment from "@mui/material/InputAdornment";

function RefrigerantData() {
  // Initialize fields with one empty row
  const [fields, setFields] = useState([{ fuel: "", quantity: "", unit: "" }]);

  // Handle changes in any input field
  const handleChange = (index, event) => {
    const { name, value } = event.target;
    const updatedFields = [...fields];
    updatedFields[index][name] = value;
    setFields(updatedFields);

    // Check if the current row is complete
    const isRowComplete =
      updatedFields[index].fuel &&
      updatedFields[index].quantity &&
      updatedFields[index].unit;

    // If the current row is complete and it’s the last row, add a new row
    if (isRowComplete && index === fields.length - 1) {
      setFields([...updatedFields, { fuel: "", quantity: "", unit: "" }]);
    }
  };

  return (
    <div>
      <Grid
        container
        sx={{
          padding: "35px 45px 45px 45px",
          width: "90%",
          bgcolor: "#ffffff",
          display: "flex",
          flexDirection: "column",
          margin: "0 auto",
          borderRadius: "16px",
        }}
      >
        <Grid item xs={12} sx={{ marginBottom: "20px" }}>
          <Typography
            variant="h1"
            fontSize="20px"
            fontWeight="600"
            lineHeight="28px"
            color="#000000"
            sx={{ display: "flex", alignItems: "center" }}
          >
            <img
              src={Refri_Logo}
              alt="fuel_logo"
              width="18.36px"
              height="19.49px"
              style={{ marginRight: "6px" }}
            />
            Fuel Consumption
          </Typography>
          <Typography
            variant="body1"
            fontSize="12px"
            fontWeight="400"
            lineHeight="22.4px"
            color="#717171"
            sx={{ marginTop: "8px" }}
          >
          Input the type and amount of refrigerant used to account for emissions from refrigerant Consumption.
          </Typography>
        </Grid>
        <Grid2>
          <Grid container spacing={2}>
            {fields.map((field, index) => (
              <Grid item xs={12} key={index}>
                <Box
                  sx={{
                    display: "flex",
                    alignItems: "center",
                  }}
                >
                  <Box sx={{ flex: 1 }}>
                    <Typography variant="body2">Fuel Type</Typography>
                    <TextField
                      select
                      name="fuel"
                      value={field.fuel}
                      onChange={(e) => handleChange(index, e)}
                      sx={{
                        width: "365px",
                        borderRadius: "5px",
                        border: "1px solid #D9D9D966",
                        height: "6vh",
                        mt: "-18px",
                        "& .MuiSelect-icon": {
                          display: "none",
                        },
                        "& .MuiInputBase-input": {
                          height: "10px",
                        },
                      }}
                      SelectProps={{
                        displayEmpty: true,
                      }}
                    >
                      <MenuItem value="" disabled>
                      Add Type of refrigerant
                      </MenuItem>
                      <MenuItem value="Fuel">Fuel</MenuItem>
                      <MenuItem value="Fuel2">Fuel2</MenuItem>
                      <MenuItem value="Fuel3">Fuel3</MenuItem>
                    </TextField>
                  </Box>

                  {field.fuel && (
                    <Box sx={{ display: "flex", gap: "16px" }}>
                      <Box sx={{ flex: 1 }}>
                        <Typography variant="body2">Quantity</Typography>
                        <TextField
                          name="quantity"
                          value={field.quantity}
                          placeholder="Quantity"
                          onChange={(e) => handleChange(index, e)}
                          sx={{
                            width: "365px",
                            borderRadius: "5px",
                            border: "1px solid #D9D9D966",
                            height: "6vh",
                            mb: "18.5px",
                          }}
                        />
                      </Box>

                      <Box sx={{ flex: 1 }}>
                        <Typography variant="body2">Unit</Typography>
                        <TextField
                          select
                          name="unit"
                          value={field.unit}
                          onChange={(e) => handleChange(index, e)}
                          sx={{
                            width: "365px",
                            borderRadius: "5px",
                            border: "1px solid #D9D9D966",
                            height: "6vh",
                          }}
                          SelectProps={{
                            displayEmpty: true,
                          }}
                        >
                          <MenuItem value="" disabled>
                            Select unit
                          </MenuItem>
                          <MenuItem value="Gallons">Gallons</MenuItem>
                          <MenuItem value="Liters">Liters</MenuItem>
                        </TextField>
                      </Box>
                    </Box>
                  )}
                </Box>
              </Grid>
            ))}
          </Grid>
        </Grid2>
      </Grid>
    </div>
  );
}

export default RefrigerantData;

 

import IconButton from "@mui/material/IconButton";
 
DotsThreeVertical.svg
 
src/images/fuel_logo.svg
 
Check
 
import React, { useState } from "react";
import { Box, Grid2, Typography, TextField, MenuItem } from "@mui/material";
import fuel_Logo from "../../../assets/images/fuel_logo.svg";
import down_Arrow from "../../../assets/images/down_arrow.svg";
import InputAdornment from "@mui/material/InputAdornment";

function FuelConsumption() {
  // Initialize fields with one empty row
  const [fields, setFields] = useState([{ fuel: "", quantity: "", unit: "" }]);

  // Handle changes in any input field
  const handleChange = (index, event) => {
    const { name, value } = event.target;
    const updatedFields = [...fields];
    updatedFields[index][name] = value;
    setFields(updatedFields);

    // Check if the current row is complete
    const isRowComplete =
      updatedFields[index].fuel &&
      updatedFields[index].quantity &&
      updatedFields[index].unit;

    // If the current row is complete and it’s the last row, add a new row
    if (isRowComplete && index === fields.length - 1) {
      setFields([...updatedFields, { fuel: "", quantity: "", unit: "" }]);
    }
  };

  return (
    <div>
      <Grid2
        sx={{
          padding: "35px 45px 45px 45px",
          width: "90%",
          bgcolor: "#ffffff",
          display: "flex",
          flexDirection: "column",
          margin: "0 auto",
          borderRadius: "16px",
        }}
      >
        <Grid2
          sx={{
            width: "90%",
            display: "flex",
            flexDirection: "column",
          }}
        >
          <Grid2
            sx={{
              width: "100%",
              height: "66px",
              display: "flex",
              flexDirection: "row",
            }}
          >
            <Grid2 item>
              <img
                src={fuel_Logo}
                alt="fuel_logo"
                width="13.36px"
                height="19.49px"
                style={{ marginRight: "6px" }}
              />
              <Typography
                variant="h1"
                fontSize="20px"
                fontWeight="600"
                lineHeight="28px"
                color="#000000"
              >
                {" "}
                Fuel Consumption
              </Typography>
            </Grid2>
          </Grid2>
        </Grid2>
      </Grid2>
    </div>
  );
}

export default FuelConsumption;

{
  /* <Grid2
container
sx={{
  padding: "35px 45px 45px 45px",
  width: "90%",
  bgcolor: "#ffffff",
  display: "flex",
  flexDirection: "column",
  margin: "0 auto",
  borderRadius: "16px",
}}
>
<Grid2 item xs={12} sx={{ marginBottom: "20px" }}>
  <Typography
    variant="h1"
    fontSize="20px"
    fontWeight="600"
    lineHeight="28px"
    color="#000000"
    sx={{ display: "flex", alignItems: "center" }}
  >
    <img
      src={fuel_Logo}
      alt="fuel_logo"
      width="13.36px"
      height="19.49px"
      style={{ marginRight: "6px" }}
    />
    Fuel Consumption
  </Typography>
  <Typography
    variant="body1"
    fontSize="12px"
    fontWeight="400"
    lineHeight="22.4px"
    color="#717171"
    sx={{ marginTop: "8px" }}
  >
    Enter the type and quantity of fuel used (e.g., diesel, gasoline) to
    calculate direct emissions from combustion.
  </Typography>
</Grid2>
<Grid2>
  <Grid2 container spacing={2}>
    {fields.map((field, index) => (
      <Grid2 item xs={12} key={index}>
        <Box
          sx={{
            display: "flex",
            alignItems: "center",
          }}
        >
          <Box sx={{ flex: 1 }}>
            <Typography variant="body2">Fuel Type</Typography>
            <TextField
              select
              name="fuel"
              value={field.fuel}
              onChange={(e) => handleChange(index, e)}
              sx={{
                width: "365px",
                borderRadius: "5px",
                border: "1px solid #D9D9D966",
                height: "6vh",
                mt: "-18px",
                "& .MuiSelect-icon": {
                  display: "none",
                },
                "& .MuiInputBase-input": {
                  height: "10px",
                },
              }}
              SelectProps={{
                displayEmpty: true,
              }}
            >
              <MenuItem value="" disabled>
                Select fuel type
              </MenuItem>
              <MenuItem value="Fuel">Fuel</MenuItem>
              <MenuItem value="Fuel2">Fuel2</MenuItem>
              <MenuItem value="Fuel3">Fuel3</MenuItem>
            </TextField>
          </Box>

          {field.fuel && (
            <Box sx={{ display: "flex", gap: "16px" }}>
              <Box sx={{ flex: 1 }}>
                <Typography variant="body2">Quantity</Typography>
                <TextField
                  name="quantity"
                  value={field.quantity}
                  placeholder="Quantity"
                  onChange={(e) => handleChange(index, e)}
                  sx={{
                    width: "365px",
                    borderRadius: "5px",
                    border: "1px solid #D9D9D966",
                    height: "6vh",
                    mb: "18.5px",
                  }}
                />
              </Box>

              <Box sx={{ flex: 1 }}>
                <Typography variant="body2">Unit</Typography>
                <TextField
                  select
                  name="unit"
                  value={field.unit}
                  onChange={(e) => handleChange(index, e)}
                  sx={{
                    width: "365px",
                    borderRadius: "5px",
                    border: "1px solid #D9D9D966",
                    height: "6vh",
                  }}
                  SelectProps={{
                    displayEmpty: true,
                  }}
                >
                  <MenuItem value="" disabled>
                    Select unit
                  </MenuItem>
                  <MenuItem value="Gallons">Gallons</MenuItem>
                  <MenuItem value="Liters">Liters</MenuItem>
                </TextField>
              </Box>
            </Box>
          )}
        </Box>
      </Grid2>
    ))}
  </Grid2>
</Grid2>
</Grid2> */
}

 

import down_Arrow from "../../../assets/images/down_arrow.svg";
import InputAdornment from "@mui/material/InputAdornment";
 

            height: "270px",
            width: "90%",
            alignItems: "center",
            justifyContent: "center",
            display:"flex",
            flexDirection:"row",
 
1600px
 
1600px
 

            sx={{ display: "flex", }
 
alignItems: "center" }
 

              justifyContent: "spacebetween",
             
              gap:"5px"
 

            gap: "40px",
 
 height: "350px", width: "1680px" 
 

          <Typography></Typography>
 
<img src={fuel_Logo} alt="Fuel Logo" />
 

    <div>
 

    </div>
 
sx={{height:350px}}
 

      <Grid2
        container
        sx={{
          padding: "35px 45px 45px 45px",
          width: "90%",
          bgcolor: "#ffffff",
          display: "flex",
          flexDirection: "column",
          margin: "0 auto",
          borderRadius: "16px",
        }}
      >
        <Grid2 item xs={12} sx={{ marginBottom: "20px" }}>
          <Typography
            variant="h1"
            fontSize="20px"
            fontWeight="600"
            lineHeight="28px"
            color="#000000"
            sx={{ display: "flex", alignItems: "center" }}
          >
            <img
              src={fuel_Logo}
              alt="fuel_logo"
              width="13.36px"
              height="19.49px"
              style={{ marginRight: "6px" }}
            />
            Fuel Consumption
          </Typography>
          <Typography
            variant="body1"
            fontSize="12px"
            fontWeight="400"
            lineHeight="22.4px"
            color="#717171"
            sx={{ marginTop: "8px" }}
          >
            Enter the type and quantity of fuel used (e.g., diesel, gasoline) to
            calculate direct emissions from combustion.
          </Typography>
        </Grid2>
        <Grid2>
          <Grid2 container spacing={2}>
            {fields.map((field, index) => (
              <Grid2 item xs={12} key={index}>
                <Box
                  sx={{
                    display: "flex",
                    alignItems: "center",
                  }}
                >
                  <Box sx={{ flex: 1 }}>
                    <Typography variant="body2">Fuel Type</Typography>
                    <TextField
                      select
                      name="fuel"
                      value={field.fuel}
                      onChange={(e) => handleChange(index, e)}
                      sx={{
                        width: "365px",
                        borderRadius: "5px",
                        border: "1px solid #D9D9D966",
                        height: "6vh",
                        mt: "-18px",
                        "& .MuiSelect-icon": {
                          display: "none",
                        },
                        "& .MuiInputBase-input": {
                          height: "10px",
                        },
                      }}
                      SelectProps={{
                        displayEmpty: true,
                      }}
                    >
                      <MenuItem value="" disabled>
                        Select fuel type
                      </MenuItem>
                      <MenuItem value="Fuel">Fuel</MenuItem>
                      <MenuItem value="Fuel2">Fuel2</MenuItem>
                      <MenuItem value="Fuel3">Fuel3</MenuItem>
                    </TextField>
                  </Box>

                  {field.fuel && (
                    <Box sx={{ display: "flex", gap: "16px" }}>
                      <Box sx={{ flex: 1 }}>
                        <Typography variant="body2">Quantity</Typography>
                        <TextField
                          name="quantity"
                          value={field.quantity}
                          placeholder="Quantity"
                          onChange={(e) => handleChange(index, e)}
                          sx={{
                            width: "365px",
                            borderRadius: "5px",
                            border: "1px solid #D9D9D966",
                            height: "6vh",
                            mb: "18.5px",
                          }}
                        />
                      </Box>

                      <Box sx={{ flex: 1 }}>
                        <Typography variant="body2">Unit</Typography>
                        <TextField
                          select
                          name="unit"
                          value={field.unit}
                          onChange={(e) => handleChange(index, e)}
                          sx={{
                            width: "365px",
                            borderRadius: "5px",
                            border: "1px solid #D9D9D966",
                            height: "6vh",
                          }}
                          SelectProps={{
                            displayEmpty: true,
                          }}
                        >
                          <MenuItem value="" disabled>
                            Select unit
                          </MenuItem>
                          <MenuItem value="Gallons">Gallons</MenuItem>
                          <MenuItem value="Liters">Liters</MenuItem>
                        </TextField>
                      </Box>
                    </Box>
                  )}
                </Box>
              </Grid2>
            ))}
          </Grid2>
        </Grid2>
      </Grid2>
 

  Grid22,
 
Grid
 

                Indirect emissions from purchased utilities impact carbon
                footprint.
 

                Indirect emissions from purchased utilities impact carbon
                footprint.
 

                Indirect emissions from purchased utilities impact carbon
                footprint.
 

            <Grid2
              sx={{
                width: "29%",
                textAlign: "center",
                justifyContent: "center",
                display: "flex",
                flexDirection: "column",
                mt: "6px",
                gap: "2px",
                height: "50px",
                // backgroundColor: "#F9FFFC",
                cursor: "pointer",
                // borderBottom: "3px solid #369D9C",
              }}
            >
              <Typography
                variant="h1"
                fontSize="12px"
                fontWeight="600"
                lineHeight="18px"
                color="#369D9C"
                display="flex"
                alignItems="center"
                justifyContent="center"
                gap="5px"
              >
                <img
                  src={lock_Logo}
                  alt="Lock Logo"
                  style={{
                    width: "10px",
                    height: "16px",
                    display: "inline-block",
                  }}
                />
                Scope 2
              </Typography>

              <Typography
                variant="body1"
                fontSize="9px"
                fontWeight="400"
                lineHeight="14px"
                color="#808080"
                mb="14px"
              >
                Indirect emissions from purchased utilities impact carbon
                footprint.
              </Typography>
            </Grid2>
 

            <Grid2
              sx={{
                width: "29%",
                textAlign: "center",
                justifyContent: "center",
                display: "flex",
                flexDirection: "column",
                mt: "6px",
                gap: "2px",
                height: "50px",
                // backgroundColor: "#F9FFFC",
                cursor: "pointer",
                // borderBottom: "3px solid #369D9C",
              }}
            >
              <Typography
                variant="h1"
                fontSize="12px"
                fontWeight="600"
                lineHeight="18px"
                color="#369D9C"
                display="flex"
                alignItems="center"
                justifyContent="center"
                gap="5px"
              >
                <img
                  src={lock_Logo}
                  alt="Lock Logo"
                  style={{
                    width: "10px",
                    height: "16px",
                    display: "inline-block",
                  }}
                />
                Scope 2
              </Typography>

              <Typography
                variant="body1"
                fontSize="9px"
                fontWeight="400"
                lineHeight="14px"
                color="#808080"
                mb="9px"
              >
                Indirect emissions from purchased utilities impact carbon
                footprint.
              </Typography>
            </Grid2>
 

            <Grid2
              sx={{
                width: "31%",
                textAlign: "center",
                justifyContent: "center",
                display: "flex",
                flexDirection: "column",
                mt: "6px",
                gap: "2px",
                cursor: "pointer",
                "&:hover": {
                  borderBottom: "3px solid #369D9C",
                },
              }}
            >
              <Typography
                variant="h1"
                fontSize="12px"
                fontWeight="600"
                lineHeight="18px"
                color="#369D9C"
                display="flex"
                alignItems="center"
                justifyContent="center"
                gap="5px"
              >
                <img
                  src={lock_Logo}
                  alt="Lock Logo"
                  style={{
                    width: "10px",
                    height: "16px",
                    display: "inline-block",
                  }}
                />
                Scope 3
              </Typography>

              <Typography
                variant="body1"
                fontSize="11px"
                fontWeight="400"
                lineHeight="21px"
                color="#808080"
              >
                Indirect emissions from purchased utilities impact carbon
                footprint.
              </Typography>
            </Grid2>
 

                variant="body1"
                fontSize="11px"
                fontWeight="400"
                lineHeight="21px"
                color="#808080"
 

                variant="body1"
                fontSize="9px"
                fontWeight="400"
                lineHeight="14px"
                color="#808080"
                mb="9px"
 

                width: "31%",
                textAlign: "center",
                justifyContent: "center",
                display: "flex",
                flexDirection: "column",
                mt: "6px",
                gap: "2px",
                cursor: "pointer",
 

            <Grid2
              sx={{
                width: "31%",
                textAlign: "center",
                justifyContent: "center",
                display: "flex",
                flexDirection: "column",
                mt: "6px",
                gap: "2px",
                cursor: "pointer",
                "&:hover": {
                  borderBottom: "3px solid #369D9C",
                },
              }}
            >
              <Typography
                variant="h1"
                fontSize="12px"
                fontWeight="600"
                lineHeight="18px"
                color="#369D9C"
                display="flex"
                alignItems="center"
                justifyContent="center"
                gap="5px"
              >
                <img
                  src={lock_Logo}
                  alt="Lock Logo"
                  style={{
                    width: "10px",
                    height: "16px",
                    display: "inline-block",
                  }}
                />
                Scope 3
              </Typography>

              <Typography
                variant="body1"
                fontSize="11px"
                fontWeight="400"
                lineHeight="21px"
                color="#808080"
              >
                Indirect emissions from purchased utilities impact carbon
                footprint.
              </Typography>
            </Grid2>
 

            <Grid2
              sx={{
                width: "31%",
                textAlign: "center",
                justifyContent: "center",
                display: "flex",
                flexDirection: "column",
                mt: "6px",
                gap: "2px",
                cursor: "pointer",
                
              }}
            >
              <Typography
                variant="h1"
                fontSize="12px"
                fontWeight="600"
                lineHeight="18px"
                color="#369D9C"
                display="flex"
                alignItems="center"
                justifyContent="center"
                gap="5px"
              >
                <img
                  src={lock_Logo}
                  alt="Lock Logo"
                  style={{
                    width: "10px",
                    height: "16px",
                    display: "inline-block",
                  }}
                />
                Scope 2
              </Typography>

              <Typography
                variant="body1"
                fontSize="11px"
                fontWeight="400"
                lineHeight="21px"
                color="#808080"
              >
                Indirect emissions from purchased utilities impact carbon
                footprint.
              </Typography>
            </Grid2>
 

                mt="1px"
 

                "&:hover": {
                  borderBottom: "3px solid #369D9C",
                },
 

                "&:hover": {
                 
                },
 

                backgroundColor: "#F9FFFC",
 

                backgroundColor: "#F9FFFC",
 

                <img
                  src={lock_Logo}
                  alt="Lock Logo"
                  style={{
                    width: "10px",
                    height: "16px",
                    display: "inline-block",
                  }}
                />
 

            <Grid2
              sx={{
                width: "31%",
                textAlign: "center",
                display: "flex",
                flexDirection: "column",
                mt: "6px",
                gap: "5px",
                backgroundColor: "#F9FFFC", // Background color on hover
                cursor: "pointer",
                "&:hover": {
                  borderBottom: "3px solid #369D9C", // Bottom border color on hover
                },
              }}
            >
              <Typography
                variant="h1"
                fontSize="14px"
                fontWeight="600"
                lineHeight="18px"
                color="#369D9C"
              >
                Scope 1
              </Typography>
              <Typography
                variant="body1"
                fontSize="11px"
                fontWeight="400"
                lineHeight="21px"
                color="#808080"
              >
                Your carbon footprint includes emissions from buildings and
                vehicles.
              </Typography>
            </Grid2>
 

            <Grid2
              sx={{
                width: "31%",
                textAlign: "center",
                display: "flex",
                flexDirection: "column",
                mt: "6px",
                gap: "2px",
                backgroundColor: "#F9FFFC",
                cursor: "pointer",
                "&:hover": {
                  borderBottom: "3px solid #369D9C",
                },
              }}
            >
              <Typography
                variant="h1"
                fontSize="14px"
                fontWeight="600"
                lineHeight="18px"
                color="#369D9C"
                gap="5px"
              >
                <img src={lock_Logo} style={{ marginRight: "6px" }} />
                Scope 3
              </Typography>
              <Typography
                variant="body1"
                fontSize="11px"
                fontWeight="400"
                lineHeight="21px"
                color="#808080"
              >
                Carbon footprint includes value chain supplier and customer
                emissions.
              </Typography>
            </Grid2>
 

                    marginRight: "6px",
 
<Typography
                variant="h1"
                fontSize="14px"
                fontWeight="600"
                lineHeight="18px"
                color="#369D9C"
                gap="5px"
              >
                <img src={lock_Logo} style={{ marginRight: "6px", width:"10px", height:"16px"}} />
                Scope 2
              </Typography>
 
component={Paper}
 
display:"flex",
            flexDirection: gap:"10px",
 
  <Grid2
          sx={{
            display: "flex",
            flexDirection: "column",
            gap: "20px",
            borderRadius: "10px",
            border: "1px solid none ",
          }}
        >
          <TableContainer component={Paper}>
            <Table sx={{ border: "0px" }}>
              <TableHead sx={{ bgcolor: "#f2fcfc", border:"1px solid none" }}>
                <TableRow>
                  <TableCell>Type of Process Emission</TableCell>
                  <TableCell>Category</TableCell>
                  <TableCell>Sub Category</TableCell>
                  <TableCell>Sub Sub Category</TableCell>
                  <TableCell>Sub Sub Sub Category</TableCell>
                  <TableCell>Quantity</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {rows.map((row, index) => (
                  <TableRow
                    key={index}
                    sx={{
                      "& > *": { padding: "16px 8px" },
                      borderBottom: "16px solid transparent",
                      alignItems: "center",
                      justifyContent: "center",
                      border:"0.5px solid none",
                      borderRadius:"4px",justifyContent:"space-between"
                    }}
                  >
                    <TableCell>{row.processType}</TableCell>
                    <TableCell>{row.category}</TableCell>
                    <TableCell>{row.subCategory}</TableCell>
                    <TableCell>{row.subSubCategory}</TableCell>
                    <TableCell>{row.subSubSubCategory}</TableCell>
                    <TableCell>{row.quantity}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
        </Grid2>
 
  <Grid2
          sx={{
            display: "flex",
            flexDirection: "column",
            gap: "20px",
            borderRadius: "10px",
            border: "1px solid none ",
          }}
        >
          <TableContainer component={Paper}>
            <Table sx={{ border: "0px" }}>
              <TableHead sx={{ bgcolor: "#f2fcfc", border:"1px solid none" }}>
                <TableRow>
                  <TableCell>Type of Process Emission</TableCell>
                  <TableCell>Category</TableCell>
                  <TableCell>Sub Category</TableCell>
                  <TableCell>Sub Sub Category</TableCell>
                  <TableCell>Sub Sub Sub Category</TableCell>
                  <TableCell>Quantity</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {rows.map((row, index) => (
                  <TableRow
                    key={index}
                    sx={{
                      "& > *": { padding: "16px 8px" },
                      borderBottom: "16px solid transparent",
                      alignItems: "center",
                      justifyContent: "center",
                      border:"0.5px solid none",
                      borderRadius:"4px",justifyContent:"space-between"
                    }}
                  >
                    <TableCell>{row.processType}</TableCell>
                    <TableCell>{row.category}</TableCell>
                    <TableCell>{row.subCategory}</TableCell>
                    <TableCell>{row.subSubCategory}</TableCell>
                    <TableCell>{row.subSubSubCategory}</TableCell>
                    <TableCell>{row.quantity}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
        </Grid2>
 

          padding: "35px 45px 45px 45px",
          width: "90%",
          bgcolor: "#ffffff",
          display: "flex",
          flexDirection: "column",
          margin: "0 auto",
          borderRadius: "16px",
 
borderRadius: "10px" 
 

        <Grid2 sx={{display:"flex",flexDirection:"column",gap:"16px"}}>
          <TableContainer component={Paper}>
            <Table>
              <TableHead sx={{ bgcolor: "#f2fcfc", borderRadius: "10px" }}>
                <TableRow>
                  <TableCell>Type of Process Emission</TableCell>
                  <TableCell>Category</TableCell>
                  <TableCell>Sub Category</TableCell>
                  <TableCell>Sub Sub Category</TableCell>
                  <TableCell>Sub Sub Sub Category</TableCell>
                  <TableCell>Quantity</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {rows.map((row, index) => (
                  <TableRow key={index}>
                    <TableCell>{row.processType}</TableCell>
                    <TableCell>{row.category}</TableCell>
                    <TableCell>{row.subCategory}</TableCell>
                    <TableCell>{row.subSubCategory}</TableCell>
                    <TableCell>{row.subSubSubCategory}</TableCell>
                    <TableCell>{row.quantity}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
        </Grid2>
 
display:"flex",flexDirection:"column",gap:
 

      </Grid>
 

        <Grid
          container
          sx={{
            padding: "35px 45px 45px 45px",
            width: "90%",
            bgcolor: "#ffffff",
            display: "flex",
            flexDirection: "column",
            margin: "0 auto",
            borderRadius: "16px",
          }}
        >
 
component={Paper}
 

        <Grid2>
          <Grid container spacing={2}>
            {fields.map((field, index) => (
              <Grid item xs={12} key={index}>
                <Box
                  sx={{
                    display: "flex",
                    alignItems: "center",
                  }}
                >
                  <Box sx={{ flex: 1 }}>
                    <Typography variant="body2">Fuel Type</Typography>
                    <TextField
                      select
                      name="fuel"
                      value={field.fuel}
                      onChange={(e) => handleChange(index, e)}
                      sx={{
                        width: "365px",
                        borderRadius: "5px",
                        border: "1px solid #D9D9D966",
                        height: "6vh",
                        mt: "-18px",
                        "& .MuiSelect-icon": {
                          display: "none",
                        },
                        "& .MuiInputBase-input": {
                          height: "10px",
                        },
                      }}
                      SelectProps={{
                        displayEmpty: true,
                      }}
                    >
                      <MenuItem value="" disabled>
                      Add Type of refrigerant
                      </MenuItem>
                      <MenuItem value="Fuel">Fuel</MenuItem>
                      <MenuItem value="Fuel2">Fuel2</MenuItem>
                      <MenuItem value="Fuel3">Fuel3</MenuItem>
                    </TextField>
                  </Box>

                  {field.fuel && (
                    <Box sx={{ display: "flex", gap: "16px" }}>
                      <Box sx={{ flex: 1 }}>
                        <Typography variant="body2">Quantity</Typography>
                        <TextField
                          name="quantity"
                          value={field.quantity}
                          placeholder="Quantity"
                          onChange={(e) => handleChange(index, e)}
                          sx={{
                            width: "365px",
                            borderRadius: "5px",
                            border: "1px solid #D9D9D966",
                            height: "6vh",
                            mb: "18.5px",
                          }}
                        />
                      </Box>

                      <Box sx={{ flex: 1 }}>
                        <Typography variant="body2">Unit</Typography>
                        <TextField
                          select
                          name="unit"
                          value={field.unit}
                          onChange={(e) => handleChange(index, e)}
                          sx={{
                            width: "365px",
                            borderRadius: "5px",
                            border: "1px solid #D9D9D966",
                            height: "6vh",
                          }}
                          SelectProps={{
                            displayEmpty: true,
                          }}
                        >
                          <MenuItem value="" disabled>
                            Select unit
                          </MenuItem>
                          <MenuItem value="Gallons">Gallons</MenuItem>
                          <MenuItem value="Liters">Liters</MenuItem>
                        </TextField>
                      </Box>
                    </Box>
                  )}
                </Box>
              </Grid>
            ))}
          </Grid>
        </Grid2>
 

import Refri_Logo from "../../../assets/images/refri_logo.svg"
 

import down_Arrow from "../../../assets/images/down_arrow.svg";
import InputAdornment from "@mui/material/InputAdornment";
 
Input the type and amount of refrigerant used to account for emissions from refrigerant Consumption.
 

            Fuel Consumption
 
RefrigerantData
 
Select fuel type
 
/Refrigerant_Logo.svg
 

import fuel_Logo from "../../../assets/images/fuel_logo.svg";
 

            Enter the type and quantity of fuel used (e.g., diesel, gasoline) to
            calculate direct emissions from combustion.
 

        padding: "16px",
 

        boxSizing: "border-box",
 
 backgroundColor: "#E3E3E3", minHeight: "100vh" 
 
FuelConsumption
 

                        // Add the SVG using InputAdornment
                        endAdornment: (
                         
                        ),
 
 <InputAdornment position="end" >
                            <Box onChange={(e) => handleChange(index, e)} value={field.fuel}>
                            <img
                              src={down_Arrow}
                              alt="Arrow"
                              style={{ width: "24px", height: "24px" }}
                            />
                            </Box>
                          </InputAdornment>
 
 SelectProps={{
                        displayEmpty: true,
                        // Add the SVG using InputAdornment
                        endAdornment: (
                          <InputAdornment position="end" >
                            <Box onChange={(e) => handleChange(index, e)} value={field.fuel}>
                            <img
                              src={down_Arrow}
                              alt="Arrow"
                              style={{ width: "24px", height: "24px" }}
                            />
                            </Box>
                          </InputAdornment>
                        ),
                      }}
 

                      SelectProps={{
                        ),
 

                        displayEmpty: true,
                        // Add the SVG using InputAdornment
                        endAdornment: (
                          <InputAdornment position="end" >
                            <Box onChange={(e) => handleChange(index, e)} value={field.fuel}>
                            <img
                              src={down_Arrow}
                              alt="Arrow"
                              style={{ width: "24px", height: "24px" }}
                            />
                            </Box>
                          </InputAdornment>
 

                      SelectProps={{
                        displayEmpty: true,
                        displayEmpty: true,
                        IconComponent: down_Arrow
                      }}
 
ArrowDownIcon, // Use the SVG as the dropdown icon
 

                    </Grid2>
 

                    <Grid2 sx={}>
 

                    <Grid2 sx={}>
 
sx={{ marginBottom: "4px" }}
 
}>
    Fuel Type
 

        padding: "0 14px", // Adjust padding for alignment
 

        height: "100%", // Ensure the input height matches the container
 

                <Box sx={{ flex: 1 }}>
                  <TextField
                    select
                    name="fuel"
                    value={field.fuel}
                    onChange={(e) => handleChange(index, e)}
                    sx={{
                      width: "365px",
                      borderRadius: "5px",
                      border: "1px solid #D9D9D966",
                      height: "6vh",
                      "& .MuiSelect-icon": {
                        display: "none",
                      },
                      "& .MuiInputBase-input": {
                        height: "10px",
                      },
                    }}
                    SelectProps={{
                      displayEmpty: true,
                    }}
                  >
                    <MenuItem value="" disabled>
                      Select fuel type
                    </MenuItem>
                    <MenuItem value="Fuel">Fuel</MenuItem>
                    <MenuItem value="Fuel2">Fuel2</MenuItem>
                    <MenuItem value="Fuel3">Fuel3</MenuItem>
                  </TextField>
                </Box>
 
<Grid container spacing={2}>
          {fields.map((field, index) => (
            <Grid item xs={12} key={index}>
              <Box
                sx={{
                  display: "flex",
                  alignItems: "center",
                }}
              >
                <Box sx={{ flex: 1 }}>
                  <TextField
                    select
                    name="fuel"
                    value={field.fuel}
                    onChange={(e) => handleChange(index, e)}
                    sx={{
                      width: "365px",
                      borderRadius: "5px",
                      border: "1px solid #D9D9D966",
                      height: "6vh",
                      "& .MuiSelect-icon": {
                        display: "none",
                      },
                      "& .MuiInputBase-input": {
                        height: "10px",
                      },
                    }}
                    SelectProps={{
                      displayEmpty: true,
                    }}
                  >
                    <MenuItem value="" disabled>
                      Select fuel type
                    </MenuItem>
                    <MenuItem value="Fuel">Fuel</MenuItem>
                    <MenuItem value="Fuel2">Fuel2</MenuItem>
                    <MenuItem value="Fuel3">Fuel3</MenuItem>
                  </TextField>
                </Box>

                {field.fuel && (
                  <Box sx={{ display: "flex", gap: "16px", }}>
                    <Box sx={{ flex: 1 }}>
                      <Typography variant="body2" >
                        Quantity
                      </Typography>
                      <TextField
                        name="quantity"
                        value={field.quantity}
                        placeholder="Quantity"
                        onChange={(e) => handleChange(index, e)}
                        sx={{
                          width: "365px",
                          borderRadius: "5px",
                          border: "1px solid #D9D9D966",
                          height: "6vh",
                          mb:"18.5px"
                        }}
                      />
                    </Box>

                    <Box sx={{ flex: 1 }}>
                      <Typography variant="body2">
                        Unit
                      </Typography>
                      <TextField
                        select
                        name="unit"
                        value={field.unit}
                        onChange={(e) => handleChange(index, e)}
                        sx={{
                          width: "365px",
                          borderRadius: "5px",
                          border: "1px solid #D9D9D966",
                          height: "6vh",
                        }}
                        SelectProps={{
                          displayEmpty: true,
                        }}
                      >
                        <MenuItem value="" disabled>
                          Select unit
                        </MenuItem>
                        <MenuItem value="Gallons">Gallons</MenuItem>
                        <MenuItem value="Liters">Liters</MenuItem>
                      </TextField>
                    </Box>
                  </Box>
                )}
              </Box>
            </Grid>
          ))}
        </Grid>
 

        <Typography variant="body2" width="70px">Fuel Type</Typography>
 

                        height: "10px",
 

        <Grid2>
        <Typography variant="body2" width="70px">Fuel Type</Typography>
        <Grid container spacing={2}>
          {fields.map((field, index) => (
            <Grid item xs={12} key={index}>
              <Box
                sx={{
                  display: "flex",
                  alignItems: "center",
                }}
              >
                <Box sx={{ flex: 1 }}>
                  <TextField
                    select
                    name="fuel"
                    value={field.fuel}
                    onChange={(e) => handleChange(index, e)}
                    sx={{
                      width: "365px",
                      borderRadius: "5px",
                      border: "1px solid #D9D9D966",
                      height: "6vh",
                      "& .MuiSelect-icon": {
                        display: "none",
                      },
                      "& .MuiInputBase-input": {
                        height: "10px",
                      },
                    }}
                    SelectProps={{
                      displayEmpty: true,
                    }}
                  >
                    <MenuItem value="" disabled>
                      Select fuel type
                    </MenuItem>
                    <MenuItem value="Fuel">Fuel</MenuItem>
                    <MenuItem value="Fuel2">Fuel2</MenuItem>
                    <MenuItem value="Fuel3">Fuel3</MenuItem>
                  </TextField>
                </Box>

                {field.fuel && (
                  <Box sx={{ display: "flex", gap: "16px", }}>
                    <Box sx={{ flex: 1 }}>
                      <Typography variant="body2" >
                        Quantity
                      </Typography>
                      <TextField
                        name="quantity"
                        value={field.quantity}
                        placeholder="Quantity"
                        onChange={(e) => handleChange(index, e)}
                        sx={{
                          width: "365px",
                          borderRadius: "5px",
                          border: "1px solid #D9D9D966",
                          height: "6vh",
                        }}
                      />
                    </Box>

                    <Box sx={{ flex: 1 }}>
                      <Typography variant="body2">
                        Unit
                      </Typography>
                      <TextField
                        select
                        name="unit"
                        value={field.unit}
                        onChange={(e) => handleChange(index, e)}
                        sx={{
                          width: "365px",
                          borderRadius: "5px",
                          border: "1px solid #D9D9D966",
                          height: "6vh",
                        }}
                        SelectProps={{
                          displayEmpty: true,
                        }}
                      >
                        <MenuItem value="" disabled>
                          Select unit
                        </MenuItem>
                        <MenuItem value="Gallons">Gallons</MenuItem>
                        <MenuItem value="Liters">Liters</MenuItem>
                      </TextField>
                    </Box>
                  </Box>
                )}
              </Box>
            </Grid>
          ))}
        </Grid>
        </Grid2>
 
sx={{ marginBottom: "5px" }}
 
sx={{ marginBottom: "5px" }}
 
 sx={{ marginBottom: "5px" }
 
 gap: "16px",
 

                        paddingRight: "50px",
 

                  gap: "16px",
                  marginBottom: "10px",
 
spacing={2}
 
import React, { useState } from "react";
import { Box, Grid, Typography, TextField, MenuItem } from "@mui/material";
import fuel_Logo from "../../../assets/images/fuel_logo.svg";

function FuelConsumption() {
  // Initialize fields with one empty row
  const [fields, setFields] = useState([{ fuel: "", quantity: "", unit: "" }]);

  // Handle changes in any input field
  const handleChange = (index, event) => {
    const { name, value } = event.target;
    const updatedFields = [...fields];
    updatedFields[index][name] = value;
    setFields(updatedFields);

    // Check if the current row is complete
    const isRowComplete =
      updatedFields[index].fuel &&
      updatedFields[index].quantity &&
      updatedFields[index].unit;

    // If the current row is complete and it’s the last row, add a new row
    if (isRowComplete && index === fields.length - 1) {
      setFields([...updatedFields, { fuel: "", quantity: "", unit: "" }]);
    }
  };

  return (
    <div>
      <Grid
        container
        sx={{
          padding: "25px 50px",
          width: "90%",
          bgcolor: "#ffffff",
          display: "flex",
          flexDirection: "column",
          margin: "0 auto",
          borderRadius: "16px",
        }}
      >
        <Grid item xs={12} sx={{ marginBottom: "20px" }}>
          <Typography
            variant="h1"
            fontSize="20px"
            fontWeight="600"
            lineHeight="28px"
            color="#000000"
            sx={{ display: "flex", alignItems: "center" }}
          >
            <img
              src={fuel_Logo}
              alt="fuel_logo"
              width="13.36px"
              height="19.49px"
              style={{ marginRight: "6px" }}
            />
            Fuel Consumption
          </Typography>
          <Typography
            variant="body1"
            fontSize="12px"
            fontWeight="400"
            lineHeight="22.4px"
            color="#717171"
            sx={{ marginTop: "8px" }}
          >
            Enter the type and quantity of fuel used (e.g., diesel, gasoline) to
            calculate direct emissions from combustion.
          </Typography>
        </Grid>
        <Typography variant="body2">Fuel Type</Typography>
        <Grid container spacing={2}>
          {fields.map((field, index) => (
            <Grid item xs={12} key={index}>
              <Box
                sx={{
                  display: "flex",
                  alignItems: "center",
                  gap: "16px",
                  marginBottom: "10px",
                }}
              >
                <Box sx={{ flex: 1 }}>
                  <TextField
                    select
                    name="fuel"
                    value={field.fuel}
                    onChange={(e) => handleChange(index, e)}
                    sx={{
                      width: "100%",
                      borderRadius: "5px",
                      border: "1px solid #D9D9D966",
                      height: "6vh",
                      "& .MuiSelect-icon": {
                        display: "none",
                      },
                      "& .MuiInputBase-input": {
                        paddingRight: "50px",
                        height: "10px",
                      },
                    }}
                    SelectProps={{
                      displayEmpty: true,
                    }}
                  >
                    <MenuItem value="" disabled>
                      Select fuel type
                    </MenuItem>
                    <MenuItem value="Fuel">Fuel</MenuItem>
                    <MenuItem value="Fuel2">Fuel2</MenuItem>
                    <MenuItem value="Fuel3">Fuel3</MenuItem>
                  </TextField>
                </Box>

                {field.fuel && (
                  <Box sx={{ display: "flex", gap: "16px", alignItems: "center" }}>
                    <Box sx={{ flex: 1 }}>
                      <Typography variant="body2" sx={{ marginBottom: "5px" }}>
                        Quantity
                      </Typography>
                      <TextField
                        name="quantity"
                        value={field.quantity}
                        placeholder="Quantity"
                        onChange={(e) => handleChange(index, e)}
                        sx={{
                          width: "100%",
                          borderRadius: "5px",
                          border: "1px solid #D9D9D966",
                          height: "6vh",
                        }}
                      />
                    </Box>

                    <Box sx={{ flex: 1 }}>
                      <Typography variant="body2" sx={{ marginBottom: "5px" }}>
                        Unit
                      </Typography>
                      <TextField
                        select
                        name="unit"
                        value={field.unit}
                        onChange={(e) => handleChange(index, e)}
                        sx={{
                          width: "100%",
                          borderRadius: "5px",
                          border: "1px solid #D9D9D966",
                          height: "6vh",
                        }}
                        SelectProps={{
                          displayEmpty: true,
                        }}
                      >
                        <MenuItem value="" disabled>
                          Select unit
                        </MenuItem>
                        <MenuItem value="Gallons">Gallons</MenuItem>
                        <MenuItem value="Liters">Liters</MenuItem>
                      </TextField>
                    </Box>
                  </Box>
                )}
              </Box>
            </Grid>
          ))}
        </Grid>
      </Grid>
    </div>
  );
}

export default FuelConsumption;

 
import React, { useState } from "react";
import { Box, Grid, Typography, TextField, MenuItem } from "@mui/material";
import fuel_Logo from "../../../assets/images/fuel_logo.svg";

function FuelConsumption() {
  // Initialize fields with one empty row
  const [fields, setFields] = useState([{ fuel: "", quantity: "", unit: "" }]);

  // Handle changes in any input field
  const handleChange = (index, event) => {
    const { name, value } = event.target;
    const updatedFields = [...fields];
    updatedFields[index][name] = value;
    setFields(updatedFields);

    // Check if the current row is complete
    const isRowComplete =
      updatedFields[index].fuel &&
      updatedFields[index].quantity &&
      updatedFields[index].unit;

    // If the current row is complete and it’s the last row, add a new row
    if (isRowComplete && index === fields.length - 1) {
      setFields([...updatedFields, { fuel: "", quantity: "", unit: "" }]);
    }
  };

  return (
    <div>
      <Grid
        container
        sx={{
          padding: "25px 50px",
          width: "90%",
          bgcolor: "#ffffff",
          display: "flex",
          flexDirection: "column",
          margin: "0 auto",
          borderRadius: "16px",
        }}
      >
        <Grid item xs={12} sx={{ marginBottom: "20px" }}>
          <Typography
            variant="h1"
            fontSize="20px"
            fontWeight="600"
            lineHeight="28px"
            color="#000000"
            sx={{ display: "flex", alignItems: "center" }}
          >
            <img
              src={fuel_Logo}
              alt="fuel_logo"
              width="13.36px"
              height="19.49px"
              style={{ marginRight: "6px" }}
            />
            Fuel Consumption
          </Typography>
          <Typography
            variant="body1"
            fontSize="12px"
            fontWeight="400"
            lineHeight="22.4px"
            color="#717171"
            sx={{ marginTop: "8px" }}
          >
            Enter the type and quantity of fuel used (e.g., diesel, gasoline) to
            calculate direct emissions from combustion.
          </Typography>
        </Grid>
        <Typography variant="body2">Fuel Type</Typography>
        <Grid container spacing={2} sx={{ display: "flex", flexDirection: "column" }}>
          {fields.map((field, index) => (
            <Grid item xs={12} key={index}>
              <Box sx={{ display: "flex", alignItems: "center", gap: "10px", marginBottom: "10px" }}>
                <TextField
                  select
                  name="fuel"
                  value={field.fuel}
                  onChange={(e) => handleChange(index, e)}
                  sx={{
                    width: "300px",
                    borderRadius: "5px",
                    border: "1px solid #D9D9D966",
                    height: "6vh",
                    "& .MuiSelect-icon": {
                      display: "none",
                    },
                    "& .MuiInputBase-input": {
                      paddingRight: "50px",
                      height: "10px",
                    },
                  }}
                  SelectProps={{
                    displayEmpty: true,
                  }}
                >
                  <MenuItem value="" disabled>
                    Select fuel type
                  </MenuItem>
                  <MenuItem value="Fuel">Fuel</MenuItem>
                  <MenuItem value="Fuel2">Fuel2</MenuItem>
                  <MenuItem value="Fuel3">Fuel3</MenuItem>
                </TextField>

                {field.fuel && (
                  <>
                    <Box sx={{ display: "flex", flexDirection: "column", width: "150px" }}>
                      <Typography variant="body2" sx={{ marginBottom: "5px" }}>Quantity</Typography>
                      <TextField
                        name="quantity"
                        value={field.quantity}
                        placeholder="Quantity"
                        onChange={(e) => handleChange(index, e)}
                        sx={{
                          width: "100%",
                          borderRadius: "5px",
                          border: "1px solid #D9D9D966",
                          height: "6vh",
                        }}
                      />
                    </Box>

                    <Box sx={{ display: "flex", flexDirection: "column", width: "150px" }}>
                      <Typography variant="body2" sx={{ marginBottom: "5px" }}>Unit</Typography>
                      <TextField
                        select
                        name="unit"
                        value={field.unit}
                        onChange={(e) => handleChange(index, e)}
                        sx={{
                          width: "100%",
                          borderRadius: "5px",
                          border: "1px solid #D9D9D966",
                          height: "6vh",
                        }}
                        SelectProps={{
                          displayEmpty: true,
                        }}
                      >
                        <MenuItem value="" disabled>
                          Select unit
                        </MenuItem>
                        <MenuItem value="Gallons">Gallons</MenuItem>
                        <MenuItem value="Liters">Liters</MenuItem>
                      </TextField>
                    </Box>
                  </>
                )}
              </Box>
            </Grid>
          ))}
        </Grid>
      </Grid>
    </div>
  );
}

export default FuelConsumption;

 
sx={{ marginBottom: "5px" }}
 
sx={{ marginBottom: "5px" }}
 
<Typography variant="body2" sx={{ marginBottom: "5px" }}>Fuel </Typography>
 
 marginBottom: "10px"
 
import React, { useState } from "react";
import { Box, Grid, Typography, TextField, MenuItem } from "@mui/material";
import fuel_Logo from "../../../assets/images/fuel_logo.svg";
import downArrow from "../../../assets/images/down_arrow.svg";

function FuelConsumption() {
  // Initialize fields with one empty row
  const [fields, setFields] = useState([{ fuel: "", quantity: "", unit: "" }]);

  // Handle changes in any input field
  const handleChange = (index, event) => {
    const { name, value } = event.target;
    const updatedFields = [...fields];
    updatedFields[index][name] = value;
    setFields(updatedFields);

    // Check if the current row is complete
    const isRowComplete =
      updatedFields[index].fuel &&
      updatedFields[index].quantity &&
      updatedFields[index].unit;

    // If the current row is complete, add a new row
    if (isRowComplete && index === fields.length - 1) {
      setFields([...updatedFields, { fuel: "", quantity: "", unit: "" }]);
    }
  };

  return (
    <div>
      <Grid
        container
        sx={{
          padding: "25px 50px",
          width: "90%",
          bgcolor: "#ffffff",
          display: "flex",
          flexDirection: "column",
          margin: "0 auto",
          borderRadius: "16px",
        }}
      >
        <Grid item xs={12} sx={{ marginBottom: "20px" }}>
          <Typography
            variant="h1"
            fontSize="20px"
            fontWeight="600"
            lineHeight="28px"
            color="#000000"
            sx={{ display: "flex", alignItems: "center" }}
          >
            <img
              src={fuel_Logo}
              alt="fuel_logo"
              width="13.36px"
              height="19.49px"
              style={{ marginRight: "6px" }}
            />
            Fuel Consumption
          </Typography>
          <Typography
            variant="body1"
            fontSize="12px"
            fontWeight="400"
            lineHeight="22.4px"
            color="#717171"
            sx={{ marginTop: "8px" }}
          >
            Enter the type and quantity of fuel used (e.g., diesel, gasoline) to
            calculate direct emissions from combustion.
          </Typography>
        </Grid>

        <Grid container spacing={2} sx={{ display: "flex", flexDirection: "column" }}>
          {fields.map((field, index) => (
            <Grid item xs={12} sm={6} md={4} key={index}>
              <Box sx={{ marginBottom: "10px" }}>
                <TextField
                  select
                  name="fuel"
                  value={field.fuel}
                  onChange={(e) => handleChange(index, e)}
                  sx={{
                    width: "300px",
                    borderRadius: "5px",
                    border: "1px solid #D9D9D966",
                    height: "6vh",
                    "& .MuiSelect-icon": {
                      display: "none",
                    },
                    "& .MuiInputBase-input": {
                      paddingRight: "50px",
                      height: "10px",
                    },
                  }}
                  SelectProps={{
                    displayEmpty: true,
                  }}
                >
                  <MenuItem value="" disabled>
                    Select fuel type
                  </MenuItem>
                  <MenuItem value="Fuel">Fuel</MenuItem>
                  <MenuItem value="Fuel2">Fuel2</MenuItem>
                  <MenuItem value="Fuel3">Fuel3</MenuItem>
                </TextField>

                {field.fuel && (
                  <Box sx={{ marginTop: "10px" }}>
                    <Box sx={{ marginBottom: "5px" }}>
                      <Typography variant="body2">Quantity</Typography>
                      <TextField
                        name="quantity"
                        value={field.quantity}
                        placeholder="Quantity"
                        onChange={(e) => handleChange(index, e)}
                        sx={{
                          width: "300px",
                          borderRadius: "5px",
                          border: "1px solid #D9D9D966",
                          height: "6vh",
                        }}
                      />
                    </Box>

                    <Box>
                      <Typography variant="body2" sx={{ marginBottom: "5px" }}>
                        Unit
                      </Typography>
                      <TextField
                        select
                        name="unit"
                        value={field.unit}
                        onChange={(e) => handleChange(index, e)}
                        sx={{
                          width: "300px",
                          borderRadius: "5px",
                          border: "1px solid #D9D9D966",
                          height: "6vh",
                        }}
                        SelectProps={{
                          displayEmpty: true,
                        }}
                      >
                        <MenuItem value="" disabled>
                          Select unit
                        </MenuItem>
                        <MenuItem value="Gallons">Gallons</MenuItem>
                        <MenuItem value="Liters">Liters</MenuItem>
                      </TextField>
                    </Box>
                  </Box>
                )}
              </Box>
            </Grid>
          ))}
        </Grid>
      </Grid>
    </div>
  );
}

export default FuelConsumption;

 
import { Box, Grid2, Typography } from "@mui/material";
import React from "react";
import fuel_Logo from "../../../assets/images/fuel_logo.svg";
import InputLabel from "@mui/material/InputLabel";
import MenuItem from "@mui/material/MenuItem";
import Select from "@mui/material/Select";
import TextField from "@mui/material/TextField";
import downArrow from "../../../assets/images/down_arrow.svg";
import { useState } from "react";
function FuelConsumption() {
  // Initialize fields with one empty row
  const [fields, setFields] = useState([{ fuel: "", quantity: "", unit: "" }]);

  // Handle changes in any input field
  const handleChange = (index, event) => {
    const { name, value } = event.target;
    const updatedFields = [...fields];
    updatedFields[index][name] = value;
    setFields(updatedFields);

    // Check if the current row is complete
    const isRowComplete =
      updatedFields[index].fuel &&
      updatedFields[index].quantity &&
      updatedFields[index].unit;

    // If the current row is complete, add a new row
    if (isRowComplete) {
      // Add a new row and move focus to it
      setFields([...updatedFields, { fuel: "", quantity: "", unit: "" }]);
    }
  };
  const [fuel, setFuel] = useState("");
  console.log(fuel);
  //   const handleChange = (event) => {
  //     const selectedFuel = event.target.value;
  //     setFuel(selectedFuel);
  //     console.log("Selected fuel:", selectedFuel); // Log the selected value to the console
  //   };
  return (
    <div>
      <Grid2
        sx={{
          padding: "25px 50px 25px 40px",
          width: "90%",
          height: "230px",
          bgcolor: "#ffffff",
          display: "flex",
          flexDirection: "column",
          margin: "0 auto",
          borderRadius: "16px",
        }}
      >
        <Grid2 sx={{ display: "flex", flexDirection: "column", gap: "6px" }}>
          <Typography
            variant="h1"
            fontSize="20px"
            fontWeight="600"
            lineHeight="28px"
            color="#000000"
            sx={{ display: "flex", alignItems: "center" }}
          >
            <img
              src={fuel_Logo}
              alt="fuel_logo"
              width="13.36px"
              height="19.49px"
              style={{ marginRight: "6px" }}
            />{" "}
            Fuel Consumption
          </Typography>
          <Typography
            variant="body1"
            fontSize="12px"
            fontWeight="400"
            lineHeight="22.4px"
            color="#717171"
          >
            Enter the type and quantity of fuel used (e.g., diesel, gasoline) to
            calculate direct emissions from combustion.
          </Typography>
          <Typography variant="p" marginTop="20px">
            Fuel Type
          </Typography>
          <Grid2
            container
            spacing={5}
            sx={{ display: "flex", flexDirection: "column", gap: "10px" }}
          >
            {fields.map((field, index) => (
              <Grid2 key={index} xs={12} sm={6} md={4}>
                <Box sx={{ marginBottom: "10px" }}>
                  <TextField
                    select
                    name="fuel"
                    value={field.fuel}
                    onChange={(e) => handleChange(index, e)}
                    sx={{
                      width: "300px",
                      borderRadius: "5px",
                      border: "1px solid #D9D9D966",
                      height: "6vh",
                      "& .MuiSelect-icon": {
                        display: "none",
                      },
                      "& .MuiInputBase-input": {
                        paddingRight: "50px",
                        height: "10px",
                      },
                    }}
                    SelectProps={{
                      displayEmpty: true,
                    }}
                  >
                    <MenuItem value="" disabled>
                      Select fuel type
                    </MenuItem>
                    <MenuItem value="Fuel">Fuel</MenuItem>
                    <MenuItem value="Fuel2">Fuel2</MenuItem>
                    <MenuItem value="Fuel3">Fuel3</MenuItem>
                  </TextField>
                  {field.fuel && ( // Show quantity and unit fields only if fuel is selected
                    <>
                      <TextField
                        name="quantity"
                        value={field.quantity}
                        placeholder="Quantity"
                        onChange={(e) => handleChange(index, e)}
                        sx={{
                          width: "300px",
                          borderRadius: "5px",
                          border: "1px solid #D9D9D966",
                          height: "6vh",
                        }}
                      />
                      <TextField
                        select
                        name="unit"
                        value={field.unit}
                        onChange={(e) => handleChange(index, e)}
                        sx={{
                          width: "300px",
                          borderRadius: "5px",
                          border: "1px solid #D9D9D966",
                          height: "6vh",
                        }}
                        SelectProps={{
                          displayEmpty: true,
                        }}
                      >
                        <MenuItem value="" disabled>
                          Select unit
                        </MenuItem>
                        <MenuItem value="Gallons">Gallons</MenuItem>
                        <MenuItem value="Liters">Liters</MenuItem>
                      </TextField>
                    </>
                  )}
                </Box>
              </Grid2>
            ))}
          </Grid2>
        </Grid2>
      </Grid2>
    </div>
  );
}

export default FuelConsumption;

 

                  {field.fuel && ( // Show quantity and unit fields only if fuel is selected
                    <>
                      <TextField
                        name="quantity"
                        value={field.quantity}
                        placeholder="Quantity"
                        onChange={(e) => handleChange(index, e)}
                        sx={{
                          width: "300px",
                          borderRadius: "5px",
                          border: "1px solid #D9D9D966",
                          height: "6vh",
                        }}
                      />
                      <TextField
                        select
                        name="unit"
                        value={field.unit}
                        onChange={(e) => handleChange(index, e)}
                        sx={{
                          width: "300px",
                          borderRadius: "5px",
                          border: "1px solid #D9D9D966",
                          height: "6vh",
                        }}
                        SelectProps={{
                          displayEmpty: true,
                        }}
                      >
                        <MenuItem value="" disabled>
                          Select unit
                        </MenuItem>
                        <MenuItem value="Gallons">Gallons</MenuItem>
                        <MenuItem value="Liters">Liters</MenuItem>
                      </TextField>
                    </>
                  )}
 
<>
 

                    </>
 

                    <l></l>
 

                      <Label
 

  const handleChange = (index, event) => {
    const { name, value } = event.target;
    const updatedFields = [...fields];
    updatedFields[index][name] = value;
    setFields(updatedFields);

    // Check if the current row is complete
    const isRowComplete =
      updatedFields[index].fuel &&
      updatedFields[index].quantity &&
      updatedFields[index].unit;

    // If the current row is complete, add a new row
    if (isRowComplete) {
      // Add a new row and move focus to it
      setFields([...updatedFields, { fuel: "", quantity: "", unit: "" }]);
    }
  };
 
 <Grid2
            container
            spacing={5}
            sx={{ display: "flex", flexDirection: "column", gap: "10px" }}
          >
            {fields.map((field, index) => (
              <Grid2 key={index} xs={12} sm={6} md={4}>
                <Box sx={{ marginBottom: "10px" }}>
                  <TextField
                    select
                    name="fuel"
                    value={field.fuel}
                    onChange={(e) => handleChange(index, e)}
                    sx={{
                      width: "300px",
                      borderRadius: "5px",
                      border: "1px solid #D9D9D966",
                      height: "6vh",
                      "& .MuiSelect-icon": {
                        display: "none",
                      },
                      "& .MuiInputBase-input": {
                        paddingRight: "50px",
                        height: "10px",
                      },
                    }}
                    SelectProps={{
                      displayEmpty: true,
                    }}
                  >
                    <MenuItem value="" disabled>
                      Select fuel type
                    </MenuItem>
                    <MenuItem value="Fuel">Fuel</MenuItem>
                    <MenuItem value="Fuel2">Fuel2</MenuItem>
                    <MenuItem value="Fuel3">Fuel3</MenuItem>
                  </TextField>
                  {field.fuel && ( // Show quantity and unit fields only if fuel is selected
                    <>
                      <TextField
                        name="quantity"
                        value={field.quantity}
                        placeholder="Quantity"
                        onChange={(e) => handleChange(index, e)}
                        sx={{
                          width: "300px",
                          borderRadius: "5px",
                          border: "1px solid #D9D9D966",
                          height: "6vh",
                        }}
                      />
                      <TextField
                        select
                        name="unit"
                        value={field.unit}
                        onChange={(e) => handleChange(index, e)}
                        sx={{
                          width: "300px",
                          borderRadius: "5px",
                          border: "1px solid #D9D9D966",
                          height: "6vh",
                        }}
                        SelectProps={{
                          displayEmpty: true,
                        }}
                      >
                        <MenuItem value="" disabled>
                          Select unit
                        </MenuItem>
                        <MenuItem value="Gallons">Gallons</MenuItem>
                        <MenuItem value="Liters">Liters</MenuItem>
                      </TextField>
                    </>
                  )}
                </Box>
              </Grid2>
            ))}
          </Grid2>
 

                      marginTop: "10px",
 

                      marginTop: "10px",
 
alignItems:
 
00%
 

          <Grid2 sx={{ display: "flex", flexDirection: "row", gap: "20px" }}>
            {fields.map((field, index) => (
              <Box key={index} sx={{ marginBottom: "10px" }}>
                <TextField
                  select
                  name="fuel"
                  value={field.fuel}
                  onChange={(e) => handleChange(index, e)}
                  sx={{
                    width: "360.66px",
                    borderRadius: "5px",
                    border: "1px solid #D9D9D966",
                    height: "6vh",
                    "& .MuiSelect-icon": {
                      display: "none",
                    },
                    "& .MuiInputBase-input": {
                      paddingRight: "50px",
                      height: "10px",
                    },
                  }}
                  SelectProps={{
                    displayEmpty: true,
                  }}
                >
                  <MenuItem value="" disabled>
                    Select fuel type
                  </MenuItem>
                  <MenuItem value="Fuel">Fuel</MenuItem>
                  <MenuItem value="Fuel2">Fuel2</MenuItem>
                  <MenuItem value="Fuel3">Fuel3</MenuItem>
                </TextField>
                {field.fuel && ( // Show quantity and unit fields only if fuel is selected
                  <>
                    <TextField
                      name="quantity"
                      value={field.quantity}
                      placeholder="Quantity"
                      onChange={(e) => handleChange(index, e)}
                      sx={{
                        width: "360.66px",
                        borderRadius: "5px",
                        border: "1px solid #D9D9D966",
                        height: "6vh",
                      }}
                    />
                    <TextField
                      select
                      name="unit"
                      value={field.unit}
                      onChange={(e) => handleChange(index, e)}
                      sx={{
                        width: "360.66px",
                        borderRadius: "5px",
                        border: "1px solid #D9D9D966",
                        height: "6vh",
                      }}
                      SelectProps={{
                        displayEmpty: true,
                      }}
                    >
                      <MenuItem value="" disabled>
                        Select unit
                      </MenuItem>
                      <MenuItem value="Gallons">Gallons</MenuItem>
                      <MenuItem value="Liters">Liters</MenuItem>
                    </TextField>
                  </>
                )}
              </Box>
            ))}
          </Grid2>
 
 <Grid2
            sx={{ display: "flex", flexDirection: "row", gap: "300px" }}
          ></Grid2>
 

            {/* <Box sx={{ position: "relative", width: "360.66px" }}>
              <TextField
                select
                value={fuel}
                height="6vh"
                onChange={handleChange}
                sx={{
                  width: "100%",
                  borderRadius: "5px",
                  border: "1px solid #D9D9D966",
                  "& .MuiSelect-icon": {
                    display: "none",
                  },
                  "& .MuiInputBase-input": {
                    paddingRight: "50px",
                    height: "10px",
                  },
                }}
                SelectProps={{
                  displayEmpty: true,
                }}
              >
                <MenuItem value="" disabled>
                  Select fuel type
                </MenuItem>
                <MenuItem value="fuel">Fuel</MenuItem>
                <MenuItem value="fuel2">Fuel2</MenuItem>
                <MenuItem value="fuel3">Fuel3</MenuItem>
              </TextField>
              <img
                src={downArrow}
                alt="Dropdown arrow"
                style={{
                  position: "absolute",
                  right: "10px",
                  top: "50%",
                  transform: "translateY(-50%)",
                  width: "15px",
                  height: "9.25px",
                  pointerEvents: "none",
                  marginRight: "10px",
                }}
              />
            </Box>
            <TextField
              height="6vh"
              sx={{
                width: "400px",
                borderRadius: "5px",
                border: "1px solid #D9D9D966",
              }}
            ></TextField>
            <Box sx={{ position: "relative", width: "360.66px" }}>
              <TextField
                select
                value={fuel}
                height="6vh"
                onChange={handleChange}
                sx={{
                  width: "100%",
                  borderRadius: "5px",
                  border: "1px solid #D9D9D966",
                  "& .MuiSelect-icon": {
                    display: "none",
                  },
                  "& .MuiInputBase-input": {
                    paddingRight: "50px",
                    height: "10px",
                  },
                }}
                SelectProps={{
                  displayEmpty: true,
                }}
              >
                <MenuItem value="" disabled>
                  Select fuel type
                </MenuItem>
                <MenuItem value="Unit">Gallons</MenuItem>
                <MenuItem value="Unit">Liters</MenuItem>
              </TextField>
              <img
                src={downArrow}
                alt="Dropdown arrow"
                style={{
                  position: "absolute",
                  right: "10px",
                  top: "50%",
                  transform: "translateY(-50%)",
                  width: "15px",
                  height: "9.25px",
                  pointerEvents: "none",
                  marginRight: "10px",
                }}
              />
            </Box> */}
 

import { TextField, MenuItem, Box } from "@mui/material";
 

                onChange={handleChange}
 

                <MenuItem value="fuel2">Fuel2</MenuItem>
                <MenuItem value="fuel3">Fuel3</MenuItem>
 

                <MenuItem value="fuel">Fuel</MenuItem>
                <MenuItem value="fuel2">Fuel2</MenuItem>
                <MenuItem value="fuel3">Fuel3</MenuItem>
 

              ml="10px"
 

            <TextField
              height="6vh"
              sx={{
                width: "400px",
                borderRadius: "5px",
                border: "1px solid #D9D9D966",
              }}
            ></TextField>
 

            <Typography
              variant="body1"
              fontSize="14px"
              fontWeight="600"
              lineHeight="16.6px"
              color="#717171"
              mt="30px"
              ml="38px"
            >
            Unit 
            </Typography>
 

              Fuel Type
 

              Fuel Type
 

              onChange={handleChange}
 

              select
              value={fuel}
 

                "& .MuiSelect-icon": {
                  display: "none",
                },
 

                "& .MuiInputBase-input": {
                  paddingRight: "50px",
                  height: "10px",
                },
 

              SelectProps={{
                displayEmpty: true,
              }}
 
<TextField width="580px" height="56px"></TextField>
 
hello
 

            <Grid2>
            <TextField
                id="outlined-size-small"
                variant="outlined"
                size="small"
              />
            </Grid2>
 
 display:"flex", flexDirection:"row",
 

                fullWidth
                placeholder="Email"
                value={email}
                onChange={(e) => {
                  setEmail(e.target.value);
                  setErrors("");
                }}
                error={!!errors.email}
                helperText={errors.email}
 

              <Gr></Gr>
 

                placeholder="Email"
                value={email}
                onChange={(e) => {
                  setEmail(e.target.value);
                  setErrors("");
                }}
                error={!!errors.email}
                helperText={errors.email}
 

                  paddingRight: "50px",
 
height
 
1px solid 
 
// Ensure the TextField fills the Box
 

                // Hide the default dropdown arrow
 

                // Ensure text doesn't overlap with the image
 
// Ensure it doesn't interfere with clicks
 
 // Maintain aspect ratio
 
// Adjust based on your design needs
 
// Adjust based on your arrow size
 

                paddingRight: "40px", // Space for the arrow
 

          <Box sx={{ position: "relative", width: "450.66px" }}>
            <TextField
              select
              value={fuel}
              onChange={handleChange}
              sx={{
                width: "100%",
                borderRadius: "5px",
                border: "1px solid #D9D9D9",
                paddingRight: "40px", // Space for the arrow
                // Hide the default dropdown arrow
                "& .MuiSelect-icon": {
                  display: "none",
                },
                // Ensure text doesn't overlap with the image
                "& .MuiInputBase-input": {
                  paddingRight: "40px",
                },
                // Optional: Remove default focus border if needed
                "& .Mui-focused": {
                  borderColor: "transparent",
                },
              }}
              SelectProps={{
                displayEmpty: true,
              }}
            >
              <MenuItem value="" disabled>
                Select fuel type
              </MenuItem>
              <MenuItem value="fuel">Fuel</MenuItem>
              <MenuItem value="fuel2">Fuel2</MenuItem>
              <MenuItem value="fuel3">Fuel3</MenuItem>
            </TextField>
            <img
              src={downArrow}
              alt="Dropdown arrow"
              style={{
                position: "absolute",
                right: "10px", // Adjust based on your design needs
                top: "50%",
                transform: "translateY(-50%)",
                width: "20px", // Adjust based on your arrow size
                height: "auto", // Maintain aspect ratio
                pointerEvents: "none", // Ensure it doesn't interfere with clicks
              }}
            />
          </Box>
 
<Box sx={{ position: 'relative', width: '450.66px' }}>
      <TextField
        select
        value={fuel}
        onChange={handleChange}
        sx={{
          width: '460.66px',
          borderRadius: '5px',
          border: '1px solid #D9D9D9',
          paddingRight: '40px', // Space for the arrow
          // Hide the default dropdown arrow
          '& .MuiSelect-icon': {
            display: 'none',
          },
          // Ensure text doesn't overlap with the image
          '& .MuiInputBase-input': {
            paddingRight: '40px',
          },
        }}
        SelectProps={{
          displayEmpty: true,
        }}
      >
        <MenuItem value="" disabled>
          Select fuel type
        </MenuItem>
        <MenuItem value="fuel">Fuel</MenuItem>
        <MenuItem value="fuel2">Fuel2</MenuItem>
        <MenuItem value="fuel3">Fuel3</MenuItem>
      </TextField>
      <img 
        src={downArrow} 
        alt="Dropdown arrow" 
        style={{
          position: 'absolute',
          right: '10px', // Adjust based on your design needs
          top: '50%',
          transform: 'translateY(-50%)',
          width: '20px', // Adjust based on your arrow size
          height: 'auto', // Maintain aspect ratio
          pointerEvents: 'none', // Ensure it doesn't interfere with clicks
        }}
      />
    </Box>
 
 width: '450.66px'
 

          width: '100%',
 

          <Box sx={{ position: "relative", width: "450.66px" }}>
            <TextField
              select
              value={fuel}
              onChange={handleChange}
              sx={{
                width: "100%",
                borderRadius: "5px",
                border: "1px solid #D9D9D9",
                paddingRight: "40px", // Space for the arrow
                // Adjusting the input padding so text doesn't overlap with the arrow
                "& .MuiInputBase-input": {
                  paddingRight: "40px",
                },
              }}
              SelectProps={{
                displayEmpty: true,
              }}
            >
              <MenuItem value="" disabled>
                Select fuel type
              </MenuItem>
              <MenuItem value="fuel">Fuel</MenuItem>
              <MenuItem value="fuel2">Fuel2</MenuItem>
              <MenuItem value="fuel3">Fuel3</MenuItem>
            </TextField>
            <img
              src={downArrow}
              alt="Dropdown arrow"
              style={{
                position: "absolute",
                right: "10px", // Adjust based on your design
                top: "50%",
                transform: "translateY(-50%)",
                width: "20px", // Adjust based on your arrow size
                height: "auto", // Maintain aspect ratio
                pointerEvents: "none", // Ensure it doesn't block interactions
              }}
            />
          </Box>
 

              SelectProps={{
                displayEmpty: true,
              }}
 

          <Box width="250px">
      <TextField
        select
        value={fuel}
        onChange={handleChange}
        sx={{
          width: "450.66px",
          borderRadius: "5px",
          border: "1px solid #D9D9D9 40%",
          // Hide the default dropdown arrow
          '& .MuiSelect-icon': {
            display: 'none',
          },
          // Style for the custom arrow
          '& .custom-arrow': {
            position: 'absolute',
            right: '10px', // Adjust as needed
            top: '50%',
            transform: 'translateY(-50%)',
            pointerEvents: 'none', // To ensure clicks pass through to the dropdown
          },
          // Ensure the container for the custom arrow is properly positioned
          position: 'relative',
        }}
        SelectProps={{
          displayEmpty: true,
        }}
      >
        <MenuItem value="" disabled>
          Select fuel type
        </MenuItem>
        <MenuItem value="fuel">Fuel</MenuItem>
        <MenuItem value="fuel2">Fuel2</MenuItem>
        <MenuItem value="fuel3">Fuel3</MenuItem>
      </TextField>
      <img src={downArrow} className="custom-arrow" alt="Dropdown arrow" />
    </Box>
 
 <Box width="250px">
            <TextField
              select
              value={fuel}
              onChange={handleChange}
              sx={{
                width: "450.66px",
                borderRadius: "5px",
                border: "1px solid #D9D9D9 40%",
              }}
              SelectProps={{
                displayEmpty: true,
              }}
            >
              <Grid2>
              <MenuItem value="" disabled>
                Select fuel type
              </MenuItem>
              <img src={downArrow}></img>
              </Grid2>
              <MenuItem value="fuel">Fuel</MenuItem>
              <MenuItem value="fuel2">Fuel2</MenuItem>
              <MenuItem value="fuel3">Fuel3</MenuItem>
            </TextField>
          </Box>
 

                height:"36px",
 

  const handleChange = (event) => {
    setFuelType(event.target.value);
  };
 

              SelectProps={{
                displayEmpty: true,
              }}
              helperText={fuel === "" ? "Select fuel type" : ""}
 

              {/* Placeholder option */}
              <MenuItem value="" disabled>
                Select fuel type
              </MenuItem>
 

              label="Select Fuel"
 

              <MenuItem value="" disabled>
                Select fuel type
              </MenuItem>
 

            <TextField
              select
              value={fuel}
              onChange={handleChange}
              sx={{
                width: "100%",
              }}
              SelectProps={{
                displayEmpty: true,
              }}
            >
              <MenuItem value="" disabled>
                Select fuel type
              </MenuItem>
              <MenuItem value="fuel">Fuel</MenuItem>
              <MenuItem value="fuel2">Fuel2</MenuItem>
              <MenuItem value="fuel3">Fuel3</MenuItem>
            </TextField>
 

        label="Select Fuel"
 
 <TextField
              labelId="Select Fuel"
              select
              placeholder="Select fuel type"
              value={fuel}
              onChange={handleChange}
              sx={{
                width:"450.67px"
              }}
            >
              <MenuItem value="fuel">Fuel</MenuItem>
              <MenuItem value="fuel2">Fuel2</MenuItem>
              <MenuItem value="fuel3">Fuel3</MenuItem>
            </TextField>
 

            mb="10px"
 

            <TextField
              labelId="Select Fuel"
              select
              placeholder="Select fuel type"
              value={fuel}
              onChange={handleChange}
              sx={{
                width:"450.67px"
              }}
            >
              <MenuItem value="fuel">Fuel</MenuItem>
              <MenuItem value="fuel2">Fuel2</MenuItem>
              <MenuItem value="fuel3">Fuel3</MenuItem>
            </TextField>
 

              fullWidth
 

          <Box width="250px">
            <TextField
              lable="select"
              select
              value={fuel}
              onChange={handleChange}
            >
              <MenuItem value="fuel">Fuel</MenuItem>
              <MenuItem value="fue2">fuel2</MenuItem>
              <MenuItem value="fue3">fuel3</MenuItem>
            </TextField>
          </Box>
 

          <Box width="250px">
            <TextField
              lable="select"
              select
              value={fuel}
              onChange={handleChange}
            >
              <MenuItem value="fuel">Fuel</MenuItem>
              <MenuItem value="fue2">fuel2</MenuItem>
              <MenuItem value="fue3">fuel3</MenuItem>
            </TextField>
          </Box>
 

          <Box width="250px">
            <TextField
              lable="select"
              select
              value={fuel}
              onChange={handleChange}
            >
              <MenuItem value="fuel">Fuel</MenuItem>
              <MenuItem value="fue2">fuel2</MenuItem>
              <MenuItem value="fue3">fuel3</MenuItem>
            </TextField>
          </Box>
 

  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setFuel(event.target.value);
  };
 

          <Select
            labelId="fuel-type-select-label"
            id="fuel-type-select"
            label="Select Fuel Type"
            sx={{ width: "200px" }} // Adjust width as needed
          >
            <MenuItem value="Gasoline">Gasoline</MenuItem>
            <MenuItem value="Petrol">Petrol</MenuItem>
            <MenuItem value="HFO">HFO</MenuItem>
            <MenuItem value="LPG">LPG</MenuItem>
            <MenuItem value="CNG">CNG</MenuItem>
          </Select>
 

          gap: "24px",
 

            placeholder="select fuel"
 
<InputLabel id="fuel-type-select-label">Select Fuel Type</InputLabel>
 

            value={fuelType}
 

            onChange={handleChange}
 
 MenuItem, Select,
 

import MenuItem from "@mui/material";
 

import Select from "@mui/material/Select";
 

import MenuItem from "@mui/material/Men";
 
// Flex container for inline alignment
 

            {/* Adjust margin as needed */}
 
 <Grid2 sx={{ display: "flex", flexDirection: "row", gap: "12px" }}>
          <Typography
            variant="h1"
            fontSize="20px"
            fontWeight="600"
            lineHeight="28px"
            color="#000000"
            alignItems="center"
          >
          <img src={fuel_Logo} alt="fuel_logo" width="13.36px" height="19.49px"/>
            Fuel Consumption
          </Typography>
        </Grid2>
 

            margin="15px"
 

          alignItems: "center",
 

        <FuelConsumption>
 

        }}
 

        sx={{
 
 height: "270px",
          width: "1680px",
          borderRadius: "16px",
          padding: "40px",
          gap:"8px",
 
 Avatar, 
 

                Your carbon footprint includes emissions from buildings and
                vehicles.
 

                Your carbon footprint includes emissions from buildings and
                vehicles.
 

            <Grid2
              sx={{
                width: "31%",
                textAlign: "center",
                display: "flex",
                flexDirection: "column",
                mt: "6px",
                gap: "5px",
                backgroundColor: "#F9FFFC", // Background color on hover
                cursor: "pointer",
                "&:hover": {
                  borderBottom: "3px solid #369D9C", // Bottom border color on hover
                },
              }}
            >
              <Typography
                variant="h1"
                fontSize="16px"
                fontWeight="700"
                lineHeight="18px"
                color="#369D9C"
              >
                Scope 3
              </Typography>
              <Typography
                variant="body1"
                fontSize="11px"
                fontWeight="400"
                lineHeight="21px"
              >
                Your carbon footprint includes emissions from buildings and
                vehicles.
              </Typography>
            </Grid2>
 

                gap: "5px",
 

                margin="10px"
 
 // Bottom border color on hover
 
// Background color on hover
 

            <Grid2
              sx={{
                width: "31%",
                textAlign: "center",
                display: "flex",
                flexDirection: "column",
                gap: "5px",
                backgroundColor: "#F9FFFC", // Background color on hover
                cursor: "pointer",
                transition: "all 0.8s ease", // Smooth transition for hover effects
                "&:hover": {
                  borderBottom: "2px solid #369D9C", // Bottom border color on hover
                },
              }}
            >
              <Typography
                variant="h1"
                fontSize="16px"
                fontWeight="700"
                lineHeight="18px"
                color="#369D9C"
              >
                Scope 3
              </Typography>
              <Typography
                variant="body1"
                fontSize="11px"
                fontWeight="400"
                lineHeight="21px"
              >
                Your carbon footprint includes emissions from buildings and
                vehicles.
              </Typography>
            </Grid2>
 

            <Grid2
              sx={{
                width: "31%",
                textAlign: "center",
                display: "flex",
                flexDirection: "column",
                gap: "5px",
                backgroundColor: "#F9FFFC", // Background color on hover
                cursor: "pointer",
                transition: "all 0.8s ease", // Smooth transition for hover effects
                "&:hover": {
                  borderBottom: "2px solid #369D9C", // Bottom border color on hover
                },
              }}
            >
              <Typography
                variant="h1"
                fontSize="16px"
                fontWeight="700"
                lineHeight="18px"
                color="#369D9C"
              >
                Scope 2
              </Typography>
              <Typography
                variant="body1"
                fontSize="11px"
                fontWeight="400"
                lineHeight="21px"
              >
                Your carbon footprint includes emissions from buildings and
                vehicles.
              </Typography>
            </Grid2>
 
 transition: "all 0.8s ease", // Smooth transition for hover effects
 

                height:"10px",
 

            <Grid2
              sx={{
                width: "32%",
                textAlign: "center",
                background: "#F9FFC",
                display: "flex",
                flexDirection: "column",
                gap: "5px",
              }}
            >
              <Typography
                variant="body1"
                fontSize="16px"
                fontWeight="700"
                lineHeight="18px"
                color="#369D9C"
              >
                <img src={lock_Logo} width="18.82px" height="14px" />
                Scope 2
              </Typography>
              <Typography
                variant="body1"
                fontSize="11px"
                fontWeight="400"
                lineHeight="21px"
              >
                Indirect emissions from purchased utilities impact carbon
                footprint.
              </Typography>
            </Grid2>
            <Grid2
              sx={{
                width: "32%",
                textAlign: "center",
                background: "#F9FFC",
                display: "flex",
                flexDirection: "column",
                gap: "5px",
              }}
            >
              <Typography
                variant="h1"
                fontSize="16px"
                fontWeight="700"
                lineHeight="18px"
                color="#369D9C"
              >
                <img src={lock_Logo} width="18.82px" height="14px" />
                Scope 3
              </Typography>
              <Typography
                variant="p"
                fontSize="11px"
                fontWeight="400"
                lineHeight="21px"
              >
                Carbon footprint includes value chain supplier and customer
                emissions.
              </Typography>
            </Grid2>
 
transition: "all 0.8s ease", // Smooth transition for hover effects
 

                border: "1px solid black",
 

                  color: "#FFFFFF", // Optional: Change text color on hover
 

                backgroundColor: "#F9FFFC",
 
sx={{
                width: "32%",
                textAlign: "center",
                display: "flex",
                flexDirection: "column",
                gap: "5px",
                border: "1px solid black",
                backgroundColor: "#F9FFFC", 
                cursor:"pointer"
              }}
 
// Added background color
 
 <Grid2
              sx={{
                width: "32%",
                textAlign: "center",
                display: "flex",
                flexDirection: "column",
                gap: "5px",
                border: "1px solid black",
              }}
            >
              <Typography
                variant="h1"
                fontSize="16px"
                fontWeight="700"
                lineHeight="18px"
                color="#369D9C"
              >
                Scope 1
              </Typography>
              <Typography
                variant="body1"
                fontSize="11px"
                fontWeight="400"
                lineHeight="21px"
              >
                Your carbon footprint includes emissions from buildings and
                vehicles.
              </Typography>
            </Grid2>
 

              cursor:"pointer",
 
import { Avatar, Button, Grid2, Typography } from "@mui/material";
import React from "react";
import lock_Logo from "../../assets/images/Lock.svg";

function ReportStateEmpty() {
  return (
    <div style={{ backgroundColor: "#E3E3E3", minHeight: "100vh" }}>
      <Grid2>
        <Grid2
          sx={{
            padding: "25px 70px 0px 70px",
            width: "100%",
            height: "120px",
            bgcolor: "#ffffff",
            display: "flex",
            flexDirection: "column",
          }}
        >
          <Grid2
            sx={{
              width: "100%",
              height: "48px",
              display: "flex",
              flexDirection: "row",
              gap: "8px",
            }}
          >
            <Typography
              variant="h1"
              style={{
                fontSize: "22px",
                fontWeight: "600",
                lineHeight: "33.89px",
              }}
            >
              Q3 2024 Report
            </Typography>
            <Typography
              variant="p"
              style={{
                fontSize: "22px",
                fontWeight: "400",
                lineHeight: "33.89px",
              }}
            >
              I Delhi
            </Typography>
            <div style={{ marginLeft: "auto" }}>
              <Button
                sx={{
                  borderRadius: "32px",
                  border: "1px solid #28814D",
                  padding: "16px 32px 16px 32px",
                  height: "48px",
                  fontWeight: "500",
                  fontSize: "14px",
                  textTransform: "capitalize",
                  color: "#28814D",
                }}
              >
                Add member
              </Button>
            </div>
          </Grid2>
          <Grid2 sx={{ display: "flex", flexDirection: "row" }}>
            <Grid2
              sx={{
                width: "32%",
                textAlign: "center",
                display: "flex",
                flexDirection: "column",
                gap: "5px",
                border: "1px solid black",
                transition: "background-color 0.3s ease", // Smooth transition effect
                "&:hover": {
                  backgroundColor: "#F9FFC", // Background color on hover
                },
              }}
            >
              <Typography
                variant="h1"
                fontSize="16px"
                fontWeight="700"
                lineHeight="18px"
                color="#369D9C"
              >
                Scope 1
              </Typography>
              <Typography
                variant="body1"
                fontSize="11px"
                fontWeight="400"
                lineHeight="21px"
              >
                Your carbon footprint includes emissions from buildings and
                vehicles.
              </Typography>
            </Grid2>
            <Grid2
              sx={{
                width: "32%",
                textAlign: "center",
                background: "#F9FFC",
                display: "flex",
                flexDirection: "column",
                gap: "5px",
              }}
            >
              <Typography
                variant="body1"
                fontSize="16px"
                fontWeight="700"
                lineHeight="18px"
                color="#369D9C"
              >
                <img src={lock_Logo} width="18.82px" height="14px" />
                Scope 2
              </Typography>
              <Typography
                variant="body1"
                fontSize="11px"
                fontWeight="400"
                lineHeight="21px"
              >
                Indirect emissions from purchased utilities impact carbon
                footprint.
              </Typography>
            </Grid2>
            <Grid2
              sx={{
                width: "32%",
                textAlign: "center",
                background: "#F9FFC",
                display: "flex",
                flexDirection: "column",
                gap: "5px",
              }}
            >
              <Typography
                variant="h1"
                fontSize="16px"
                fontWeight="700"
                lineHeight="18px"
                color="#369D9C"
              >
                <img src={lock_Logo} width="18.82px" height="14px" />
                Scope 3
              </Typography>
              <Typography
                variant="p"
                fontSize="11px"
                fontWeight="400"
                lineHeight="21px"
              >
                Carbon footprint includes value chain supplier and customer
                emissions.
              </Typography>
            </Grid2>
          </Grid2>
        </Grid2>
      </Grid2>
    </div>
  );
}

export default ReportStateEmpty;

 

                backgroundColor: "#F9FFC",
 
<Grid2 sx={{ display: "flex", flexDirection: "row" }}>
            <Grid2
              sx={{
                width: "32%",
                textAlign: "center",
                display: "flex",
                flexDirection: "column",
                gap: "5px",
                border:"1px solid black",
                backgroundColor: "#F9FFC",
              }}
            >
              <Typography
                variant="h1"
                fontSize="16px"
                fontWeight="700"
                lineHeight="18px"
                color="#369D9C"
              >
                Scope 1
              </Typography>
              <Typography
                variant="p"
                fontSize="11px"
                fontWeight="400"
                lineHeight="21px"
              >
                Your carbon footprint includes emissions from buildings and
                vehicles.
              </Typography>
            </Grid2>
            <Grid2
              sx={{
                width: "32%",
                textAlign: "center",
                background: "#F9FFC",
                display: "flex",
                flexDirection: "column",
                gap: "5px",
              }}
            >
              <Typography
                variant="h1"
                fontSize="16px"
                fontWeight="700"
                lineHeight="18px"
                color="#369D9C"
              >
                <img src={lock_Logo} width="18.82px" height="14px" />
                Scope 2
              </Typography>
              <Typography
                variant="p"
                fontSize="11px"
                fontWeight="400"
                lineHeight="21px"
              >
                Indirect emissions from purchased utilities impact carbon
                footprint.
              </Typography>
            </Grid2>
            <Grid2
              sx={{
                width: "32%",
                textAlign: "center",
                background: "#F9FFC",
                display: "flex",
                flexDirection: "column",
                gap: "5px",
              }}
            >
              <Typography
                variant="h1"
                fontSize="16px"
                fontWeight="700"
                lineHeight="18px"
                color="#369D9C"
              >
                <img src={lock_Logo} width="18.82px" height="14px" />
                Scope 3
              </Typography>
              <Typography
                variant="p"
                fontSize="11px"
                fontWeight="400"
                lineHeight="21px"
              >
                Carbon footprint includes value chain supplier and customer
                emissions.
              </Typography>
            </Grid2>
          </Grid2>
 

                backgroundColor:"#F9FFC"
 

                background: "#F9FFC",
 

              </Grid2>
 

              <Grid2
                sx={{
                  display: "flex",
                  flexDirection: "row",
                  gap: "5px",
                  alignItems: "center",
                  justifyContent: "center",
                }}
              >
 

              </Grid2>
 

              <Grid2
                sx={{
                  display: "flex",
                  flexDirection: "row",
                  gap: "10px",
                  alignItems: "center",
                  justifyContent: "center",
                }}
              >
 

                Carbon footprint includes value chain supplier and customer
                emissions.
 
<Typography
                variant="h1"
                fontSize="16px"
                fontWeight="700"
                lineHeight="18px"
                color="#369D9C"
              >
                Scope 3
              </Typography>
 
// Centers items vertically
 

                m
 

              <Grid2 sx={{display:"flex",flexDirection:"row",gap:""}}>
              
              </Grid2>
 

              <Avatar></Avatar>
 

                Your carbon footprint includes emissions from buildings and
                vehicles.
 

                Your carbon footprint includes emissions from buildings and
                vehicles.
 

            <Grid2 sx={{ width: "32%", textAlign: "center" }}>
              <Typography>Scope 1</Typography>
            </Grid2>
            <Grid2 sx={{ width: "32%", textAlign: "center" }}>
              <Typography>Scope 1</Typography>
            </Grid2>
 
bgcolor:"#F9FFC", border:"1px solid "
 
border:"1px solid 0px 0px 4px 0px
 

                  fontW: "500",
 
0%, #28814D 100%);
 
 

border-image-source: linear-gradient(101.74deg,
 
border: 1px solid
 

            <Button>Add member</Button>
 

          border:"1px solid black"
 

          borderBottom: "1px so", // Only bottom border
 

          borderBottom: "1px solid #E3E3E3",
 
border: 1px solid 
 
padding: '20px'
 

          color:""
 

          justifyContent:"space-between"
 
// Adjust this value as needed
 
 // Checked color
 
// Unchecked color
 
// import React from "react";
// import TextField from "@mui/material/TextField";
// import Radio from "@mui/material/Radio";
// import Wrapper from "../Wrapper/Wrapper";
// import logo from "../../assets/images/ge3s_logo.png";
// import "./AccountCreationIntro.css";
// import { useState } from "react";
// import { Link, useNavigate } from "react-router-dom";

// export default function AccountCreationIntro() {
//   const navigate = useNavigate();
//   const [email, setEmail] = useState("");
//   const [password, setPassword] = useState("");
//   const [confirmPassword, setConfirmPassword] = useState("");
//   const [isTermsAccepted, setIsTermsAccepted] = useState(false);
//   const [showPassword, setShowPassword] = useState(false);
//   const [showConfirmPassword, setShowConfirmPassword] = useState(false);

//   const isFormValid = () => {
//     return (
//       email.trim() !== "" &&
//       password.trim() !== "" &&
//       confirmPassword.trim() !== "" &&
//       password === confirmPassword &&
//       isTermsAccepted
//     );
//   };
//   const handleSubmit = (e) => {
//     e.preventDefault();
//     if (isFormValid()) {
//       alert("Form is valid and ready for submission!");
//     } else {
//       alert("Please fill in all fields correctly and agree to the terms.");
//     }
//   };
//   return (
//     <Wrapper>
//       <div className="registration-container">
//         <form className="registration-form" onSubmit={handleSubmit}>
//           <div className="registration-card">
//             <div className="registration-header">
//               <img src={logo} alt="logo" className="header-logo" />
//               <h2>Start Creating Your Account</h2>
//             </div>
//             <div className="form-field">
//               <p>Verified Email Address</p>
//               <TextField
//                 id="email-field"
//                 variant="outlined"
//                 size="small"
//                 fullWidth
//                 required
//                 name="email"
//                 placeholder="Email"
//                 type="email"
//                 value={email}
//                 onChange={(e) => setEmail(e.target.value)}
//               />
//             </div>
//             <div className="form-field">
//               <TextField
//                 id="outlined-size-small"
//                 variant="outlined"
//                 size="small"
//                 fullWidth
//                 placeholder="Password"
//                 type={showPassword ? "text" : "password"}
//                 value={password}
//                 onChange={(e) => setPassword(e.target.value)}
//                 slotProps={{
//                   input: {
//                     style: { paddingLeft: "10px" },
//                   },
//                 }}
//               />
//               <span
//                 className="toggle-password-2"
//                 onClick={() => setShowPassword(!showPassword)}
//               >
//                 <svg
//                   xmlns="http://www.w3.org/2000/svg"
//                   width="25"
//                   height="24"
//                   viewBox="0 0 25 24"
//                   fill="none"
//                 >
//                   <g clip-path="url(#clip0_1214_40689)">
//                     <path
//                       d="M12.5 6.89258C18.5 6.89258 23.375 11.9238 23.375 11.9238C23.375 11.9238 18.5 16.9551 12.5 16.9551C6.5 16.9551 1.625 11.9238 1.625 11.9238C1.625 11.9238 6.5 6.89258 12.5 6.89258Z"
//                       stroke="#969696"
//                       stroke-miterlimit="10"
//                     />
//                     <path
//                       d="M12.5 16.9551C15.3995 16.9551 17.75 14.7025 17.75 11.9238C17.75 9.14515 15.3995 6.89258 12.5 6.89258C9.60051 6.89258 7.25 9.14515 7.25 11.9238C7.25 14.7025 9.60051 16.9551 12.5 16.9551Z"
//                       stroke="#969696"
//                       stroke-miterlimit="10"
//                     />
//                     <path
//                       d="M12.5 12.6426C12.9142 12.6426 13.25 12.3208 13.25 11.9238C13.25 11.5269 12.9142 11.2051 12.5 11.2051C12.0858 11.2051 11.75 11.5269 11.75 11.9238C11.75 12.3208 12.0858 12.6426 12.5 12.6426Z"
//                       stroke="#969696"
//                       strokeWidth="2"
//                       stroke-miterlimit="10"
//                     />
//                   </g>
//                   <defs>
//                     <clipPath id="clip0_1214_40689">
//                       <rect
//                         width="24"
//                         height="23"
//                         fill="white"
//                         transform="translate(0.5 0.423828)"
//                       />
//                     </clipPath>
//                   </defs>
//                 </svg>
//               </span>
//             </div>

//             <div className="form-field">
//               <TextField
//                 id="confirm-password-field"
//                 variant="outlined"
//                 size="small"
//                 fullWidth
//                 placeholder="Confirm-Password"
//                 type={showConfirmPassword ? "text" : "password"}
//                 value={confirmPassword}
//                 onChange={(e) => setConfirmPassword(e.target.value)}
//                 slotProps={{
//                   input: {
//                     style: { paddingLeft: "10px" },
//                   },
//                 }}
//               />
//               <span
//                 className="toggle-password-2"
//                 onClick={() => setShowConfirmPassword(!showConfirmPassword)}
//               >
//                 <svg
//                   xmlns="http://www.w3.org/2000/svg"
//                   width="25"
//                   height="24"
//                   viewBox="0 0 25 24"
//                   fill="none"
//                 >
//                   <g clip-path="url(#clip0_1214_40689)">
//                     <path
//                       d="M12.5 6.89258C18.5 6.89258 23.375 11.9238 23.375 11.9238C23.375 11.9238 18.5 16.9551 12.5 16.9551C6.5 16.9551 1.625 11.9238 1.625 11.9238C1.625 11.9238 6.5 6.89258 12.5 6.89258Z"
//                       stroke="#969696"
//                       stroke-miterlimit="10"
//                     />
//                     <path
//                       d="M12.5 16.9551C15.3995 16.9551 17.75 14.7025 17.75 11.9238C17.75 9.14515 15.3995 6.89258 12.5 6.89258C9.60051 6.89258 7.25 9.14515 7.25 11.9238C7.25 14.7025 9.60051 16.9551 12.5 16.9551Z"
//                       stroke="#969696"
//                       stroke-miterlimit="10"
//                     />
//                     <path
//                       d="M12.5 12.6426C12.9142 12.6426 13.25 12.3208 13.25 11.9238C13.25 11.5269 12.9142 11.2051 12.5 11.2051C12.0858 11.2051 11.75 11.5269 11.75 11.9238C11.75 12.3208 12.0858 12.6426 12.5 12.6426Z"
//                       stroke="#969696"
//                       strokeWidth="2"
//                       stroke-miterlimit="10"
//                     />
//                   </g>
//                   <defs>
//                     <clipPath id="clip0_1214_40689">
//                       <rect
//                         width="24"
//                         height="23"
//                         fill="white"
//                         transform="translate(0.5 0.423828)"
//                       />
//                     </clipPath>
//                   </defs>
//                 </svg>
//               </span>

//               <div className="terms-checkbox">
//                 <Radio
//                   value="agree"
//                   required
//                   name="terms-radio"
//                   inputProps={{ "aria-label": "Agree" }}
//                   checked={isTermsAccepted}
//                   onChange={(e) => setIsTermsAccepted(e.target.checked)}
//                 />
//                 <span>I agree to the </span>
//                 <span className="terms-highlight">Terms and Conditions</span>
//               </div>
//             </div>

//             <Link to="/create-account-successfully">
//               <button
//                 type="submit"
//                 disabled={!isFormValid()}
//                 className={
//                   isFormValid() ? "acc-button-active" : "acc-button-disabled"
//                 }
//               >
//                 Submit
//               </button>
//             </Link>
//           </div>
//         </form>
//       </div>
//     </Wrapper>
//   );
// }

 

import logo from "../../images/ge3s_logo.png";
 

import Wrapper from "../../Wrapper/Wrapper";
 
CreateAcc
 
// Disable button if the form is not valid
 
// The button will trigger form submission
 
// Fixed value here
 
 // Fixed toggle logic here
 

            {/* This is the form section */}
 

            {/* This is the header section */}
 

        {/* This is the card component */}
 
 // Proceed with form submission or further processing
      // For example, you might use navigate() here if you're using React Router
 
// Check if the email field is not empty
 
// import React from "react";
// import TextField from "@mui/material/TextField";
// import "./AccountCreationHeader.css";
// import Wrapper from "../Wrapper/Wrapper";
// import { useNavigate } from "react-router-dom";
// import logo from "../../assets/images/ge3s_logo.png";
// import { PiUploadLight } from "react-icons/pi";

// export default function AccountCreationHeader() {
//   const navigate = useNavigate();

//   return (
//     <Wrapper>
//       <div className="main-container">
//         <div className="logo-container">
//           <img src={logo} alt="Logo" className="logo" />
//           <h1 className="header">Start creating your account</h1>
//         </div>

//         <div className="middle-container">
//           <div className="profile-section">
//             <img
//               src="\src\assets\images\profile-logo.png"
//               alt="Profile Icon"
//               className="profile-icon"
//             />
//             <button class="upload-button">
//               <PiUploadLight class="icon" />
//               <span class="text">Upload Photo</span>
//             </button>
//           </div>

//           <div className="input">
//             <TextField
//               id="outlined-size-small"
//               label=""
//               variant="outlined"
//               size="small"
//               fullWidth
//               placeholder="FullName"
//             />
//           </div>
//         </div>

//         <button
//           onClick={() => {
//             navigate("");
//           }}
//           className="create-account-btn"
//         >
//           Create Account
//         </button>
//       </div>
//     </Wrapper>
//   );
// }

// import React from "react";
// import "./AccountCreationHeader.css";
// import profile from "../../assets/images/profile.svg";
// import TextField from "@mui/material/TextField";
// import logo from "../../assets/images/ge3s_logo.png";
// import upload from "../../assets/images/Upload.svg";
// import { useState } from "react";
// import { useNavigate } from "react-router-dom";
// import Wrapper from "../Wrapper/Wrapper";

// function AccountCreationHeader() {
//   const handleButtonClick = () => {
//     const fileInput = document.createElement("input");
//     fileInput.type = "file";
//     fileInput.onchange = (event) => {
//       const file = event.target.files[0];
//       if (file) {
//         alert("File selected: " + file.name);
//       }
//     };
//     fileInput.click();
//   };
//   const [email, setEmail] = useState("");
//   const navigate = useNavigate();

//   // Check if the email field is not empty
//   const isFormValid = email.trim() !== "";
//   return (
//     <Wrapper>
//       <div className="form-container">
//         <div className="form-card">
//           {/* Header Section */}
//           <div className="header-section">
//             <img src={logo} alt="logo" className="header-logo" />
//             <h2 className="header-title">Start creating your account</h2>
//           </div>
//           {/* Profile Section */}
//           <div className="profile-section">
//             <img src={profile} alt="profile" className="profile-image" />
//             <button className="upload-button" onClick={handleButtonClick}>
//               <img src={upload} className="upload-icon" />
//               <span className="upload-text">Upload Photo</span>
//             </button>
//             <div className="input_login">
//               <TextField
//                 id="outlined-size-small"
//                 variant="outlined"
//                 size="small"
//                 fullWidth
//                 required
//                 name="email"
//                 placeholder="Email"
//                 value={email}
//                 onChange={(e) => setEmail(e.target.value)}
//                 slotProps={{
//                   input: {
//                     style: { paddingLeft: "10px" },
//                   },
//                 }}
//               />
//             </div>
//             <button
//               onClick={() => navigate("/account-Intro")}
//               disabled={!isFormValid}
//               className={
//                 isFormValid ? "acc-button-active" : "acc-button-disabled"
//               }
//             >
//               Create Account
//             </button>
//           </div>
//         </div>
//       </div>
//     </Wrapper>
//   );
// }

// export default AccountCreationHeader;
 

    height: "420px",
    width: "430px",
 

import upload from "../../images/Upload.svg";
 

import profile from "./../../images/profile.svg";
 

import logo from "../../assets/images/ge3s_logo";
 
CreateHeader
 
../../Wrapper/Wrapper
 
// import "./CreateAccountSuccessfully.css";
// import Wrapper from "../../components/Wrapper/Wrapper";
// import { Link } from "react-router-dom";

// export default function CreateAccountSuccessfully() {
//   return (
//     <Wrapper>
//       <div className="confirm">
//         <div className="crossbtn">
//           <Link to="/generate-reports">
//             <svg width="25" height="25" viewBox="0 0 32 32" fill="none">
//               <g id="X">
//                 <path
//                   id="Vector"
//                   d="M25.7081 24.2925C25.801 24.3854 25.8747 24.4957 25.9249 24.6171C25.9752 24.7385 26.0011 24.8686 26.0011 25C26.0011 25.1314 25.9752 25.2615 25.9249 25.3829C25.8747 25.5043 25.801 25.6146 25.7081 25.7075C25.6151 25.8004 25.5048 25.8741 25.3835 25.9244C25.2621 25.9747 25.132 26.0006 25.0006 26.0006C24.8692 26.0006 24.7391 25.9747 24.6177 25.9244C24.4963 25.8741 24.386 25.8004 24.2931 25.7075L16.0006 17.4138L7.70806 25.7075C7.52042 25.8951 7.26592 26.0006 7.00056 26.0006C6.73519 26.0006 6.4807 25.8951 6.29306 25.7075C6.10542 25.5199 6 25.2654 6 25C6 24.7346 6.10542 24.4801 6.29306 24.2925L14.5868 16L6.29306 7.70751C6.10542 7.51987 6 7.26537 6 7.00001C6 6.73464 6.10542 6.48015 6.29306 6.29251C6.4807 6.10487 6.73519 5.99945 7.00056 5.99945C7.26592 5.99945 7.52042 6.10487 7.70806 6.29251L16.0006 14.5863L24.2931 6.29251C24.4807 6.10487 24.7352 5.99945 25.0006 5.99945C25.2659 5.99945 25.5204 6.10487 25.7081 6.29251C25.8957 6.48015 26.0011 6.73464 26.0011 7.00001C26.0011 7.26537 25.8957 7.51987 25.7081 7.70751L17.4143 16L25.7081 24.2925Z"
//                   fill="black"
//                 />
//               </g>
//             </svg>
//           </Link>
//         </div>
//         <div className="confirmtick">
//           <svg width="75" height="90" viewBox="0 0 113 113" fill="none">
//             <circle
//               cx="56.5"
//               cy="56.5"
//               r="56"
//               fill="url(#paint0_linear_939_5057)"
//             />
//             <path
//               d="M34.0957 56.3002L49.0854 71.29L78.9071 41.4683"
//               stroke="white"
//               strokeWidth="8.83606"
//             />
//             <defs>
//               <linearGradient
//                 id="paint0_linear_939_5057"
//                 x1="0.5"
//                 y1="0.5"
//                 x2="130.171"
//                 y2="27.4392"
//                 gradientUnits="userSpaceOnUse"
//               >
//                 <stop stopColor="#51ADAC" />
//                 <stop offset="1" stopColor="#4FA874" />
//               </linearGradient>
//             </defs>
//           </svg>
//         </div>
//         <div className="confirm-footer">
//           <p>Your account has been created sucessfully </p>
//           <Link to="/generate-reports">
//             <button>Continue</button>
//           </Link>
//         </div>
//       </div>
//     </Wrapper>
//   );
// }

 
 color: " #000000",
                  fontSize: "18px",
                  fontWeight: "550",
                  lineHeight: "36px",
                  textAlign: "center",
                  whiteSpace: "nowrap",
                  overflow: "hidden",
                  textOverflow: "ellipsis",
 

                  letterSpacing: "-0.02em",
 

                  fontfamily: Inter
 

font-size: 24px;
font-weight: 500;
line-height: 36px;
 

text-align: center;
 
#00000background:
 

import CreateAccountSucessfully from "./components/AccCreateSuccesfully/CreateAccountSuccessfully";
 
SuceesfullyMui
 

import Wrapper from "../../Wrapper/Wrapper";
 
 /* Optional: Add ellipsis if text overflows */
 
 /* Hide any overflow text */
 
